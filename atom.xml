<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鑫酱</title>
  
  <subtitle>笔记本</subtitle>
  <link href="https://hakuya.me/atom.xml" rel="self"/>
  
  <link href="https://hakuya.me/"/>
  <updated>2024-03-19T03:15:29.212Z</updated>
  <id>https://hakuya.me/</id>
  
  <author>
    <name>鑫酱(●&#39;◡&#39;●)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unreal Iris（五）BaseLine &amp;&amp; DeltaCompression</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%BA%94%EF%BC%89BaseLine%20&amp;&amp;%20DeltaCompression/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%BA%94%EF%BC%89BaseLine%20&amp;&amp;%20DeltaCompression/</id>
    <published>2024-03-10T12:54:05.000Z</published>
    <updated>2024-03-19T03:15:29.212Z</updated>
    
    <content type="html"><![CDATA[<div class="note info 文章代码来源于 Unreal 5.2 版本"></div><h1 id="unreal-iris五baseline-deltacompression"><a class="anchor" href="#unreal-iris五baseline-deltacompression">#</a> Unreal Iris（五）BaseLine &amp;&amp; DeltaCompression</h1><p>增量更新是 Iris Replication 的新功能，其最大的优势在于可以有效减少对象的复制内容，提高整个 Replication System 的复制效率。</p><h2 id="相关配置"><a class="anchor" href="#相关配置">#</a> 相关配置</h2><p>只有配置了的 ClassName 才会开启增量同步。</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[/Script/IrisCore.ObjectReplicationBridgeConfig]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">; DeltaCompressionConfigs</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">+DeltaCompressionConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.Pawn))</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">+DeltaCompressionConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.PlayerState))</span></pre></td></tr></table></figure><h2 id="fdatastreamchannelrecord"><a class="anchor" href="#fdatastreamchannelrecord">#</a> FDataStreamChannelRecord</h2><p><strong>FDataStreamChannelRecord</strong> 是 <strong>UDataStreamChannel</strong> 中的一个环形队列，用来记录每个  <code>FReplicationWriter::WriteObjectInBatch</code>  时的生成的记录信息。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310165423772.png" alt="image-20240310165423772" /></p><p>首先得知道一个概念：每个连接的每次同步都是以 NetObject 为单位进行。但实际上，一个同步中很可能包含了不只一个 NetObject，通常需要同该 NetObject 的 SubObject、Dependent、Attachment  一同进行处理，使其成为一个完整的<strong>数据集</strong>。我们姑且把这个完整的数据集记录称之为 <strong>FDataStreamRecord</strong>，并会为数据集分配一个 PacketId，网络层面的 Ack 操作也会以 Packet 为单位。</p><h3 id="fbatchinfo"><a class="anchor" href="#fbatchinfo">#</a> FBatchInfo</h3><p>完整数据集 <strong>FBatchInfo</strong>，记录了一次对象打包所包含的关联对象信息和同步的状态内容：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310145307572.png" alt="image-20240310145307572" /></p><ul><li>ParentInternalIndex：当前打包对象的 ObjectInternalIndex 编号，子对象存储的是父对象编号。</li><li>ObjectInfos：参与本次打包的所有对象信息：<ul><li><strong>InternalIndex</strong>：对象编号。</li><li><strong>NewBaselineIndex</strong>：BaseLine 编号（0 or 1）。</li><li><strong>AttachmentType</strong>：Attachment 类型，见 <strong>ENetObjectAttachmentType</strong>。</li><li><strong>AttachmentRecord</strong>：这个比较复杂后面再介绍。</li></ul></li></ul><h3 id="freliablenetblobqueue"><a class="anchor" href="#freliablenetblobqueue">#</a> <strong>FReliableNetBlobQueue</strong></h3><p><strong>FReliableNetBlobQueue</strong> 是一个简单的可靠环形队列，里面存储了 256 个 Unack 的数据包。分别用 Sent 和 Acked 两个队列标记哪些发送了，哪些 Acked 了，如果 Sent 且 Acked 了那么环形队列就可以把头指针后移。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310153402072.png" alt="image-20240310153402072" /></p><h3 id="fnetobjectattachmentsendqueue"><a class="anchor" href="#fnetobjectattachmentsendqueue">#</a> <strong>FNetObjectAttachmentSendQueue</strong></h3><p><strong>FNetObjectAttachmentSendQueue</strong> 包含一个可靠队列，一个不可靠队列</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310153548242.png" alt="image-20240310153548242" /></p><h3 id="attachmentrecord"><a class="anchor" href="#attachmentrecord">#</a> AttachmentRecord</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">union</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">struct</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        uint32 UnreliableRecord<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        FReliableNetBlobQueue<span class="token operator">::</span>ReplicationRecord ReliableRecord<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    ReplicationRecord CombinedRecord<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这是一个 64 位结构，包含一个 32 位的 UnreliableRecord 和一个 32 位的 ReliableRecord</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240319111525356.png" alt="image-20240319111525356" /></p><p>其中 WriteSeq 标识 NetBlobs (256 个的数据包数组) 的下标，WriteCount 标识从 Seq 开始往后成功写入了多少个 Blob。由于数据包必须是保序的，如果中间断开了就会用新的字段记录。</p><h2 id="fbatchrecord"><a class="anchor" href="#fbatchrecord">#</a> FBatchRecord</h2><p><strong>FBatchInfo</strong> 是完整数据集的临时载体，需要通过  <code>FReplicationWriter::CreateObjectRecord</code>  把 <strong>FBatchInfo</strong> 转换为 <strong>FBatchRecord</strong>，然后做长期存储：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310155517215.png" alt="image-20240310155517215" /></p><h3 id="frecordinfo"><a class="anchor" href="#frecordinfo">#</a> <strong>FRecordInfo</strong></h3><ul><li><strong>Index</strong>：ObjectInternalIndex，看起来 20 位就够用了。</li><li><strong>ChangeMaskOrPtr</strong>：这个比较关键，是单独分配的内存，用于存储当前帧的该对象脏数据（对后面生成 BaseLine 有大用）。</li><li><strong>NextIndex</strong>：下一帧的发送记录。</li></ul><h2 id="replicationrecord"><a class="anchor" href="#replicationrecord">#</a> ReplicationRecord</h2><p>当对象的数据被写入成功后（实际上就已经算是发送成功了）。需要按照 NetObject 为单位把记录存储下来，方便之后的 Acked。所有发送记录都会被存储在 <strong>FReplicationRecord</strong> 内：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310161257684.png" alt="image-20240310161257684" /></p><ul><li><strong>ReplicatedObjectsRecordInfoLists</strong>：按对象为单位记录所有已发送记录的起始编号和结束编号。</li><li><strong>FReplicationRecord::RecordInfos</strong>：记录列表，一个环形队列，里面每个记录都是一个对象的一次发包信息，多个发包信息之间又是按照时序串在一起的。</li><li><strong>Record</strong>：环形队列，记录每一帧的发包数量，也就是每次的 RecordInfos num。</li><li><strong>AttachmentRecords</strong>：环形队列，没有顺序的样子，就是单纯记录每个发送过的 Attachment 编号。</li></ul><p>我们可以通过每个 Connection 的 <strong>ReplicationRecord</strong> 知道当前有哪些对象的状态被同步过且没有 Ack，以及这些 NetObject 的每次增量同步信息和 DirtyMask。但是还是差了些东西，仔细想想 RecordInfo 里面只有 <strong>ChangeMask</strong>，并没有实际的同步数据呀，因此当某个对象积攒了很多次的信息都丢失了，需要重新同步的时候中间的<strong>变化</strong>很可能会丢失。因此就需要一个结构来存储这份增量 or 快照 ——<strong>FReplicationStateStorage</strong>。</p><h3 id="acked"><a class="anchor" href="#acked">#</a> Acked</h3><p>网络层面的 Acked 是按照 PacketId 为单位的，因此数据集的 Acked 要么全收到要么一个没收到。而 Acked 之后就需要清理对应的 RecordInfo：</p><p>当收到客户端的 Acked 时会执行  <code>UDataStreamChannel::ReceivedAck</code>  从 <strong>FReplicationRecord::Record</strong> 中弹出最近一次的发送记录（Record 数量）然后去遍历 RecordInfos。这里上层的 <strong>UDataStreamChannel::WriteRecords</strong> 会检查 Acked 顺序，保证最早发出去的最先被 Acked。</p><h2 id="fdeltacompressionbaselinemanager"><a class="anchor" href="#fdeltacompressionbaselinemanager">#</a> FDeltaCompressionBaselineManager</h2><p><strong>FDeltaCompressionBaselineManager</strong> 是 BaseLine 的管理器，通过 ObjectInternalIndex 访问对应的 <strong>FPerObjectInfo</strong>。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310175622098.png" alt="image-20240310175622098" /></p><h3 id="fdeltacompressionbaselinemanagerfperobjectinfo"><a class="anchor" href="#fdeltacompressionbaselinemanagerfperobjectinfo">#</a> FDeltaCompressionBaselineManager::FPerObjectInfo</h3><ul><li><strong>BaselinesForConnections</strong> 中包含两个 <strong>BaseLine</strong>。<ul><li><strong>LastAckedBaseLine</strong> 。如果收到客户的的 Acked，就会销毁，然后用 <strong>PendingBaseLine</strong> 替换 <strong>LastAckedBaseLine</strong>。</li><li><strong>PendingBaseLine</strong>。每次发包的时候都会重新基于当前对象状态进行创建。发包数据 = PendingBaseLine - LastAckedBaseLine。</li></ul></li><li><strong>ChangeMasksForConnections</strong> 有三个部分内容：<ul><li>ChangeMaskConnection：当前帧计算出的 ChangeMask 会存储在这里，每一帧都会更新。</li><li>LastAckedBaseLine or PendingBaseLine 的 ChangeMask。这两个结构是连续的，数据来源字节拷贝的 ChangeMaskConnection。</li></ul></li></ul><h3 id="baseline"><a class="anchor" href="#baseline">#</a> BaseLine</h3><p>BaseLine 是一个概念，表示当前对象的同步是基于那个基准做的。例如当对象第一次同步时，实际上时基于当前时刻，对象的全量数据为基础进行。那么 BaseLine 就时当前时刻的对象状态，当来到下一帧时，对象属性发生变化，此时就存在两种状态：</p><ul><li>基于 BaseLine 同步的状态 A</li><li>当前实际上的状态 B</li></ul><p>如果始终没有收到客户端对于状态 A 的 Ack 信息，那么之后的每次同步都必须基于状态 B 做全量，一旦收到了状态 A 的 Ack，那么就可以只做状态 B 和 状态 A 的差量同步 DeltaAB。</p><h3 id="fdeltacompressionbaseline"><a class="anchor" href="#fdeltacompressionbaseline">#</a> <strong>FDeltaCompressionBaseline</strong></h3><p><strong>FDeltaCompressionBaseline</strong> 是临时的增量 BaseLine，虽然自身是临时的，但其中包含两个重要信息会被存储：</p><ul><li><strong>FInternalBaseline</strong>：这个结构可以通过 ObjectInfoStorage [ObjectIndexToObjectInfoIndex [<strong>ObjectInternalIndex</strong>]].BaselinesForConnections[<strong>ConnectionIndex</strong>] 访问，稍微有点绕。里面存储了该 <mark>BaseLine 的 ChangeMask</mark>（好像没啥用）和 <strong>BaselineStateInfoIndex</strong>（这个很有用，可以用来查询 <strong>FInternalBaselineStateInfo</strong>）</li><li><strong>FInternalBaselineStateInfo</strong>：通过 BaselineStateInfos [<strong>BaselineStateInfoIndex</strong>] 访问，里面存储了该<mark> BaseLine 的 StateBuffer</mark></li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310182110406.png" alt="image-20240310182110406" /></p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>通过上述几个类的介绍，我们大致可以想像出整个 DeltaCompression 的运转流程：</p><ul><li><p>对象开启复制：当一个对象需要复制的时候，由于还没有任何一条 BaseLine，因此会创建新的 PendingBaseLine，该 BaseLine 会使用其最新的 ReplicationState 作为基准生成全量数据 All_StateBuffer &amp;&amp; Cur_ChangeMask。</p></li><li><p>PendingBaseLine 中包括本次同步的 ChangeMask 和 StateBuffer，即：<strong>数据</strong>和<strong>脏标记</strong>。</p></li><li><p>当数据成功发送以后，会在 <strong>FReplicationRecord</strong> 记录下 Record 信息，其中包括了对象使用的哪条 BaseLine 生成的该 Record，方便 Acked 的时候变更 BaseLine。</p></li><li><p>当收到客户端 Packet 的 Ack，就开始「消费」 Record，并且销毁掉 LastAckedBaseLine，然后把 PendingBaseLine 作为新的 LastAckedBaseLine 使用。</p></li><li><p>当触发对象再次同步时：</p><ul><li>如果存在 LastAckedBaseLine，会使用最新的 ReplicationState 和 LastAckedBaseLine 做差量得到增量数据 Delta_StateBuffer。并通过 ReplicationState 的 ChangeMask 和 Record 的 ChangeMask 做 Combine 得到最新的 Delta_Combine_ChangeMask。注意，这里合并后的 ChangeMask 会体现在本次发包后的 Record 中，但是不会体现在 BaseLine 的 ChangeMask 上，实际看下来 BaseLine 的 ChangeMask 并没有任何作用可言。</li><li>如果不存在 LastAckedBaseLine，则还是需要全量同步。而且 ChangeMask 需要合并所有没有 Acked 的 Record 以及当前帧的 ChangeMask。</li></ul></li><li><p>每个对象的两条 BaseLine，实际上是在不停的交替使用，而 <strong>FReplicationRecord</strong> 则是用来帮助恢复前几帧丢失的 ChangeMask。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info 文章代码来源于 Unreal 5.2 版本&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-iris五baseline-deltacompression&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-iris五bas</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="Iris" scheme="https://hakuya.me/tags/Iris/"/>
    
    <category term="BaseLine" scheme="https://hakuya.me/tags/BaseLine/"/>
    
    <category term="DeltaCompression" scheme="https://hakuya.me/tags/DeltaCompression/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Iris（四）DataStream</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E5%9B%9B%EF%BC%89DataStream/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E5%9B%9B%EF%BC%89DataStream/</id>
    <published>2024-03-10T12:54:04.000Z</published>
    <updated>2024-03-12T03:29:37.620Z</updated>
    
    <content type="html"><![CDATA[<div class="note info 文章代码来源于 Unreal 5.2 版本"></div><h1 id="unreal-iris四datastream"><a class="anchor" href="#unreal-iris四datastream">#</a> Unreal Iris（四）DataStream</h1><p>本章主要介绍 UObject 对象的数据在整个 Iris Replication System 的流向。</p><h2 id="udatastreamchannel"><a class="anchor" href="#udatastreamchannel">#</a> UDataStreamChannel</h2><p>Iris Replication 和 Unreal 原生的 Replication 最大的不同就在于 Channel。原生版本下每个 Connection 中的每个 Actor 都会有单独的 Channel，然后状态信息会被记录在对应的 Channel 中。而 Iris 中一个 Connection 只会有一个 DataStreamChannel 负责同步所有的 Actor，而所有 Actor 的同步信息都会存储在一个叫 FReplicationWriter 的结构中。由于存在对象之间的引用和依赖关系，或者其他业务层面的复杂联系，把多个 Actor 信息打包为一个 Packet 进行发送，肯定是要比分成多个 Channel 进行发送来的要轻松很多，也更可控一些，例如数据的 Ack，写溢出情况下的回滚。</p><p>要开启 DataStreamChannel 需要在配置项中添加以下内容：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[/Script/Engine.NetDriver]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">; All Iris replication is handled by various DataStream implementations that are ticked via the DataStreamManager instance in this channel.</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">+ChannelDefinitions</span><span class="token attr-value"><span class="token punctuation">=</span>(ChannelName=DataStream, ClassName=/Script/Engine.DataStreamChannel, StaticChannelIndex=2, bTickOnCreate=true, bServerOpen=true, bClientOpen=true, bInitialServer=true, bInitialClient=true)</span></pre></td></tr></table></figure><h2 id="datastream"><a class="anchor" href="#datastream">#</a> DataStream</h2><p>DataStream 负责数据序列化反序列化的上层抽象。目前 Iris 主要有两大类 DataStream</p><ul><li>ReplicationDataStream</li><li>NetTokenDataStream</li></ul><p>在配置选项中定义如下：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[/Script/IrisCore.DataStreamDefinitions]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">+DataStreamDefinitions</span><span class="token attr-value"><span class="token punctuation">=</span>(DataStreamName=NetToken, ClassName=/Script/IrisCore.NetTokenDataStream, DefaultSendStatus=EDataStreamSendStatus::Send, bAutoCreate=true)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">+DataStreamDefinitions</span><span class="token attr-value"><span class="token punctuation">=</span>(DataStreamName=Replication, ClassName=/Script/IrisCore.ReplicationDataStream, DefaultSendStatus=EDataStreamSendStatus::Send, bAutoCreate=true)</span></pre></td></tr></table></figure><h3 id="nettokendatastream"><a class="anchor" href="#nettokendatastream">#</a> NetTokenDataStream</h3><p>这个是用来同步 NetToken 信息，主要是一些无关游戏玩法，单纯客户端服务器之间交互的数据，比如资源加载情况。</p><h3 id="replicationdatastream"><a class="anchor" href="#replicationdatastream">#</a> ReplicationDataStream</h3><p>这个是负责 UObject 对象的属性同步和 RPC（Attachments），主要的实现类分别是：</p><ul><li>FReplicationWriter：负责将数据序列化到消息包内。</li><li>FReplicationReader：负责从消息包中反序列化数据到 StateBuffer。</li></ul><h2 id="sendstate-recvstate"><a class="anchor" href="#sendstate-recvstate">#</a> SendState &amp;&amp; RecvState</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310115757920.png" alt="image-20240310115757920" /></p><p>接收和发送状态整体来看流程比较类似，只不过一个是顺向工程，一个是逆向。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308165814427.png" alt="image-20240308165814427" /></p><p>整套流程会涉及到两个核心的结构 <strong>ReplicatedObjectData</strong> 和 <strong>ReplicatedObjectStateBuffers</strong>。</p><h3 id="freplicatedobjectdata"><a class="anchor" href="#freplicatedobjectdata">#</a> FReplicatedObjectData</h3><p>ReplicatedObjectData 是整个发送流程的核心，主要包含以下几部分内容：</p><ul><li><strong>FReplicationProtocol</strong>：这个在 ReplicationState 部分介绍过了，是记录 UObject 对应 UClass 的 MetaData 信息，可以通过 <strong>FReplicationStateDescriptor</strong> 来获取每个字段的类型及函数调用的地址偏移，方便按需访问。此外 FReplicationStateDescriptor  中每个字段还会配备相应的 <strong>FNetSerializer</strong> 定义序列化反序列化。 由于是 UClass 级别的数据，因此同类型的对象可以共用一个 <strong>FReplicationProtocol</strong>。</li><li><strong>FReplicationInstanceProtocol</strong>：这个在 ReplicationState 部分也介绍过了，其内部会存储多个 <strong>FReplicationFragment</strong>，每个 <strong>FReplicationFragment</strong> 又包含多个 Property 信息，这些 Property 中会记录 UObject 对象对应的字段内容。如果开启了 PushModle 的情况下，每次同步之前会比对两者的差异，将新的属性从 UObject 写入 <strong>FReplicationFragment</strong> 并记录下数据的脏标记，为之后 NetObject 的属性同步做好准备。值得一提的是 NetObject 是一个抽象的概念，实际上就是多个 <strong>FReplicationFragment</strong> 的集合。另外由于 <strong>FReplicationInstanceProtocol</strong> 需要关联和管理对象属性，因此每个 UObject 都需要有单独的 <strong>FReplicationInstanceProtocol</strong>。</li><li><strong>ReceiveStateBuffer</strong>：接收缓冲区。通过网络送达的对象信息会被 <strong>FReplicationReader</strong> 读取，然后通过逆向工程解析到 ReceiveStateBuffer，要注意里面的数据依旧还是序列化的。</li></ul><blockquote><p>ExternalOffset &amp;&amp; InternalOffset，两者都记录的是内存地址的偏移情况。<strong>ExternalOffset</strong> 存储的是 FReplicationData 中的偏移，由于 FReplicationData 数据组织比较的结构化，StateBuffer 组装的，因此布局上面有些许差异。 <strong>InternalOffset</strong> 则是计算整个对象序列化后的各属性偏移，一般参考项是一整块连续的内存空间。常常用在 ReplicatedObjectStateBuffers 或者 BaseLine 的 StateBuffer。</p></blockquote><h3 id="replicatedobjectstatebuffers"><a class="anchor" href="#replicatedobjectstatebuffers">#</a> ReplicatedObjectStateBuffers</h3><p>该结构和 <strong>ReceiveStateBuffer</strong> 功能上类似，一个负责缓存发送的序列化数据，另一个负责缓存接收的序列化数据。</p><p>ReplicatedObjectStateBuffers 中的数据来自 UObject 本身，因此是最新的。这部分数据会被用来做网络同步亦或是 BaseLine 的创建。</p><h2 id="发送哪些数据"><a class="anchor" href="#发送哪些数据">#</a> 发送哪些数据</h2><p>Iris Replication System 为了保证能够高效的同步对象属性，会尽可能的减少需要同步的内容量，因此知道「需要发送哪些数据」就变得尤为重要，这里主要分了三个步骤来筛选所需的同步内容：</p><h3 id="pollandrefreshcachedpropertydata获取变更的属性片段"><a class="anchor" href="#pollandrefreshcachedpropertydata获取变更的属性片段">#</a> PollAndRefreshCachedPropertyData—— 获取变更的属性片段</h3><p>第一步其实就是从 UObject 上把脏数据拷贝过来，触发时机是在每次 Tick 更新的最前面  <code>UObjectReplicationBridge::PreUpdateAndPollImpl</code> ，具体实现可以参考函数  <code>FReplicationInstanceOperations::PollAndRefreshCachedPropertyData</code> ，大致就是把需要同步（通过 GetLifetimeReplicatedProps 注册上的属性）的都过一遍 —— <code>FPropertyReplicationState::SetPropertyValue</code> ，由于 PropertyFragements 会存储前一次的属性值，因此变化了就在 <strong>FPropertyReplicationState</strong> 打上脏标记，顺带更新一下数据。</p><h3 id="copydirtystatedata整理完整的变更属性"><a class="anchor" href="#copydirtystatedata整理完整的变更属性">#</a> CopyDirtyStateData—— 整理完整的变更属性</h3><p>接着就是第二步，从 <strong>FPropertyReplicationState</strong> 把脏数据又给添加到 <strong>ReplicatedObjectStateBuffers</strong>，不一样的是之前 <strong>FPropertyReplicationState</strong> 里的数据是一部分属性的，然后通过多个 <strong>FPropertyReplicationState</strong> 拼凑在一起组成一个完整的 UObject 脏数据。到了 <strong>ReplicatedObjectStateBuffers</strong> 里，它就变成一块完整的连续空间了。</p><h3 id="writeobjectinbatch处理属性同步条件和对象依赖"><a class="anchor" href="#writeobjectinbatch处理属性同步条件和对象依赖">#</a> <strong>WriteObjectInBatch—— 处理属性同步条件和对象依赖</strong></h3><p>最后就是第三步，执行  <code>FReplicationWriter::WriteObjectInBatch</code>  从 <strong>ReplicatedObjectStateBuffers</strong> 把数据写入到发送包体内，再写入之前还有很多额外的操作。比如需要判断某些属性是否满足同步条件（对象的生命周期，属性是否被设置隐藏标记等），对象同步的时候还需要带上 SubObject 的信息，如果可以的话还需要跟上 Dependent 信息和 Attachment 信息。有关对象的引用，也会在打包的时候尽可能共享一份数据，避免重复打包。数据打包又可以有增量和全量两种方式，打包成功后就会把同步每个对象的同步内容缓存起来，为后续的 Ack 和 BaseLine 创建做准备。</p><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNUNHkxbjdxQS8/c3BtX2lkX2Zyb209MzMzLjc4OCZhbXA7dmRfc291cmNlPWE2ZTVhYTQ5OTczZDhkMmNlODljNDZjMjA3ZTVmODQ1">[UFSH2023] Iris Replication System 初探 | 陈宝康 Epic Games</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info 文章代码来源于 Unreal 5.2 版本&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-iris四datastream&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-iris四datastream&quot;&gt;#&lt;/a&gt; </summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="Iris" scheme="https://hakuya.me/tags/Iris/"/>
    
    <category term="DataStream" scheme="https://hakuya.me/tags/DataStream/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Iris（三）Filtering &amp;&amp; Prioritization</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%B8%89%EF%BC%89Filtering%20&amp;&amp;%20Prioritization/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%B8%89%EF%BC%89Filtering%20&amp;&amp;%20Prioritization/</id>
    <published>2024-03-10T12:54:03.000Z</published>
    <updated>2024-03-11T03:34:13.750Z</updated>
    
    <content type="html"><![CDATA[<div class="note info 文章代码来源于 Unreal 5.2 版本"></div><h1 id="unreal-iris三filtering-prioritization"><a class="anchor" href="#unreal-iris三filtering-prioritization">#</a> Unreal Iris（三）Filtering &amp;&amp; Prioritization</h1><p>Unreal Iris 并不支持 ReplicationGraph，取而代之的提供了 Filtering System 和 Prioritization。虽然目前还没有 ReplicationGraph 强大，但是性能方面有了很大程度的提升。</p><h2 id="dirtynetobjecttracker"><a class="anchor" href="#dirtynetobjecttracker">#</a> DirtyNetObjectTracker</h2><p>Iris 的 Filtering 并不是每帧都需要处理所有对象，而是通过 DirtyTracker 追踪每一帧中变化的对象，然后通过 Filtering 得到这些对象应该出现在哪些 Connection 亦或者从哪些 Connection 中被移除。</p><h2 id="filtering"><a class="anchor" href="#filtering">#</a> Filtering</h2><p>Filtering 操作主要发生在 TickFlush 的 PreSendUpdate 阶段。其主要作用就是筛选出哪些对象是需要同步的：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307095246281.png" alt="image-20240307095246281" /></p><p>在讲解整个 Filter 流程之前，先来看看其组成内容有哪些。Filter System 的实现核心在 <strong>FReplicationFiltering</strong> 中，大致可以分为四大块：</p><ul><li>Owner Filter：针对对象的过滤。</li><li>Connection Filter：只对某些连接可见的过滤。</li><li>Group Filter：多个 Actor 组成一个 Group，该 Group 只对某些连接可见。</li><li>Dynamic Filter：灵活多变，用于自定义的过滤规则。</li></ul><h3 id="owner-filter"><a class="anchor" href="#owner-filter">#</a> Owner Filter</h3><p>通过 ObjectInternalIndex 进行访问，其功能是指定某个 Object 对某个 Connection 可见的一对一关系。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307165600924.png" alt="image-20240307165600924" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">UReplicationSystem</span><span class="token operator">::</span><span class="token function">SetFilter</span><span class="token punctuation">(</span>FNetRefHandle Handle<span class="token punctuation">,</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>FNetObjectFilterHandle Filter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">constexpr</span> FNetObjectFilterHandle ToOwnerFilterHandle <span class="token operator">=</span> <span class="token function">FNetObjectFilterHandle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Server<span class="token operator">-></span>ReplicationSystem<span class="token operator">-></span><span class="token function">SetFilter</span><span class="token punctuation">(</span>ServerObject<span class="token operator">-></span>NetRefHandle<span class="token punctuation">,</span> ToOwnerFilterHandle<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="connection-filter"><a class="anchor" href="#connection-filter">#</a> Connection Filter</h3><p>通过 ObjectInternalIndex 进行访问，其功能是指定某个 Object 对某些 Connection 可见的一对多关系。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307165910248.png" alt="image-20240307165910248" /></p><p><code>UsedPerObjectInfoStorage</code>  中的每一位都是一个 ConnectionStateIdx，里面是 0/1 则表示对应的 ConnectionStateIdx 是否被使用中。</p><p>ConnectionStateIdx 会指向  <code>PerObjectInfoStorage</code>  的一块连续数据，这些数据中的每一位都代表一个有效 Connection 的可见性。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307170152836.png" alt="image-20240307170152836" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">UReplicationSystem</span><span class="token operator">::</span><span class="token function">SetConnectionFilter</span><span class="token punctuation">(</span>FNetRefHandle Handle<span class="token punctuation">,</span> <span class="token keyword">const</span> TBitArray<span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">&amp;</span> Connections<span class="token punctuation">,</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>ENetFilterStatus ReplicationStatus<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    </pre></td></tr><tr><td data-num="3"></td><td><pre>TBitArray<span class="token operator">&lt;</span><span class="token operator">></span> AllowedConnections<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>AllowedConnections<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> Client<span class="token operator">-></span>ConnectionIdOnServer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>AllowedConnections<span class="token punctuation">[</span>Client<span class="token operator">-></span>ConnectionIdOnServer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Server<span class="token operator">-></span>ReplicationSystem<span class="token operator">-></span><span class="token function">SetConnectionFilter</span><span class="token punctuation">(</span>ServerObject<span class="token operator">-></span>NetRefHandle<span class="token punctuation">,</span> AllowedConnections<span class="token punctuation">,</span> ENetFilterStatus<span class="token operator">::</span>Allow<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="group-filter"><a class="anchor" href="#group-filter">#</a> Group Filter</h3><p>通过 ObjectInternalIndex 进行访问，每个 NetObject 最多可以绑定到 4 个 Group 上。Group 通过 GroupHandle 进行访问，并关联一组 Connection。其功能是指定一组 NetObject 对若干个 Connection。</p><p>每个 GroupHandle 对应一个  <code>FNetObjectGroup</code>  和 一个  <code>FPerGroupInfo</code> ：</p><ul><li><code>FNetObjectGroup</code> ：其中可以包含若干个 NetObject 的 ObjectInternalIndex。可以通过 Group 关联上多个 NetObject。</li><li><code>FPerGroupInfo</code> ：其中包含一个 ConnectionStateIndex。可以通过 Group 关联上多个 Connection。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307172049452.png" alt="image-20240307172049452" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FNetObjectGroupHandle GroupHandle <span class="token operator">=</span> Server<span class="token operator">-></span>ReplicationSystem<span class="token operator">-></span><span class="token function">CreateGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Server<span class="token operator">-></span>ReplicationSystem<span class="token operator">-></span><span class="token function">AddToGroup</span><span class="token punctuation">(</span>GroupHandle<span class="token punctuation">,</span> ServerObject<span class="token operator">-></span>NetRefHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Server<span class="token operator">-></span>ReplicationSystem<span class="token operator">-></span><span class="token function">AddGroupFilter</span><span class="token punctuation">(</span>GroupHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="dynamic-filter"><a class="anchor" href="#dynamic-filter">#</a> Dynamic Filter</h3><p>动态过滤，用户自定义的过滤规则。通过 ObjectInternalIndex 进行访问，多个 NetObject 对应一个 DynamicFilter 规则（UNetObjectFilter）。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308104316008.png" alt="image-20240308104316008" /></p><p>目前 Iris 提供了三种过滤规则，可以通过配置文件的方式进行添加：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308104856522.png" alt="image-20240308104856522" /></p><ul><li><strong>UFilterOutNetObjectFilter</strong>：一刀切什么都不同步。</li><li><strong>UNetObjectGridFilter</strong>：基于网格的距离同步。</li><li><strong>UNopNetObjectFilter</strong>：一刀切什么都同步。</li></ul><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[/Script/IrisCore.NetObjectFilterDefinitions]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">+NetObjectFilterDefinitions</span><span class="token attr-value"><span class="token punctuation">=</span>(FilterName=Spatial, ClassName=/Script/IrisCore.NetObjectGridFilter, ConfigClassName=/Script/IrisCore.NetObjectGridFilterConfig)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">+NetObjectFilterDefinitions</span><span class="token attr-value"><span class="token punctuation">=</span>(FilterName=NotRouted, ClassName=/Script/IrisCore.FilterOutNetObjectFilter, ConfigClassName=/Script/IrisCore.FilterOutNetObjectFilterConfig)</span></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UNetObjectGridFilterConfig</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UNetObjectFilterConfig</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">/** How many frames a view position should be considered relevant. To avoid culling issues when player borders cells. */</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>uint32 ViewPosRelevancyFrameCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">float</span> CellSizeX <span class="token operator">=</span> <span class="token number">20000.0f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">float</span> CellSizeY <span class="token operator">=</span> <span class="token number">20000.0f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">/** Objects with larger sqrt(NetCullDistanceSqr) will be rejected. */</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">float</span> MaxCullDistance <span class="token operator">=</span> <span class="token number">20000.0f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">/** Objects without a NetCullDistanceSquared property will assume to have this value but squared unless there's a cull distance override. */</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">float</span> DefaultCullDistance <span class="token operator">=</span> <span class="token number">15000.0f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">/** Coordinates will be clamped to MinPos and MaxPos. */</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>FVector MinPos <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">0.5f</span><span class="token operator">*</span><span class="token number">2097152.0f</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5f</span><span class="token operator">*</span><span class="token number">2097152.0f</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5f</span><span class="token operator">*</span><span class="token number">2097152.0f</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">/** Coordinates will be clamped to MinPos and MaxPos. */</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>FVector MaxPos <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">+</span><span class="token number">0.5f</span><span class="token operator">*</span><span class="token number">2097152.0f</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">0.5f</span><span class="token operator">*</span><span class="token number">2097152.0f</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">0.5f</span><span class="token operator">*</span><span class="token number">2097152.0f</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>还可以单独配置每个类型采用何种 Dyanmic Filter：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[/Script/IrisCore.ObjectReplicationBridgeConfig]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">; Filters</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">DefaultSpatialFilterName</span><span class="token attr-value"><span class="token punctuation">=</span>Spatial</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">; Clear all filters</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">!FilterConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>ClearArray</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token constant">+FilterConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.LevelScriptActor, DynamicFilterName=NotRouted) ; Not needed</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">+FilterConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.Actor, DynamicFilterName=None))</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">; Info types aren't supposed to have physical representation</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token constant">+FilterConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.Info, DynamicFilterName=None)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token constant">+FilterConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.PlayerState, DynamicFilterName=None)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">; Pawns can be spatially filtered</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token constant">+FilterConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.Pawn, DynamicFilterName=Spatial))</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token constant">+FilterConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/EntityActor.SimObject, DynamicFilterName=None))</span></pre></td></tr></table></figure><h2 id="connection-filter-result"><a class="anchor" href="#connection-filter-result">#</a> Connection Filter Result</h2><p>Connection 中有单独的结构用于存储过滤过程中每个步骤的结果 ——<strong>FReplicationFiltering::FPerConnectionInfo</strong>。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308102217973.png" alt="image-20240308102217973" /></p><ul><li><strong>ConnectionFilteredObjects</strong>: 连接对对象的可见性状态。这个数据来源于  <code>NetRefHandleManager-&gt;GetScopableInternalIndices()</code>  、 <strong>Owner Filter</strong> 和 <strong>Object Connection Filter</strong> 的 并集。</li><li><strong>GroupFilteredOutObjects</strong>：<strong>Group Filter</strong> 规则特意让某些 Group 中的 NetObject 对于 Connection 不可见时，会把该状态汇总更新在这里。</li><li><strong>ObjectsInScopeBeforeDynamicFiltering</strong> 基于前两者 AndNotOp 合并后的结果。既对象本身可见或者因为 ConnectionFilter or Owner Filter 可见但又没被 Group 给排除掉的对象。</li><li><strong>DynamicFilteredOutObjects</strong>：因为 <strong>Dynamic Filter</strong> 而被排除的对象。</li><li><strong>ObjectsInScope</strong>：最终的过滤结果。 <code>ObjectsInScopeBeforeDynamicFilteringData &amp; ~DynamicFilteredOutObjectsData</code>  的结果。</li></ul><p>通过上诉四轮过滤，最终的结果会保留在每个连接的 <strong>ObjectsInScope</strong> 中，整个过滤过程便会到此结束。对于外部系统来说，只需要关注 <strong>ObjectsInScope</strong> 的最终结果即可，并且可以通过前后两帧的差异实现进出视野的业务逻辑。</p><h2 id="prioritization"><a class="anchor" href="#prioritization">#</a> Prioritization</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308112813318.png" alt="image-20240308112813318" /></p><p>当对象的 PriorityValue 为 0 的时候，则表示该对象是不会参与同步。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310120339701.png" alt="image-20240310120339701" /></p><ul><li><strong>NetObjectPrioritizationInfos</strong>：记录每个对象计算优先级时，根据计算规则，存储所需的数据。</li><li><strong>ObjectIndexToPrioritizer</strong>：标识对象具体需要何种计算规则。</li><li><strong>PrioritizerInfos</strong>：存储所有种类的优先级计算规则。</li><li><strong>ConnectionInfos</strong>：存储所有连接中，各个对象的优先级数值。</li></ul><p>整体来看就是对所有对象，应用不同的优先级规则，计算出该 NetObject 在各个连接上的优先级数值。定义对象的优先级策略可以通过以下方式实现：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[/Script/IrisCore.ObjectReplicationBridgeConfig]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">; PrioritizerConfigs</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">+PrioritizerConfigs</span><span class="token attr-value"><span class="token punctuation">=</span>(ClassName=/Script/Engine.PlayerState, PrioritizerName=PlayerState)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">[/Script/IrisCore.NetObjectPrioritizerDefinitions]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token constant">+NetObjectPrioritizerDefinitions</span><span class="token attr-value"><span class="token punctuation">=</span>(PrioritizerName=Default, ClassName=/Script/IrisCore.SphereNetObjectPrioritizer, ConfigClassName=/Script/IrisCore.SphereNetObjectPrioritizerConfig)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">+NetObjectPrioritizerDefinitions</span><span class="token attr-value"><span class="token punctuation">=</span>(PrioritizerName=PlayerState, ClassName=/Script/IrisCore.NetObjectCountLimiter, ConfigClassName=/Script/Engine.PlayerStateCountLimiterConfig)</span></pre></td></tr></table></figure><p>或者通过接口动态设置：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">UReplicationSystem</span><span class="token operator">::</span><span class="token function">SetPrioritizer</span><span class="token punctuation">(</span>FNetRefHandle Handle<span class="token punctuation">,</span> FNetObjectPrioritizerHandle Prioritizer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    </pre></td></tr><tr><td data-num="3"></td><td><pre>ReplicationSystem<span class="token operator">-></span><span class="token function">SetPrioritizer</span><span class="token punctuation">(</span>RefHandle<span class="token punctuation">,</span> DefaultSpatialNetObjectPrioritizerHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>Unreal 目前支持两种类别的优先级处理：基于距离，基于同步间隔。如果需要自定义规则可以继承 <strong>UNetObjectPrioritizer</strong> 实现相关的接口：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310120449248.png" alt="image-20240310120449248" /></p><p>亦或者指定某个对象的 StaticPriority：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UReplicationSystem</span><span class="token operator">::</span><span class="token function">SetStaticPriority</span><span class="token punctuation">(</span>FNetRefHandle Handle<span class="token punctuation">,</span> <span class="token keyword">float</span> Priority<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    </pre></td></tr><tr><td data-num="3"></td><td><pre>ReplicationSystem<span class="token operator">-></span><span class="token function">SetStaticPriority</span><span class="token punctuation">(</span>ServerDependentObject<span class="token operator">-></span>NetRefHandle<span class="token punctuation">,</span> <span class="token number">0.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="依赖关系在优先级中的体现"><a class="anchor" href="#依赖关系在优先级中的体现">#</a> 依赖关系在优先级中的体现</h3><p>实际上很多对象的同步顺序会收到依赖关系的影响：</p><ul><li>如果 Dependent 关系中 EDependentObjectSchedulingHint 设置的 ScheduleBeforeParent，那么会确保 Child 的优先级比 Parent 高一点，这里一般会加上一个 UE_KINDA_SMALL_NUMBER (1.e-4f)。</li><li>如果没有这种强依赖关系的情况下，会让两者的优先级持平，存在多个依赖的情况下会取最大者。</li></ul><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNUNHkxbjdxQS8/c3BtX2lkX2Zyb209MzMzLjc4OCZhbXA7dmRfc291cmNlPWE2ZTVhYTQ5OTczZDhkMmNlODljNDZjMjA3ZTVmODQ1">[UFSH2023] Iris Replication System 初探 | 陈宝康 Epic Games</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info 文章代码来源于 Unreal 5.2 版本&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-iris三filtering-prioritization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-iris三filt</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="Iris" scheme="https://hakuya.me/tags/Iris/"/>
    
    <category term="Filtering" scheme="https://hakuya.me/tags/Filtering/"/>
    
    <category term="Prioritization" scheme="https://hakuya.me/tags/Prioritization/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Iris（二）ReplicationState</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%BA%8C%EF%BC%89ReplicationState/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%BA%8C%EF%BC%89ReplicationState/</id>
    <published>2024-03-10T12:54:02.000Z</published>
    <updated>2024-03-11T03:12:37.190Z</updated>
    
    <content type="html"><![CDATA[<div class="note info 文章代码来源于 Unreal 5.2 版本"></div><h1 id="unreal-iris二replicationstate"><a class="anchor" href="#unreal-iris二replicationstate">#</a> Unreal Iris（二）ReplicationState</h1><p>ReplicationState 是 Unreal Iris Replication System 中用于描述对象同步状态。要完成对于状态数据的同步需要多个模块的分工合作：</p><ul><li>NetSerializer：针对网络同步对象的序列化和反序列化规则。</li><li>ReplicationStateDescriptor：针对 UObject 中各个成员，在 Replication System 中的如何说明以及应用何种规则的描述。</li><li>Protocol：上述两者结合，对 UObject 的成员进行描述组织，使其成为可以进行网络同步的数据载体，再通过特有的序列化规则将数据发送出去的协议。</li></ul><h2 id="fpropertynetserializerinfo-fnetserializer"><a class="anchor" href="#fpropertynetserializerinfo-fnetserializer">#</a> FPropertyNetSerializerInfo &amp;&amp; FNetSerializer</h2><p><code>FNetSerializer</code>  是整个同步流程中数据处理的核心，负责数据的序列化、反序列化、增量序列化、增量反序列化等操作，里面的函数会在打包解包等过程中使用：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FNetSerializer</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>uint32 Version<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ENetSerializerTraits Traits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>NetSerializeFunction Serialize<span class="token punctuation">;</span><span class="token comment">// 序列化</span></pre></td></tr><tr><td data-num="7"></td><td><pre>NetDeserializeFunction Deserialize<span class="token punctuation">;</span><span class="token comment">// 反序列化</span></pre></td></tr><tr><td data-num="8"></td><td><pre>NetSerializeDeltaFunction SerializeDelta<span class="token punctuation">;</span><span class="token comment">// 增量序列化</span></pre></td></tr><tr><td data-num="9"></td><td><pre>NetDeserializeDeltaFunction DeserializeDelta<span class="token punctuation">;</span><span class="token comment">// 增量反序列化</span></pre></td></tr><tr><td data-num="10"></td><td><pre>NetQuantizeFunction Quantize<span class="token punctuation">;</span><span class="token comment">// 对象转 pod</span></pre></td></tr><tr><td data-num="11"></td><td><pre>NetDequantizeFunction Dequantize<span class="token punctuation">;</span><span class="token comment">//pod 转对象</span></pre></td></tr><tr><td data-num="12"></td><td><pre>NetIsEqualFunction IsEqual<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>NetValidateFunction Validate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>NetCloneDynamicStateFunction CloneDynamicState<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>NetFreeDynamicStateFunction FreeDynamicState<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>NetCollectNetReferencesFunction CollectNetReferences<span class="token punctuation">;</span><span class="token comment">// 引用收集</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">const</span> FNetSerializerConfig<span class="token operator">*</span> DefaultConfig<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>uint16 QuantizedTypeSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>uint16 QuantizedTypeAlignment<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>uint16 ConfigTypeSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>uint16 ConfigTypeAlignment<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>FPropertyNetSerializerInfo</code>  则用于描述单个 UClass 的数据加工规则，一个 UClass 可以支持<mark>多个</mark>  <code>FPropertyNetSerializerInfo</code> ，通过 IsSupported 接口对具体的 UClass 实例采用不同的加工方案。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306103056704.png" alt="image-20240306103056704" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240310110505711.png" alt="image-20240310110505711" /></p><p>序列化器的声明：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UE_NET_DECLARE_SERIALIZER</span><span class="token punctuation">(</span>FInt8NetSerializer<span class="token punctuation">,</span> IRISCORE_API<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UE_NET_IMPLEMENT_SERIALIZER</span><span class="token punctuation">(</span>FInt8NetSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">UE_NET_DECLARE_SERIALIZER</span><span class="token punctuation">(</span>SerializerName<span class="token punctuation">,</span> Api<span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token class-name">Api</span> SerializerName </span><span class="token punctuation">##</span> <span class="token expression">NetSerializerInfo  </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>FNetSerializer Serializer<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token expression"><span class="token keyword">static</span> uint32 <span class="token function">GetQuantizedTypeSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token expression"><span class="token keyword">static</span> uint32 <span class="token function">GetQuantizedTypeAlignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> FNetSerializerConfig<span class="token operator">*</span> <span class="token function">GetDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/** Implement a serializer using the struct named SerializerName. */</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">UE_NET_IMPLEMENT_SERIALIZER</span><span class="token punctuation">(</span>SerializerName<span class="token punctuation">)</span> <span class="token keyword">const</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>FNetSerializer SerializerName </span><span class="token punctuation">##</span> <span class="token expression">NetSerializerInfo<span class="token operator">::</span>Serializer <span class="token operator">=</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span><span class="token class-name">TNetSerializer</span><span class="token operator">&lt;</span>SerializerName<span class="token operator">></span><span class="token operator">::</span><span class="token function">ConstructNetSerializer</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span>#SerializerName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token expression">uint32 SerializerName </span><span class="token punctuation">##</span> <span class="token expression"><span class="token class-name">NetSerializerInfo</span><span class="token operator">::</span><span class="token function">GetQuantizedTypeSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span><span class="token class-name">TNetSerializerBuilder</span><span class="token operator">&lt;</span>SerializerName<span class="token operator">></span><span class="token operator">::</span><span class="token function">GetQuantizedTypeSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token expression">uint32 SerializerName </span><span class="token punctuation">##</span> <span class="token expression"><span class="token class-name">NetSerializerInfo</span><span class="token operator">::</span><span class="token function">GetQuantizedTypeAlignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span><span class="token class-name">TNetSerializerBuilder</span><span class="token operator">&lt;</span>SerializerName<span class="token operator">></span><span class="token operator">::</span><span class="token function">GetQuantizedTypeAlignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token expression"><span class="token keyword">const</span> FNetSerializerConfig<span class="token operator">*</span> SerializerName </span><span class="token punctuation">##</span> <span class="token expression"><span class="token class-name">NetSerializerInfo</span><span class="token operator">::</span><span class="token function">GetDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span><span class="token class-name">TNetSerializerBuilder</span><span class="token operator">&lt;</span>SerializerName<span class="token operator">></span><span class="token operator">::</span><span class="token function">GetDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span></pre></td></tr></table></figure><p><code>RegisterDefaultPropertyNetSerializerInfos</code>  注册时机在 IrisCoreModule 加载时触发：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">RegisterPropertyNetSerializerSelectorTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> UE<span class="token operator">::</span>Net<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>Private<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">FPropertyNetSerializerInfoRegistry</span><span class="token operator">::</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name">FInternalNetSerializerDelegates</span><span class="token operator">::</span><span class="token function">BroadcastPreFreezeNetSerializerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">RegisterDefaultPropertyNetSerializerInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token class-name">FPropertyNetSerializerInfoRegistry</span><span class="token operator">::</span><span class="token function">Freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token class-name">FInternalNetSerializerDelegates</span><span class="token operator">::</span><span class="token function">BroadcastPostFreezeNetSerializerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">void</span> <span class="token function">RegisterDefaultPropertyNetSerializerInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// Register supported types</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// Integer types</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FInt8Property<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FInt16Property<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FIntProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FInt64Property<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FUint8PropertyNetSerializerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FUInt16Property<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FUInt32Property<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FUInt64Property<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// Enum types</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FEnumAsBytePropertyNetSerializerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FEnumPropertyNetSerializerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FNetRoleNetSerializerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// Float types</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FFloatProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FDoubleProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// Object and field types</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FObjectProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FWeakObjectProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FScriptInterfacePropertyNetSerializerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FSoftObjectProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FFieldPathProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_SoftObjectPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_SoftClassPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// String types</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FNameProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FStrProperty<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">// Special types</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FNativeBoolPropertyNetSerializerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>FBitFieldPropertyNetSerializerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">// Named structs that we support</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_Guid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>NAME_Vector<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>NAME_Vector3f<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>NAME_Vector3d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>NAME_Rotator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>NAME_Quat<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>NAME_Quat4f<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>NAME_Quat4d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_Vector_NetQuantize100<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_Vector_NetQuantize10<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_Vector_NetQuantize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_Vector_NetQuantizeNormal<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token function">UE_NET_REGISTER_NETSERIALIZER_INFO</span><span class="token punctuation">(</span>PropertyNetSerializerRegistry_NAME_DateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>如果定义了复杂的结构体，但是其中各个成员都有支持的序列化器，那么该结构体也是可以被自动识别并序列化的。</p><p>如果结构体重写了  <code>bool NetSerialize(FArchive&amp; Ar, class UPackageMap* Map, bool&amp; bOutSuccess)</code>  函数，需要在配置项中进行声明：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[/Script/IrisCore.ReplicationStateDescriptorConfig]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=GameplayCueParameters)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=GameplayAbilityTargetData_LocationInfo)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=GameplayAbilityTargetData_ActorArray)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=GameplayAbilityTargetData_SingleTargetHit)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=LyraGameplayAbilityTargetData_SingleTargetHit)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=NetLevelVisibilityTransactionId)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=Vector2D)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token constant">+SupportsStructNetSerializerList</span><span class="token attr-value"><span class="token punctuation">=</span>(StructName=GameplayDebuggerNetPack)</span></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/** Metadata about a gameplay cue execution */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">USTRUCT</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>HasNativeBreak <span class="token operator">=</span> <span class="token string">"/Script/GameplayAbilities.AbilitySystemBlueprintLibrary.BreakGameplayCueParameters"</span><span class="token punctuation">,</span> HasNativeMake <span class="token operator">=</span> <span class="token string">"/Script/GameplayAbilities.AbilitySystemBlueprintLibrary.MakeGameplayCueParameters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">GAMEPLAYABILITIES_API</span> FGameplayCueParameters</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/** Optimized serializer */</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">bool</span> <span class="token function">NetSerialize</span><span class="token punctuation">(</span>FArchive<span class="token operator">&amp;</span> Ar<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UPackageMap</span><span class="token operator">*</span> Map<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> bOutSuccess<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">//...</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="fpropertyreplicationstatedescriptorbuilder-freplicationstatedescriptorbuilder"><a class="anchor" href="#fpropertyreplicationstatedescriptorbuilder-freplicationstatedescriptorbuilder">#</a> FPropertyReplicationStateDescriptorBuilder &amp;&amp; FReplicationStateDescriptorBuilder</h2><p><code>FPropertyReplicationStateDescriptorBuilder</code>  用来生成对象的  <code>FPropertyReplicationStateDescriptorBuilder</code> 。生成过程中会把 UClass 内的成员分为四类：</p><ul><li><p><strong>FunctionsPropertyReplicationStateBuilde</strong>：RPC Function。</p></li><li><p><strong>InitPropertyReplicationStateBuilder</strong>：只用于 Init 的成员属性。</p></li><li><p><strong>LifetimeConditionalsReplicationStateBuilder</strong>：有特定的生命周期同步条件的成员属性。</p></li><li><p><strong>RegularPropertyReplicationStateBuilder</strong>：常规属性，既可以在对象初始化的时候同步，也可以在生命周期的各个阶段同步。</p></li></ul><p>每类成员会通过单独的  <code>FPropertyReplicationStateDescriptorBuilder</code>  生成对应的  <code>FReplicationStateDescriptor</code> 。 <code>FReplicationStateDescriptor</code>  大致结构如下：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306113802555.png" alt="image-20240306113802555" /></p><p>可能为了提高寻址效率吧， <code>FPropertyReplicationStateDescriptorBuilder</code>  在创建  <code>FReplicationStateDescriptor</code>  的时候，会把指针内的对象和  <code>FReplicationStateDescriptor</code>  本身分配在一块连续的内存中，在接下里要介绍的结构中也有广泛运用。</p><h3 id="lifetimeconditionalsreplicationstate"><a class="anchor" href="#lifetimeconditionalsreplicationstate">#</a> LifetimeConditionalsReplicationState</h3><p>对象中需要参与同步的属性，需要提前在对象中声明其所需的同步周期：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>FLifetimeProperty<span class="token operator">></span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr></table></figure><p>并且指明哪些属性的同步规则，Unreal 提供了很多的宏用来干这些事情：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DOREPLIFETIME_WITH_PARAMS</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>v<span class="token punctuation">,</span>params<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token expression">FProperty<span class="token operator">*</span> ReplicatedProperty <span class="token operator">=</span> <span class="token function">GetReplicatedProperty</span><span class="token punctuation">(</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">GET_MEMBER_NAME_CHECKED</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token expression"><span class="token function">RegisterReplicatedLifetimeProperty</span><span class="token punctuation">(</span>ReplicatedProperty<span class="token punctuation">,</span> OutLifetimeProps<span class="token punctuation">,</span> FixupParams<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>c<span class="token operator">::</span>v<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token function">DOREPLIFETIME_WITH_PARAMS</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">FDoRepLifetimeParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DOREPLIFETIME_CONDITION</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>v<span class="token punctuation">,</span>cond<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token expression"><span class="token keyword">static_assert</span><span class="token punctuation">(</span>cond <span class="token operator">!=</span> COND_NetGroup<span class="token punctuation">,</span> </span><span class="token string">"COND_NetGroup cannot be used on replicated properties. Only when registering subobjects"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token expression">FDoRepLifetimeParams LocalDoRepParams<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token expression">LocalDoRepParams<span class="token punctuation">.</span>Condition <span class="token operator">=</span> cond<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token expression"><span class="token function">DOREPLIFETIME_WITH_PARAMS</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>v<span class="token punctuation">,</span>LocalDoRepParams<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DOREPLIFETIME_WITH_PARAMS_FAST</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>v<span class="token punctuation">,</span>params<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> bIsValid_</span><span class="token punctuation">##</span><span class="token expression">c_</span><span class="token punctuation">##</span><span class="token expression">v <span class="token operator">=</span> <span class="token function">ValidateReplicatedClassInheritance</span><span class="token punctuation">(</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>#v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token expression"><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> DoRepPropertyName_</span><span class="token punctuation">##</span><span class="token expression">c_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">v</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span>#v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token expression"><span class="token keyword">const</span> NetworkingPrivate<span class="token operator">::</span>FRepPropertyDescriptor PropertyDescriptor_</span><span class="token punctuation">##</span><span class="token expression">c_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">v</span><span class="token punctuation">(</span>DoRepPropertyName_</span><span class="token punctuation">##</span><span class="token expression">c_</span><span class="token punctuation">##</span><span class="token expression">v<span class="token punctuation">,</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span>c<span class="token operator">::</span>ENetFields_Private<span class="token operator">::</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token expression"><span class="token function">RegisterReplicatedLifetimeProperty</span><span class="token punctuation">(</span>PropertyDescriptor_</span><span class="token punctuation">##</span><span class="token expression">c_</span><span class="token punctuation">##</span><span class="token expression">v<span class="token punctuation">,</span> OutLifetimeProps<span class="token punctuation">,</span> FixupParams<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>c<span class="token operator">::</span>v<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span></span></span></pre></td></tr></table></figure><p>定义好之后，提取出来大概长这个样子：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306195715818.png" alt="image-20240306195715818" /></p><p><code>FMemberProperty</code>  用于描述某个 UClass 中成员的基本信息，也就是每个 Property 的相关信息：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> FProperty<span class="token operator">*</span> Property<span class="token punctuation">;</span><span class="token comment">//property 本身</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> UFunction<span class="token operator">*</span> PropertyRepNotifyFunction<span class="token punctuation">;</span><span class="token comment">// 触发属性复制时的回调函数</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> FPropertyNetSerializerInfo<span class="token operator">*</span> SerializerInfo<span class="token punctuation">;</span><span class="token comment">//property 数据加工器</span></pre></td></tr><tr><td data-num="4"></td><td><pre>CreateAndRegisterReplicationFragmentFunc CreateAndRegisterReplicationFragmentFunction<span class="token punctuation">;</span> <span class="token comment">// 创建 Fragement 函数（FPropertyNetSerializerInfo）</span></pre></td></tr><tr><td data-num="5"></td><td><pre>EMemberPropertyTraits Traits<span class="token punctuation">;</span><span class="token comment">// Traits property</span></pre></td></tr><tr><td data-num="6"></td><td><pre>ELifetimeCondition ReplicationCondition<span class="token punctuation">;</span><span class="token comment">// 同步生命周期条件</span></pre></td></tr><tr><td data-num="7"></td><td><pre>uint16 ChangeMaskBits<span class="token punctuation">;</span><span class="token comment">// 记录成员内部的脏标记</span></pre></td></tr><tr><td data-num="8"></td><td><pre>FMemoryLayoutUtil<span class="token operator">::</span>FSizeAndAlignment ExternalSizeAndAlignment<span class="token punctuation">;</span><span class="token comment">// 访问结构化对象时所需的内存偏移</span></pre></td></tr></table></figure><p><code>FReplicationStateDescriptorBuilder</code>  职责其实是把 UClass 内的 MetaData 提取出来，归类之后存储在  <code>FPropertyReplicationStateDescriptorBuilder</code>  的 FMemberProperty 和 FMemberFunction 中。然后调用  <code>FPropertyReplicationStateDescriptorBuilder</code>  的 Build 函数获取创建好的  <code>FReplicationStateDescriptor</code> 。</p><p>常用函数：</p><ul><li><code>FReplicationStateDescriptorBuilder::CreateDescriptorsForClass</code></li><li><code>FReplicationStateDescriptorBuilder::CreateDescriptorForStruct</code></li><li><code>FReplicationStateDescriptorBuilder::CreateDescriptorForFunction</code></li></ul><p>转换流程：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306141502363.png" alt="image-20240306141502363" /></p><h2 id="freplicationstatedescriptor-fpropertyreplicationstate"><a class="anchor" href="#freplicationstatedescriptor-fpropertyreplicationstate">#</a> FReplicationStateDescriptor &amp;&amp; FPropertyReplicationState</h2><p><code>FReplicationStateDescriptor</code>  用来描述一组成员的 MetaData，可以通过  <code>FReplicationStateDescriptor</code>  对对象属性进行偏移寻址、序列化反序列化等操作。是所有对象打解包的重要依仗，并且  <code>FReplicationStateDescriptor</code>  本身是根据类型绑定的，一个 UClass 可以关联多个存储了不同 MemberDescriptor 的  <code>FReplicationStateDescriptor</code> ，但是这个 UClass 所对应的 UObject 都可以通过这几个  <code>FReplicationStateDescriptor</code>  进行描述和访问。</p><p><code>FPropertyReplicationState</code>  是  <code>FReplicationStateDescriptor</code>  的「实例化」。按照  <code>FReplicationStateDescriptor</code>  描述的规则构建出的网络层面的对象，其主要负责对 UObject 上的属性值做临时性的存储。</p><h2 id="freplicationfragment"><a class="anchor" href="#freplicationfragment">#</a> FReplicationFragment</h2><p><code>FReplicationFragment</code>  是比  <code>FPropertyReplicationState</code>  更上一层级的抽象。负责关联  <code>FReplicationStateDescriptor</code>  和  <code>FPropertyReplicationState</code> ，并在此基础上关联 UObject 的实例，这样就可以通过 Fragment 快速对 UObject 进行各项操作。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306170813210.png" alt="image-20240306170813210" /></p><p>这里以用的最多的 <strong>FPropertyReplicationFragment</strong> 展开一下：</p><ul><li>通过  <code>FPropertyReplicationFragment</code>  把网络数据回写 UObject 实例：通过 <strong>FReplicationReader</strong> 读取网络中收到的数据包，交由  <code>FPropertyReplicationState::PushPropertyReplicationState</code>  把数据回写入 UObject 实例，然后把旧的 UObject 数据存储在 PrevReplicationState 中。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306163909949.png" alt="image-20240306163909949" /></p><ul><li>通过  <code>FPropertyReplicationFragment</code>  把 UObject 实例中的脏数据提取：通过  <code>FPropertyReplicationFragment::PollReplicatedState</code>  再每帧开始同步前，根据脏标记从 UObject 实例上获取最新的脏数据，并且存储在 SrcReplicationState，后面再根据优先级序列化到 SendStateBuffer 中。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306171221158.png" alt="image-20240306171221158" /></p><h2 id="freplicationinstanceprotocol-freplicationprotocol"><a class="anchor" href="#freplicationinstanceprotocol-freplicationprotocol">#</a> FReplicationInstanceProtocol &amp;&amp;  FReplicationProtocol</h2><p><code>FReplicationInstanceProtocol </code> 结构图（简单以  <code>FPropertyReplicationFragment</code>  举例）：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306172120538.png" alt="image-20240306172120538" /></p><p><code>FReplicationProtocol</code>  结构图（简单以  <code>FPropertyReplicationFragment</code>  举例）：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306192928846.png" alt="image-20240306192928846" /></p><p>两者是基于  <code>FPropertyReplicationFragment</code>  更上层级的抽象，并且也是对外暴露的最开放的结构。</p><ul><li><code>FReplicationProtocol</code>  更倾向于存储配置或者规则性质的内容。</li><li><code>FReplicationInstanceProtocol</code>  则更多的存储和 Instance 有关的 State 信息。</li></ul><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>首先，除开 NetSerializerInfo 是在 Module 启动的时候就完成了所有类型的注册。其余的内容包括： Protocol、Fragment、ReplicationStateDescriptor、ReplicationState 都是在当有对象触发同步的时候以懒加载的方式创建并注册的。我们也可以简单整理出上述结构的关系图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306204200358.png" alt="image-20240306204200358" /></p><ul><li><strong>FPropertyNetSerializerInfoRegistry</strong> 管理所有的 <strong>FPropertyNetSerializerInfo</strong> 进而管理所有的 <strong>FNetSerializer</strong>。它们在 IrisModule 启动的时候就被完全初始化好，以供后面的系统使用。</li><li><strong>FReplicationStateDescriptorRegistry</strong> 管理所有的 <strong>FReplicationStateDescriptor</strong>。</li><li><strong>FReplicationStateDescriptor</strong> 由存储若干个 <strong>FReplicationStateMemberSerializerDescriptor</strong>。并且保存了对应于 UClass 中 FProperty 的引用。</li><li><strong>FReplicationStateMemberSerializerDescriptor</strong> 关联该 FProperty 的 <strong>FNetSerializer</strong> 用来处理打解包等序列化操作。</li><li><strong>FReplicationProtocol</strong> 存储了 UClass 的全部描述信息（若干个<strong> FReplicationStateDescriptor</strong>）</li><li><strong>FPropertyReplicationState</strong> 保存若干个 FProperty 的描述（<strong>FReplicationStateDescriptor</strong>）和对应的数据（StateBuffer）。</li><li><strong>FPropertyReplicationFragment</strong> 再次基础上关联了某个 UObject 实例，并实现了 StateBuffer &lt;-&gt; UObject 实例数据交换的逻辑。</li><li><strong>FReplicationInstanceProtocol</strong> 管理多个  <code>FPropertyReplicationFragment</code> ，也就是一个完整 UObject 实例的全部数据的定义和存储。</li><li><strong>FReplicationProtocolManager</strong> 负责缓存所有已经创建的 <strong>FReplicationProtocol</strong> 避免重复调用构造函数。</li></ul><p>除去 <strong>FNetSerializer</strong> 以外，其他结构的创建都从对象的 <strong>BeginReplication</strong> 开始：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306205219395.png" alt="image-20240306205219395" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240306205318111.png" alt="image-20240306205318111" /></p><p>整个 Replication System 其实是完全解耦于 Gameplay 的，不依赖 Gameplay 通过事件推送获取对象脏信息，而是通过 Poll 的轮询方式定期进行检查。数据的交互通过 ReplicationState 完成，除此以外其他任何模块都有内部独立的索引，引用关系等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info 文章代码来源于 Unreal 5.2 版本&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-iris二replicationstate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-iris二replications</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="Iris" scheme="https://hakuya.me/tags/Iris/"/>
    
    <category term="ReplicationState" scheme="https://hakuya.me/tags/ReplicationState/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Iris（一）概述</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20Iris%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/</id>
    <published>2024-03-10T12:54:01.000Z</published>
    <updated>2024-03-11T04:01:12.622Z</updated>
    
    <content type="html"><![CDATA[<div class="note info 文章代码来源于 Unreal 5.2 版本"></div><h1 id="unreal-iris一概述"><a class="anchor" href="#unreal-iris一概述">#</a> Unreal Iris（一）概述</h1><p>Iris Replication System 中对于对象关系的组织形式比较晦涩，为了尽可能的节省内存开销，大量使用了 BitArray 以及各种 Bit 运算提效，因此如果对于整个 Iris Replication System 中各个数据之间的关联关系没有大致认知的情况下，很容易迷失在错综复杂的关系网中。本节主要针对 Iris 中比较常见的数据源做个整体性的宏观的梳理。</p><h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><h3 id="fnetrefhandle-fnethandle"><a class="anchor" href="#fnetrefhandle-fnethandle">#</a> FNetRefHandle &amp;&amp; FNetHandle</h3><p>FNetRefHandle 是一个对象在网络同步中的唯一标识，客户端和服务器保持一致且全局唯一。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307101801472.png" alt="image-20240307101801472" /></p><p>FNetHandle 用于表示一个对象是全局唯一的，可以视为 UUID</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307105322488.png" alt="image-20240307105322488" /></p><h3 id="objectinternalindex-connectionid"><a class="anchor" href="#objectinternalindex-connectionid">#</a> ObjectInternalIndex &amp;&amp; ConnectionID</h3><p>ObjectInternalIndex 是用来描述一个 UObject 在数组中的下标，通常一个 UObject 创建之后就会加入到 <strong>FUObjectArray</strong> 中，并分配其一个唯一的 <strong>ObjectInternalIndex</strong>。Iris Replication System 为了更好的枝剪这部分内容，会在内部维护多个新的 UObject 数值映射：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307113116806.png" alt="image-20240307113116806" /></p><p>不论是在多 World 还是多 NetDriver 的情况下，都会出现多个 <strong>FNetRefHandleManager</strong>，每个 FNetRefHandleManager 有着自己的映射表，每个 UObject 会在不同的 FNetRefHandleManager 得到一个新的 <strong>ObjectInternalIndex</strong>。虽然两者都叫 <strong>ObjectInternalIndex</strong>，但从这里往后，我们所提到的 <strong>ObjectInternalIndex</strong> 都是 <strong>FNetRefHandleManager</strong> 内部的下标。</p><blockquote><p><strong>ObjectInternalIndex</strong> 在 <strong>FNetRefHandleManager</strong> 内是唯一的。</p></blockquote><p><strong>ConnectionID</strong> 也是用来标识一个 Connection 的下标，从 <strong>FReplicationConnections</strong> 中可以直接通过 ConnectionID 访问对应的连接。</p><blockquote><p><strong>ConnectionID</strong> 在 <strong>FReplicationConnections</strong> 内是唯一的。</p></blockquote><h2 id="fnetrefhandlemanager"><a class="anchor" href="#fnetrefhandlemanager">#</a> <strong>FNetRefHandleManager</strong></h2><p><strong>FReplicationSystemInternal</strong> 中有非常多的管理器，其中和 UObject 数据打交道最多，也是最常见的应当是 FNetRefHandleManager。而且 FNetRefHandleManager 对于 BitArray 的使用也非常多，整个存储的核心是在对象数量已知的情况下，通过 BitArray 尽可能压缩数据，虽然每次都需要分配最大数量上限的内存，但是对于 BitArray 来说无伤大雅（例如原本是一个 Int32 的索引，放在 BitArray 其实只需要 1 bit，压缩比 32: 1），而且 BitArray 还支持批处理，多个 BitArray 的与或操作也更高效。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240307154249294.png" alt="image-20240307154249294" /></p><p><strong>FNetRefHandleManager</strong> 本质工作是管理 NetObject 的内部数据，这些数据大致可分为以下几类：</p><ul><li>从外部系统到 ReplicationSystem 内部引用的关系映射： <code>RefHandleToInternalIndex</code>  &amp;&amp; <code>NetHandleToInternalIndex</code></li><li>NetObject 对象分配状态：AssignedInternalIndices</li><li>NetObject 对象当前帧和上一帧的有效性： <code>PrevFrameScopableInternalIndices</code>  &amp;&amp;  <code>ScopableInternalIndices</code>  通过对比很容易获取新增和删除的对象。</li><li>NetObject 对象之间的依赖关系，目前已经支持的依赖种类有两大类：<ul><li>SubObject 父子关系：子对象通常是组件或其他附加到主对象的实例。子对象在场景中并不是独立的实体，而是依附于主对象的一部分。通过将子对象添加到主对象的子对象列表中，可以确保它们在网络复制过程中一起被处理 —— <code>SubObjectInternalIndices</code> 。</li><li>Dependent 依赖关系：依赖者可以单独复制，也可以在父对象复制时复制。依赖的角色的过滤条件跟随被依赖方。不能保证两者的数据最终会在同一个数据包中，所以它是一种非常松散的依赖形式 —— <code>DependentObjectInternalIndices</code>  &amp;&amp;  <code>ObjectsWithDependentObjectsInternalIndices</code> 。</li></ul></li><li>NetObject 休眠和销毁状态： <code>DestroyedStartupObjectInternalIndices</code>  &amp;&amp;  <code>WantToBeDormantInternalIndices</code> 。</li><li>NetObject 的 FReplicatedObjectData。这里面的内容就很多了，包括对象的 Protocol，ProtocolInstance，ReceiveStateBuffer 等等。</li><li>NetObject 当前帧的脏数据缓存区  <code>ReplicatedObjectStateBuffers</code> 。</li></ul><p>当一个 UObject 需要被复制的时候，就需要先在 <strong>FNetRefHandleManager</strong> 为其分配对应的 NetRefHandle。然后初始化该对象的 Protocol，ProtocolInstance，ReceiveStateBuffer，SendStateBuffer 等等内容。</p><h3 id="依赖"><a class="anchor" href="#依赖">#</a> 依赖</h3><p>复制系统内的两大依赖关系都被存储在 <strong>FNetDependencyData</strong> 内，每个对象又通过 <strong>FNetDependencyData::FDependencyInfo</strong> 标识自己的关系网：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308120114607.png" alt="image-20240308120114607" /></p><ul><li><strong>FNetDependencyData::FDependencyInfo</strong>：里面有三个元素：<ul><li><strong>ArrayIndices</strong>：存储了三个下标，分别对应 SubObjectArray、ChildSubObjectArray、DependentObjectArray。<ul><li>SubObjectArray 存储了该对象的所有子对象，包括子对象的子对象。</li><li>ChildSubObjectArray 存储了该对象的子对象，只记录一层关系。</li><li>DependentObjectArray 存储了该对象被谁依赖。</li></ul></li><li><strong>SubObjectConditionalArrayIndex</strong> 对应于 SubObjectConditionalsStorage，用于存储所有 ChildSubObject 的同步条件。下标和 DependentObjectsStorage 中的 ChildSubObjectArray 一一对应。</li><li><strong>DependentObjectsInfoArrayIndex</strong> 对应于 DependentObjectInfosStorage，存储了该对象依赖了谁。</li></ul></li></ul><p>这些关系都需要在代码中显式的注册：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ensure</span><span class="token punctuation">(</span>ReplicatedOwner<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ReplicatedOwner<span class="token operator">-></span><span class="token function">IsUsingRegisteredSubObjectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ReplicatedOwner<span class="token operator">-></span><span class="token function">AddReplicatedSubObject</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// ReplicatedOwner->RemoveReplicatedSubObject(Widget);</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 对于非 Actor 类型的对象需要通过 RegisterReplicationFragments 建议依赖</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">ULyraEquipmentInstance</span><span class="token operator">::</span><span class="token function">RegisterReplicationFragments</span><span class="token punctuation">(</span>UE<span class="token operator">::</span>Net<span class="token operator">::</span>FFragmentRegistrationContext<span class="token operator">&amp;</span> Context<span class="token punctuation">,</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>EFragmentRegistrationFlags RegistrationFlags<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> UE<span class="token operator">::</span>Net<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">RegisterReplicationFragments</span><span class="token punctuation">(</span>Context<span class="token punctuation">,</span> RegistrationFlags<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Build descriptors and allocate PropertyReplicationFragments for this object</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token class-name">FReplicationFragmentUtil</span><span class="token operator">::</span><span class="token function">CreateAndRegisterFragmentsForObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Context<span class="token punctuation">,</span> RegistrationFlags<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>并且需要开启相关的配置选项：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[SystemSettings]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">net.SubObjects.DefaultUseSubObjectReplicationList</span><span class="token attr-value"><span class="token punctuation">=</span>1</span></pre></td></tr></table></figure><h3 id="引用"><a class="anchor" href="#引用">#</a> 引用</h3><p>实际上一个 NetObject 的数据里常常会引用到其他的 NetObject，这些引用指针在同步的时候也需要正确的理顺关系。例如谁引用的谁，哪些引用已经同步其他对象同步过了之类的信息，就不需要再重复打包，并且还有些引用关系可以是延后初始化的，例如对象 A 中引用了 B，但是 A 初始化好之后可以完全不依赖 B 是否可用，这些复杂的关系结构最终会体现在收发数据阶段。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308155547062.png" alt="image-20240308155547062" /></p><h3 id="附件"><a class="anchor" href="#附件">#</a> 附件</h3><p>Attachment 是网络同步中的一种独特关系，可以简单理解为和发送对象有关的数据，例如 RPC 调用的数据包。这部分数据会存储在一个发送队列中，在 Tick 流程内分两部分行发送：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308160730648.png" alt="image-20240308160730648" /></p><p>其中 Out 步骤发送的是当帧失效对象的 Attachment，即会关闭该对象的通信，可能是对象销毁亦或是休眠、擦除等情况。之所以放前面是因为 UpdateFiltering 步骤会执行 FReplicationWriter::UpdateScope，直接修改 Writer 中的数据，后续就没办法得到 OutScope 的内容了。</p><p>而 In 步骤则是发送新增或者还在作用域内的对象的 Attachment 信息。注意这里发送实际上都是写入到 FReplicationWriter，并不会立刻发送出去。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240308161851026.png" alt="image-20240308161851026" /></p><p>每个 <strong>FNetObjectAttachment</strong> 都有对应的 <strong>FReplicationStateDescriptor</strong> 用来描述数据的结构和类型，<strong>FNetBlobCreationInfo</strong> 可以用于确定消息的类型方便接收方识别需要执行不同的函数，因此再调用 Rpc 的时候会创建对应的 <strong>FNetBlobCreationInfo</strong>，不过这些内容引擎底层都封装好了，开发者是不需要关注的。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>TRefCountPtr<span class="token operator">&lt;</span>UE<span class="token operator">::</span>Net<span class="token operator">::</span>Private<span class="token operator">::</span>FNetRPC<span class="token operator">></span> <span class="token class-name">UNetRPCHandler</span><span class="token operator">::</span><span class="token function">CreateRPC</span><span class="token punctuation">(</span><span class="token keyword">const</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>FNetObjectReference<span class="token operator">&amp;</span> ObjectReference<span class="token punctuation">,</span> <span class="token keyword">const</span> UFunction<span class="token operator">*</span> Function<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> Parameters<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>FNetBlobCreationInfo CreationInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>CreationInfo<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token function">GetNetBlobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>CreationInfo<span class="token punctuation">.</span>Flags <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Function<span class="token operator">-></span>FunctionFlags <span class="token operator">&amp;</span> FUNC_NetReliable<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>ENetBlobFlags<span class="token operator">::</span>Reliable <span class="token operator">:</span> UE<span class="token operator">::</span>Net<span class="token operator">::</span>ENetBlobFlags<span class="token operator">::</span>None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>FNetRPC<span class="token operator">*</span> RPC <span class="token operator">=</span> <span class="token class-name">FNetRPC</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span>ReplicationSystem<span class="token punctuation">,</span> CreationInfo<span class="token punctuation">,</span> ObjectReference<span class="token punctuation">,</span> Function<span class="token punctuation">,</span> Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">return</span> RPC<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>RPC<span class="token operator">-></span><span class="token function">SetNetObjectReference</span><span class="token punctuation">(</span>OwnerReference<span class="token punctuation">,</span> OwnerOrSubObjectReference<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>AttachmentSendQueue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>OwnerIndex<span class="token punctuation">,</span> SubObjectIndex<span class="token punctuation">,</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> TRefCountPtr<span class="token operator">&lt;</span>FNetObjectAttachment<span class="token operator">></span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>RPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="freplicationconnections"><a class="anchor" href="#freplicationconnections">#</a> <strong>FReplicationConnections</strong></h2><p>如果说 <strong>FNetRefHandleManager</strong> 是负责管所有对象的，而 <strong>FReplicationConnections</strong> 则是管所有连接的。里面存储了当前 ReplicationSystem 中全部连接的状态，虽然 <strong>FReplicationConnections</strong> 本身并不复杂，但是 <strong>FReplicationConnection</strong> 却有很多值得探讨的地方：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FReplicationConnection</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>FWeakObjectPtr ReplicationDataStream<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>FReplicationWriter<span class="token operator">*</span> ReplicationWriter <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>FReplicationReader<span class="token operator">*</span> ReplicationReader <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>FObjectPtr UserData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li><code>ReplicationDataStream</code> ：用来自定义数据复制的规范，具体实现可以参考  <code>UReplicationDataStream</code></li><li><code>FReplicationWriter</code> ：负责加工同步数据并传递给网络层进行数据包发送的中间层，这个类的功能特别强大，举几个比较 NP 的功能：<ul><li>存储每个同步对象的生命周期状态。</li><li>Attachment 附件的处理，包括对象的 RPC 之类的。</li><li>处理对象打包，序列化，依赖关系，BaseLine 生成。</li><li>存储对象的同步优先级。</li></ul></li><li><code>FReplicationReader</code> ：功能也不少：<ul><li>自动编排对象间的引用依赖和前后置关系，在收到某些依赖数据后完善后置对象的引用信息。</li><li>对象网络数据的暂存器。</li></ul></li></ul><p>每个 Connection 通过 ReplicationWriter 进行数据的写入和发送，里面会基于 Record 创建和更新 BaseLine，并基于 BaseLine 和当前状态的差值做增量同步，处在同步中（未 ACK）的信息会通过 Record 记录缓存起来。发送对象数据的时候还会考虑对象的父子关系，对象携带的 Attachment 信息，Dependent 依赖。然后通过 FReplicationReader 把收到的网络包读取并暂存，然后在合适的时机回写到对象里，并处理相关依赖关系。在 DataStream 章节会对这部分内容在做详细的展开，这里有个基本的认知即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info 文章代码来源于 Unreal 5.2 版本&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-iris一概述&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-iris一概述&quot;&gt;#&lt;/a&gt; Unreal Iris（一）概述</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="Iris" scheme="https://hakuya.me/tags/Iris/"/>
    
  </entry>
  
  <entry>
    <title>2023年报</title>
    <link href="https://hakuya.me/annals/2023%E5%B9%B4%E6%8A%A5/"/>
    <id>https://hakuya.me/annals/2023%E5%B9%B4%E6%8A%A5/</id>
    <published>2024-01-13T09:21:00.000Z</published>
    <updated>2024-04-01T03:31:54.031Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>年度总结系列开新坑，之前发在 QQ 空间多少有点社死，只能被迫偷偷放在 blog 下面，嘿嘿嘿～</p></div><h1 id="2023年报"><a class="anchor" href="#2023年报">#</a> 2023 年报</h1><p>2023 年报总算来了。最近发生了太多事情，以至于到现在还没能完全梳理好心情迎接下一年。但这事也不能再拖了，不然就真没什么时间思考来年和总结今年了。</p><h2 id="焦虑的阴霾笼罩着忙碌的外表"><a class="anchor" href="#焦虑的阴霾笼罩着忙碌的外表">#</a> 焦虑的阴霾笼罩着忙碌的外表</h2><p>这便是我此刻的心情，也同样是今年后半段的主旋律。经历了一年的努力，工作也总算是有所建树，得到了老板和不少同事的认可。可项目组总体情况却让人堪忧：一方面来源于两次全球规模测试的数据平平，不论是日活、留存、还是流水方面都很难看，以至于项目好几次推倒重来，不断的调整方向，但效果却非常不理想，GM 倒是不以为意，把重心投入到了另一款项目。眼看着和育碧协定的上线日期渐渐临近，所有人都一边期盼着奇迹来临，一边迎接着死亡宣判。这并不是什么坏事，于其半死不活苟延残喘，倒不如死来的痛快些。但正所谓：&quot;福无双至，祸不单行&quot;，另一件倒霉事又接踵而至；在拿到版号的头一个星期，<strong>制作人卸职</strong>，GM 降级，隔壁项目组的 GM 忽然间成为了顶头上司。尽管 HR 和 GM 都在尽力安抚大家，但是不久后兄弟项目原地解散一事又给了所有人一记重锤，谁也不知道下一个会不会是自己，只能不断地告诉自己，我们有版号，怎么着也得上线了再说。然后紧接着的就是大洗牌：关卡组长空降；客户端 Leader 离职，TA 组长临时顶替；空降主策，原主策降级为叙事组长；运营 Leader 再添一人，原 Leader 协同参与；客户端 Leader 空降；<strong>GM 宣布离职</strong>。短短一个月不到，上层已经换了个干净，好在服务器这边还算稳定。本以为可以缓口气安心工作，下一波调整接踵而至。项目优先级下调，新 GM 以项目停止，逼迫育碧放弃干涉开发进度，这几乎算终止了与育碧的合作，同时暂停全球上线计划，国内上线时间延后<strong>一年</strong>，抽调人员<strong>两成</strong>到其所管理的其他项目进行支援。服务器 Leader 还是希望重心放在本项目，派遣了部分边缘人员进行协助，而客户端和策划方面则选择民主，听取个人意愿。离开的人很多都是能力强，但是不看好项目的。良禽择木而栖倒也能理解，但能够遇见项目现在已经支离破碎了，劣币驱逐良币，未来的路又会如何，谁也说不清楚......</p><h2 id="忙碌的外表和充实的内心"><a class="anchor" href="#忙碌的外表和充实的内心">#</a> 忙碌的外表和充实的内心</h2><p>说起来今年最忙的是工作，最不忙的也是工作。相比于去年满满当当的日程，做不完的需求，排到下个季度的工单；今年虽然也很忙，但却没有投身到堆积如山的需求中，反而在知识的海洋里充实的遨游。年初的协程预研和物理卡嵌修复得到了老板的认可，并且给予了我大量的时间去探索未知的领域，而不断耕耘 UE 和 PhysX 的我也开始有了用武之地。项目组先后成立了<strong>云上预研</strong>小组和<strong> UE 预研</strong>小组。我有幸和几个大佬一起，开始了 UE5.0 版本的探索工作，暂时远离了业务需求带来的纷扰，专心的开启了变强之路，这让我工作比平时更加热情，忙碌却不忙乱。没有第三方的压力，让我的工作进展更加有条理。渐渐的，我开始安排起每天的日程，作息更加的规律，也养成了健身等良好的习惯，摆脱了胃病的困扰，结识了项目组里其他管线的同学。我不再为工作疲于奔命，渐渐的有了生活，渐渐的把工作当作另一种形式的生活。这种状态真的很棒，让我拜托了偶尔对工作的厌倦，让我每天都觉得自己变得更好了。</p><h2 id="充实的内心鼓勇着躁动的灵魂"><a class="anchor" href="#充实的内心鼓勇着躁动的灵魂">#</a> 充实的内心鼓勇着躁动的灵魂</h2><p>也许是这份心情，让我也开始更多的接触她人。在这一年中，我有幸见证了无数个喜结连理的画面，也渐渐地开始思考爱情的本质。虽然接触了很多的异性，但依旧很迷茫。我曾经理想的爱情是两个人手牵着手，去看电影，去吹海风，去爬高山，去吃美食。但我发现这些都做过以后，我还是感觉不到爱情，我会为每次打开聊天窗口如何开启一段话题而苦恼，会思考如何回复消息而忧愁，会厌倦交流，因为这越来越像打卡，像我过去的工作，它不能带给双方任何的价值，这像是一种折磨。虽然偶尔也会很开心，但这实在是太短暂了，而且人也是会厌倦的，我不知道怎么让自己充满新意，怎么给别人带来不一样的惊喜，怎么把日常聊成一千零一夜的故事。我也不想将就，不想重复的日常变成永远的日常，不想互相挑剔看不对眼。别人总说，别把爱情想得太重，它不是你的全部。但我渐渐发现，当我拥有越来越多的时候，它成了我缺少的唯一，让我不得不重视但又无可奈何。我不想说我还年轻，还有时间，还可以选择，但我会尽可能成长，去寻找心中的答案。</p><h2 id="躁动的灵魂正在一点点升华"><a class="anchor" href="#躁动的灵魂正在一点点升华">#</a> 躁动的灵魂正在一点点升华</h2><p>罗列一下今年值得一提的成果吧：</p><ul><li>T8 晋级成功 &amp;&amp; 年底绩效 OutStanding &amp;&amp; T9 晋级中</li><li>预研成果：<ul><li>协程 demo。</li><li>Chaos Convert PhysX 工具完工，PhysX 序列化反序列化全解析。</li><li>Unreal ReplicationGraph &amp;&amp; RPC &amp;&amp; 登录握手流程。</li><li>PhysX 场景查询空间加速结构全解析，碰撞检测 &amp;&amp; GJK &amp;&amp; EPA 原理介绍。</li></ul></li><li>参与 Fate2.0 引擎开发：Tube（二阶贝塞尔曲线棒）SDF 函数实现及 Narrow_Phase 阶段测试。</li><li>胃病暂时根治 —— 幽门螺杆菌问题。</li><li>摘镜成功，不再戴眼镜喽，后续会持续更新进展（广州中山眼科 —— 吴君舒 + 全飞秒）：<ul><li>术前检查：角膜厚度 左 540 右 550，度数 左 400 + 100 散光，右边 400 + 25 散光，暗瞳 左 5.3 右 5.9</li><li>手术当天：略微眼干，视力模糊，未来一个月需要滴眼药水。</li><li>手术当二天：视力恢复，左 0.8 右 1.0，复查无异常，有明显眩光症状。</li><li>手术一周：视力不稳定，左 0.8 右 0.8，眼干 + 眩光，医生说三个月后可能缓解。</li><li>...</li></ul></li></ul><p>再说说对未来一年的计划吧，我这人不太能做长线规划，一直信奉车到山前必有路，所以姑且拟定一下一年后的发展规划：</p><ul><li>项目组出现人员抽调，大概率会有新业务接手，需要尽可能熟悉并且降低耗时，把经历放在预研上。</li><li>预研规划：<ul><li>Iris Replication System。</li><li>Unreal AI 逻辑</li><li>Chaos 物理引擎</li></ul></li><li>日本游，暂定国庆。</li><li>PlanB 项目要是提前解散或者我被调走的情况：<ul><li>跳槽首选 米、鹰角、网易（最近风评太差咯）、莉莉丝。</li><li>换组的话，考虑要不要转客户端。</li></ul></li><li>健身的体脂率最好能掉到 15%。</li><li>其他的就随缘了～</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;年度总结系列开新坑，之前发在 QQ 空间多少有点社死，只能被迫偷偷放在 blog 下面，嘿嘿嘿～&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;2023年报&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023年报&quot;&gt;#&lt;/a</summary>
      
    
    
    
    <category term="年报" scheme="https://hakuya.me/categories/%E5%B9%B4%E6%8A%A5/"/>
    
    
    <category term="年报" scheme="https://hakuya.me/tags/%E5%B9%B4%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Chaos 导出为 PhysX 物理文件</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20Chaos%20%E5%AF%BC%E5%87%BA%E4%B8%BA%20PhysX%20%E7%89%A9%E7%90%86%E6%96%87%E4%BB%B6/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20Chaos%20%E5%AF%BC%E5%87%BA%E4%B8%BA%20PhysX%20%E7%89%A9%E7%90%86%E6%96%87%E4%BB%B6/</id>
    <published>2024-01-02T09:28:00.000Z</published>
    <updated>2024-01-09T09:21:22.420Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"></div><h1 id="unreal-chaos-导出为-physx-物理文件"><a class="anchor" href="#unreal-chaos-导出为-physx-物理文件">#</a> Unreal Chaos 导出为 PhysX 物理文件</h1><h1 id="概述"><a class="anchor" href="#概述">#</a> 概述</h1><p>随着 Unreal 5.0 的发布，PhysX 库也从 Unreal 的源代码中被移除。Unreal 自此不再支持 PhysX 库，转而使用自研的 Chaos。随之而来的问题是：项目如果升级到 Unreal 5.0+ 版本，就必须放弃 PhysX 库，对于客户端来说影响比较有限，毕竟 Unreal 官方提供了全套的解决方案。但对于不使用 DS 的服务器来说，如果需要用到物理场景的数据，就变得棘手了起来。</p><p>常规管线中，客户端一般会通过 PhysX 库自带的序列化接口，把场景中 AActor 绑定的物理对象加入到导出容器内，经由 PhysX 库完成导出相关的复杂工序。好在 PhysX 库的集成非常方便，很多服务器也会采用相同版本的 PhysX 作为物理库来使用，通过 PhysX 库的反序列化接口，即可轻松实现物理资源的<strong>互通</strong>。</p><p>回到正题，当客户端不再使用 PhysX 的情况下，服务器如何获取物理资源成了问题。目前 Unreal 官方没有提供教程来对二者进行转换，同时也没提供集成 Chaos 库的解决方案。因此，才有了本文中提到的工具 ——Chaos 物理导出工具。</p><blockquote><p>本文所讨论的转换版本：Unreal5.2、PhysX 3.4</p></blockquote><h2 id="physx-序列化结构梳理"><a class="anchor" href="#physx-序列化结构梳理">#</a> PhysX 序列化结构梳理</h2><p>要实现从 Chaos 到 PhysX 的转换，就得了解 PhysX 序列化的结构。下面会对 PhysX 序列化操作做详细的介绍：</p><h3 id="physx-序列化流程"><a class="anchor" href="#physx-序列化流程">#</a> PhysX 序列化流程</h3><p>PhysX 基本导出逻辑如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxFoundation<span class="token operator">*</span> gFoundation <span class="token operator">=</span> <span class="token function">PxCreateFoundation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>PxPhysics<span class="token operator">*</span> gPhysics <span class="token operator">=</span> <span class="token function">PxCreatePhysics</span><span class="token punctuation">(</span>PX_PHYSICS_VERSION<span class="token punctuation">,</span> <span class="token operator">*</span>gFoundation<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxSerializationRegistry<span class="token operator">*</span> sr <span class="token operator">=</span> <span class="token class-name">PxSerialization</span><span class="token operator">::</span><span class="token function">createSerializationRegistry</span><span class="token punctuation">(</span><span class="token operator">*</span>gPhysics<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PxCollection oCollection <span class="token operator">=</span> <span class="token function">PxCreateCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 【step.1】添加各种要导出的对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>oCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>PxBase<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 【step.2】补全依赖</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">PxSerialization</span><span class="token operator">::</span><span class="token function">complete</span><span class="token punctuation">(</span>oCollection<span class="token punctuation">,</span> sr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 【step.3】导出</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token class-name">PxSerialization</span><span class="token operator">::</span><span class="token function">serializeCollectionToBinary</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> oCollection<span class="token punctuation">,</span> <span class="token operator">*</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>业务层面需要收集应该导出的对象。通过 complete 函数完成对象依赖关系的补全。补全操作交由 PhysX 自动完成，下图是 PhysX 中常见的依赖链路，当导出 Actor 的时候，会连带导出 Shape 和 Material 来确保 Actor 数据的完整性。</p><p><img data-src="https://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/guide/_images/Serialization_Complete.png" alt="" /></p><blockquote><p>Figure 1: Left: Complete Collection, Right: Incomplete Collection</p></blockquote><p>正常情况下，导出的 Collection 必须是 Complete 的，但是也可以显示声明为 InComplete，此时就必须给出一个 ExternalCollection，来保证依赖对象可以在外部查找到，类似于 .so 形式的链接库。当一个对象被多个容器共用时，可以通过该方式减少导出次数。</p><h3 id="二进制文件结构"><a class="anchor" href="#二进制文件结构">#</a> 二进制文件结构</h3><p>Collection 在导出时，会按照固定的结构排列组织：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231227143846566.png" alt="image-20231227143846566" /></p><ul><li><strong>Header</strong>：头信息，包含 PhysX 版本平台信息等内容，用于反序列化校验。</li><li><strong>nbObjectsInCollection</strong>：Collection 内的对象数量。</li><li><strong>manifest nb</strong>：实际导出对象的数量。</li><li><strong>manifest data</strong>：导出对象的大小（偏移）+ 类型</li><li><strong>actor total offset</strong>：对象导出后占用的总空间大小，用于反序列化对象后，通过偏移查询 extra data，对应于 export data size。</li><li><strong>importReferences</strong> <strong>nb &amp;&amp; data</strong>：外部引用，表示该 Collection 引用了外部对象（ExternalCollection），记录引用关系，用于恢复对象的时候通过外部引用进行关系补全。</li><li><strong>exportReferences nb &amp;&amp; data</strong>：内部引用，导出内部对象的 ID 和对应的下标。提高内部引用恢复过程的寻址效率。</li><li><strong>internalPtr nb &amp;&amp; data</strong>：内部地址引用关系，把对象序列化前的地址数值作为唯一 ID 建立的引用映射。</li><li><strong>internalIdx nb &amp;&amp; data</strong>：内部编号引用关系，把对象序列化前持有的唯一编号作为 ID 建立的引用映射。</li><li><strong>export data &amp;&amp; export extra data</strong>：对象的实际数据，包含两个部分。<ul><li>export data 表示对象的基本信息，这部分数据大小是固定的。</li><li>extra data 追加信息。包含复杂几何的数据，这部分数据大小通常是可变的。</li></ul></li></ul><h2 id="chaos-对象到-physx"><a class="anchor" href="#chaos-对象到-physx">#</a> Chaos 对象到 PhysX</h2><p>接下来看看 Chaos 里面物理对象之间的关系图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231227153124586.png" alt="image-20231227153124586" /></p><p>通过上述内容，简单整理出两者之间的对应关系：</p><table><thead><tr><th>类型</th><th>PhysX</th><th>Chaos</th></tr></thead><tbody><tr><td>Static Actor</td><td>NpRigidStatic</td><td>FGeometryParticle</td></tr><tr><td>Dynamic Actor</td><td>NpRigidDynamic</td><td>FPBDRigidParticle</td></tr><tr><td>Shape</td><td>NpShape</td><td>FPerShapeData</td></tr><tr><td>TriangleMesh</td><td>PxTriangleMeshGeometryLL</td><td>FTriangleMeshImplicitObject</td></tr><tr><td>HeightField</td><td>PxHeightFieldGeometryLL</td><td>FHeightField</td></tr><tr><td>ConvexMesh</td><td>PxConvexMeshGeometryLL</td><td>FConvex</td></tr><tr><td>Box</td><td>PxBoxGeometry</td><td>TBox</td></tr><tr><td>Capsule</td><td>PxCapsuleGeometry</td><td>FCapsule</td></tr><tr><td>Sphere</td><td>PxSphereGeometry</td><td>TSphere</td></tr><tr><td>Plane</td><td>PxPlaneGeometry</td><td>FImplicitPlane3</td></tr><tr><td>Material</td><td>NpMaterial</td><td>FChaosPhysicsMaterial</td></tr></tbody></table><p>由于 Chaos 的几何相对更加丰富，因此可以很好的兼容导出类型。但是两边的物理体系不同，PhysX 是基于牛二定律的计算，而 Chaos 是基于位置动力学的，因此某些对象上的属性映射依旧存在差异，下面会对这些属性逐个讲解：</p><h3 id="material"><a class="anchor" href="#material">#</a> Material</h3><table><thead><tr><th>属性</th><th>NpMaterial</th><th>FChaosPhysicsMaterial</th><th>默认值</th></tr></thead><tbody><tr><td>内存分配类型</td><td>mBaseFlags</td><td></td><td>PxBaseFlagType::eOWNS_MEMORY</td></tr><tr><td>对象类型</td><td>mConcreteType</td><td></td><td>PxConcreteType::eMATERIAL</td></tr><tr><td>mMaterial 属性</td><td>--------------------------</td><td>--------------------------</td><td>--------------------------</td></tr><tr><td>动摩擦</td><td>dynamicFriction</td><td>FChaosPhysicsMaterial.Friction</td><td></td></tr><tr><td>材质标记</td><td>flags</td><td><mark><strong>无对应（有损）</strong></mark></td><td>0</td></tr><tr><td>摩擦组合模式</td><td>fricRestCombineMode</td><td>FChaosPhysicsMaterial.FrictionCombineMode</td><td></td></tr><tr><td>材质编号</td><td>mMaterialIndex</td><td><mark>动态生成，需要导出逻辑内实现，保证 IDX 唯一且小于 Uint32 即可</mark></td><td></td></tr><tr><td>指向自身的指针，历史遗留无意义</td><td>mNxMaterial</td><td></td><td>nullptr</td></tr><tr><td>填充对齐，无意义</td><td>padding</td><td></td><td>0</td></tr><tr><td>恢复系数</td><td>restitution</td><td>FChaosPhysicsMaterial.Restitution</td><td></td></tr><tr><td>静摩擦</td><td>staticFriction</td><td>FChaosPhysicsMaterial.StaticFriction</td><td></td></tr></tbody></table><ul><li>MaterialIndex，这个编号在 Chaos 中是不存在的概念，因此导出的时候需要自己伪造一个，要求是 UInt32 范围且唯一可以标识某个 Material。</li><li>flags 这个标记位 Chaos 中不存在对应，但是 Chaos 提供了其他方案来替代，因此这里是有损转换的。</li></ul><h3 id="geometry"><a class="anchor" href="#geometry">#</a> Geometry</h3><h4 id="heightfield"><a class="anchor" href="#heightfield">#</a> HeightField</h4><table><thead><tr><th>属性</th><th>PxHeightFieldGeometryLL</th><th>FHeightField</th><th>默认值</th></tr></thead><tbody><tr><td>行缩放</td><td>rowScale</td><td>FHeightField.GetScale().X</td><td></td></tr><tr><td>高度场数据</td><td>heightField</td><td>FHeightField</td><td></td></tr><tr><td>运行时高度场数据</td><td>heightFieldData</td><td><mark>运行中填充，不需要导出</mark></td><td>nullptr</td></tr><tr><td>网格标记</td><td>heightFieldFlags</td><td><mark>Chaos 中默认全是双面检测</mark></td><td>PxMeshGeometryFlag::eDOUBLE_SIDED</td></tr><tr><td>高度缩放</td><td>heightScale</td><td>FHeightField.GetScale().Z</td><td></td></tr><tr><td>引用材质</td><td>materials</td><td>FHeightField.GetMaterials()</td><td></td></tr><tr><td>几何类型</td><td>mType</td><td></td><td>PxGeometryType::eHEIGHTFIELD</td></tr><tr><td>纯填充无意义</td><td>paddingFromFlags</td><td></td><td></td></tr><tr><td>列缩放</td><td>columnScale</td><td>FHeightField.GetScale().Y</td><td></td></tr></tbody></table><h4 id="convexmesh"><a class="anchor" href="#convexmesh">#</a> ConvexMesh</h4><table><thead><tr><th>属性</th><th>PxConvexMeshGeometryLL</th><th>FConvex</th><th>默认值</th></tr></thead><tbody><tr><td>凸包数据</td><td>convexMesh</td><td>FConvex</td><td></td></tr><tr><td>几何类型</td><td>mType</td><td></td><td>PxGeometryType::eCONVEXMESH</td></tr><tr><td>gpu 兼容选项</td><td>gpuCompatible</td><td><mark>运行中填充，不需要导出</mark></td><td>false</td></tr><tr><td>凸包运行时数据</td><td>hullData</td><td><mark>运行中填充，不需要导出</mark></td><td>nullptr</td></tr><tr><td>凸包网格标记</td><td>meshFlags</td><td><mark>Chaos 中默认全是紧凑模式</mark></td><td>PxConvexMeshGeometryFlag::eTIGHT_BOUNDS</td></tr><tr><td>纯填充无意义</td><td>paddingFromFlags</td><td></td><td></td></tr><tr><td>几何缩放</td><td>scale.scale</td><td>FConvex.GetScale()</td><td></td></tr><tr><td>几何旋转</td><td>scale.rotation</td><td><mark>Chaos 中几何不存在单独的旋转</mark></td><td>PxIdentity</td></tr></tbody></table><h4 id="trianglemesh"><a class="anchor" href="#trianglemesh">#</a> TriangleMesh</h4><table><thead><tr><th>属性</th><th>PxTriangleMeshGeometryLL</th><th>FTriangleMeshImplicitObject</th><th>默认值</th></tr></thead><tbody><tr><td>运行时材质编号引用</td><td>materialIndices</td><td><mark>运行中填充，不需要导出</mark></td><td>nullptr</td></tr><tr><td>引用材质</td><td>materials</td><td>FTriangleMeshImplicitObject.GetMaterials()</td><td></td></tr><tr><td>三角网格运行时数据</td><td>meshData</td><td><mark>运行中填充，不需要导出</mark></td><td>nullptr</td></tr><tr><td>网格标记</td><td>meshFlags</td><td><mark>Chaos 中默认全是双面检测</mark></td><td>PxMeshGeometryFlag::eDOUBLE_SIDED</td></tr><tr><td>几何类型</td><td>mType</td><td></td><td>PxGeometryType::eTRIANGLEMESH</td></tr><tr><td>纯填充无意义</td><td>paddingFromFlags</td><td></td><td></td></tr><tr><td>几何缩放</td><td>scale.scale</td><td>FTriangleMeshImplicitObject.GetScale()</td><td></td></tr><tr><td>几何旋转</td><td>scale.rotation</td><td><mark>Chaos 中几何不存在单独的旋转</mark></td><td>PxIdentity</td></tr><tr><td>三角网格数据</td><td>triangleMesh</td><td>FTriangleMeshImplicitObject</td><td></td></tr></tbody></table><p>其他简单几何就不做介绍了。值得一提的是，由于 PhysX 对于复杂几何的反序列化也涉及到运行时数据，实时数据中有很大一部分是临时计算并存储在内存的，因此实现上非常麻烦，导出的结构也很复杂，这里简单贴一个 Convex 运行时数据的序列化内容：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231227172739798.png" alt="image-20231227172739798" /></p><p>这些内容恢复起来非常麻烦，Chaos 中的 ConvexMesh 很难与之对应，下面是 ConvexMesh 存储的数据：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>TArray<span class="token operator">&lt;</span>FPlaneType<span class="token operator">></span> Planes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>TArray<span class="token operator">&lt;</span>FVec3Type<span class="token operator">></span> Vertices<span class="token punctuation">;</span> <span class="token comment">//copy of the vertices that are just on the convex hull boundary</span></pre></td></tr><tr><td data-num="3"></td><td><pre>FAABB3Type LocalBoundingBox<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>FConvexStructureData StructureData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>FRealType Volume<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>FVec3Type CenterOfMass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>FVec3 UnitMassInertiaTensor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>FRotation3 RotationOfMass<span class="token punctuation">;</span></pre></td></tr></table></figure><p>因此这部分复杂几何的 ExtraData 后面会通过烘培方案进行恢复，这里暂时不做展开，后面再介绍。</p><h3 id="shape"><a class="anchor" href="#shape">#</a> Shape</h3><table><thead><tr><th>属性</th><th>NpShape</th><th>FPerShapeData</th><th>默认值</th></tr></thead><tbody><tr><td>基础属性</td><td>--------------------------</td><td>--------------------------</td><td>--------------------------</td></tr><tr><td>Actor 指针</td><td>mActor</td><td>FGeometryParticle<mark> 地址</mark></td><td></td></tr><tr><td>内存分配类型</td><td>mBaseFlags</td><td></td><td>PxBaseFlagType::eOWNS_MEMORY</td></tr><tr><td>对象类型</td><td>mConcreteType</td><td></td><td>PxConcreteType::eSHAPE</td></tr><tr><td>Shape 被引用数</td><td>mExclusiveAndActorCount</td><td><mark>Chaos 系统默认每个 Shape 都是被 Actor 独占的，引用计数为 EXCLUSIVE_MASK</mark></td><td>oShape.EXCLUSIVE_MASK</td></tr><tr><td>名称</td><td>mName</td><td><mark>默认不导出，因此这里也不赋值</mark></td><td>nullptr</td></tr><tr><td>用户数据</td><td>userData</td><td></td><td>nullptr</td></tr><tr><td>对象类型</td><td>mConcreteType</td><td><mark>Chaos 系统默认每个 Shape 都是被 Actor 独占的</mark></td><td>ScbType::Enum::eSHAPE_EXCLUSIVE</td></tr><tr><td>mShape 属性</td><td>--------------------------</td><td>--------------------------</td><td>--------------------------</td></tr><tr><td>导出 Stream 临时指针</td><td>mStreamPtr</td><td><mark>导出时临时赋值的变量，序列化不处理</mark></td><td>nullptr</td></tr><tr><td>所在场景</td><td>mScene</td><td><mark>反系列化后添加进入场景时赋值，序列化不处理</mark></td><td>nullptr</td></tr><tr><td>mShape.mShape 属性</td><td>--------------------------</td><td>--------------------------</td><td>--------------------------</td></tr><tr><td>场景查询时的过滤规则</td><td>mQueryFilterData</td><td>FPerShapeData.GetQueryData()</td><td></td></tr><tr><td>物理模拟时的过滤规则</td><td>mSimulationFilterData</td><td>FPerShapeData.GetSimData()</td><td></td></tr><tr><td>接触距离</td><td>mRestOffset</td><td><mark><strong>Chaos 中没有平替，暂时不设置初值，PX_MAX_F32 表示未初始化（有损）</strong></mark></td><td>PX_MAX_F32</td></tr><tr><td>oShape.mShape.mShape.mCore 属性</td><td>--------------------------</td><td>--------------------------</td><td>--------------------------</td></tr><tr><td>基于 Actor 的坐标位移</td><td>transform.p</td><td>FPerShapeData.GetLeafRelativeTransform().GetLocation()</td><td></td></tr><tr><td>基于 Actor 的坐标旋转</td><td>transform.q</td><td>FPerShapeData.GetLeafRelativeTransform().GetRotation()</td><td></td></tr><tr><td>接触偏移</td><td>contactOffset</td><td><mark><strong>Chaos 只能通过 Material 设置，Shape 没有（有损）</strong></mark></td><td>-1.0f</td></tr><tr><td>形状标志</td><td>mShapeFlags</td><td><mark><strong>Chaos 没有对应，暂时用默认值（有损）</strong></mark></td><td><code>PxShapeFlag::eSCENE_QUERY_SHAPE </code></td></tr><tr><td>材质编号</td><td>materialIndex</td><td>FPerShapeData.GetLeafGeometry().GetMaterials()</td><td></td></tr><tr><td>是否使用自身内存存储材质编号</td><td>mOwnsMaterialIdxMemory</td><td><mark>超过一个材质就需要 alloc 分配额外内存，否则用自己的内存</mark></td><td></td></tr><tr><td>几何数据</td><td>geometry</td><td>FPerShapeData.GetLeafGeometry()</td><td></td></tr></tbody></table><ul><li>mRestOffset &amp;&amp; contactOffset 在 Chaos 中统一采用 Material 的 SkinWidth 表示，但是也不能完美映射，因为 Shape 可能存在多个 Material，因此这里暂时不做转换。</li><li>mShapeFlags 的标记也没有 Chaos 的对应，虽然可以通过 Shape 本身的类型在做细分，但感觉用 PxShapeFlag::eSCENE_QUERY_SHAPE 已经够用了，服务器一般情况下不需要做 Simulate 模拟。Trigger 的话可以视情况加上。</li><li>FPerShapeData.GetLeafGeometry () 内部涉及到缩放和边距，需要进一步解析处理，并转换为 PhysX 的几何数据。</li></ul><h3 id="static-actor"><a class="anchor" href="#static-actor">#</a> Static Actor</h3><table><thead><tr><th>属性</th><th>NpRigidStatic</th><th>FGeometryParticle</th><th>默认值</th></tr></thead><tbody><tr><td>基础属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>内存分配类型</td><td>mBaseFlags</td><td></td><td>PxBaseFlagType::eOWNS_MEMORY</td></tr><tr><td>对象类型</td><td>mConcreteType</td><td></td><td>PxConcreteType::eRIGID_STATIC</td></tr><tr><td>连接器数组</td><td>mConnectorArray</td><td><mark>服务器暂时不需要这类约束关系，因此不导出</mark></td><td>nullptr</td></tr><tr><td>场景内的下标</td><td>mIndex</td><td><mark>反序列化加入场景后重新赋值，导出为默认值</mark></td><td>0xFFFFFFFF</td></tr><tr><td>名称</td><td>mName</td><td><mark>默认不导出，因此这里也不赋值</mark></td><td>nullptr</td></tr><tr><td>用户数据</td><td>userData</td><td></td><td>nullptr</td></tr><tr><td>mRigidStatic 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>所在场景</td><td>mScene</td><td><mark>反系列化后添加进入场景时赋值，序列化不处理</mark></td><td>nullptr</td></tr><tr><td>物理对象类型</td><td>mControlState</td><td></td><td>ScbType::Enum::eRIGID_STATIC</td></tr><tr><td>导出 Stream 临时指针</td><td>mStreamPtr</td><td><mark>导出时临时赋值的变量，序列化不处理</mark></td><td>nullptr</td></tr><tr><td>mRigidStatic.mStatic 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>Actor 标志</td><td>mActorFlags</td><td><mark>反序列化会重置，导出无意义</mark></td><td>0</td></tr><tr><td>Actor 类型</td><td>mActorType</td><td></td><td>PxActorType::eRIGID_STATIC</td></tr><tr><td>聚合 ID</td><td>mAggregateIDOwnerClient</td><td><mark><strong>服务器不处理聚合物导出（有损）</strong></mark></td><td>0</td></tr><tr><td>行为标记</td><td>mClientBehaviorFlags</td><td><mark>PhysX3.4 已弃用，导出无意义</mark></td><td>0</td></tr><tr><td>优势组</td><td>mDominanceGroup</td><td><mark><strong>Chaos 无对应（有损）</strong></mark></td><td>0</td></tr><tr><td>模拟对象指针</td><td>mSim</td><td><mark>运行时计算，不用导出</mark></td><td>nullptr</td></tr><tr><td>mRigidStatic.mStatic.mCore 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>世界坐标位置</td><td>body2World.p</td><td>FGeometryParticle.X()</td><td></td></tr><tr><td>世界坐标旋转</td><td>body2World.q</td><td>FGeometryParticle.R()</td><td></td></tr><tr><td>标记</td><td>mFlags</td><td><mark><strong>Chaos 和 PhysX 用的不同系统，这块没法转换，但服务器一般也不怎么跑 Simulate，影响不大（有损）</strong></mark></td><td>0</td></tr><tr><td>Body2Actor 变换矩阵是否为单位矩阵</td><td>mIdtBody2Actor</td><td><mark>Static 这个属性没意义，不会用上</mark></td><td>true</td></tr><tr><td>求解器迭代次数</td><td>solverIterationCounts</td><td><mark><strong>Chaos 中只有全局次数，这里暂时用 PhysX 的默认次数（有损）</strong></mark></td><td>4</td></tr><tr><td>mShapeManager 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>修剪结构</td><td>mPruningStructure</td><td><mark>运行时计算修剪结构，不导出</mark></td><td>nullptr</td></tr><tr><td>场景查询数据</td><td>mSceneQueryData</td><td><mark>反序列化会重置，导出无意义</mark></td><td>0xffffffff</td></tr><tr><td>Shape 数据</td><td>mShapes</td><td>FGeometryParticle.ShapesArray()<mark> 地址</mark></td><td></td></tr></tbody></table><ul><li>mAggregateIDOwnerClient：一般是类似布娃娃之类的骨骼内才有，服务器导出的话基本不用。</li><li>mDominanceGroup：PhysX 内的独有概念，Chaos 中没有对应。</li><li>mFlags：PhysX 和 Chaos 用的不同物理体系，这些标记基本上对不上。</li><li>solverIterationCounts：PhysX 可以单独控制 Actor 而 Chaos 只有全局的，这里暂时用了 PhysX 的默认迭代次数。</li></ul><h3 id="dynamic-actor"><a class="anchor" href="#dynamic-actor">#</a> Dynamic Actor</h3><table><thead><tr><th>属性</th><th>NpRigidDynamic</th><th>FPBDRigidParticle</th><th>默认值</th></tr></thead><tbody><tr><td>基础属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>内存分配类型</td><td>mBaseFlags</td><td></td><td>PxBaseFlagType::eOWNS_MEMORY</td></tr><tr><td>对象类型</td><td>mConcreteType</td><td></td><td>PxConcreteType::eRIGID_DYNAMIC</td></tr><tr><td>连接器数组</td><td>mConnectorArray</td><td><mark>服务器暂时不需要这类约束关系，因此不导出</mark></td><td>nullptr</td></tr><tr><td>场景内的下标</td><td>mIndex</td><td><mark>反序列化加入场景后重新赋值，导出为默认值</mark></td><td>0xFFFFFFFF</td></tr><tr><td>名称</td><td>mName</td><td><mark>默认不导出，因此这里也不赋值</mark></td><td>nullptr</td></tr><tr><td>用户数据</td><td>userData</td><td></td><td>nullptr</td></tr><tr><td>mBody 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>运行时标记</td><td>mBodyBufferFlags</td><td><mark>反序列化会重置，导出无意义</mark></td><td>0</td></tr><tr><td>运行时角速度</td><td>mBufferedAngVelocity</td><td>FPBDRigidParticle.W()</td><td></td></tr><tr><td>运行时世界坐标位置</td><td>mBufferedBody2World.p</td><td>FPBDRigidParticle.X()</td><td></td></tr><tr><td>运行时世界坐标旋转</td><td>mBufferedBody2World.q</td><td>FPBDRigidParticle.R()</td><td></td></tr><tr><td>运行时睡眠状态</td><td>mBufferedIsSleeping</td><td><mark>反序列化会重置，导出无意义</mark></td><td>1</td></tr><tr><td>运行时线性速度</td><td>mBufferedLinVelocity</td><td>FPBDRigidParticle.V()</td><td></td></tr><tr><td>运行时唤醒计数</td><td>mBufferedWakeCounter</td><td><mark>运行时数据，导出无意义</mark></td><td>0.0f</td></tr><tr><td>所在场景</td><td>mScene</td><td><mark>反系列化后添加进入场景时赋值，序列化不处理</mark></td><td>nullptr</td></tr><tr><td>物理对象类型</td><td>mControlState</td><td></td><td>ScbType::Enum::eBODY</td></tr><tr><td>导出 Stream 临时指针</td><td>mStreamPtr</td><td><mark>导出时临时赋值的变量，序列化不处理</mark></td><td>nullptr</td></tr><tr><td>mBody.mBodyCore 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>Actor 标志</td><td>mActorFlags</td><td><mark>根据 Chaos 的标记做转换（有损）</mark></td><td>PxActorFlag::eVISUALIZATION</td></tr><tr><td>Actor 类型</td><td>mActorType</td><td></td><td>PxActorType::eRIGID_DYNAMIC</td></tr><tr><td>聚合 ID</td><td>mAggregateIDOwnerClient</td><td><mark><strong>服务器不处理聚合物导出（有损）</strong></mark></td><td>0</td></tr><tr><td>行为标记</td><td>mClientBehaviorFlags</td><td><mark>PhysX3.4 已弃用，导出无意义</mark></td><td>0</td></tr><tr><td>优势组</td><td>mDominanceGroup</td><td><mark><strong>Chaos 无对应（有损）</strong></mark></td><td>0</td></tr><tr><td>模拟对象指针</td><td>mSim</td><td><mark>运行时计算，不用导出</mark></td><td>nullptr</td></tr><tr><td>模拟对象数据</td><td>mSimStateData</td><td><mark>运行时计算，不用导出</mark></td><td>nullptr</td></tr><tr><td>oDynamic.mBody.mBodyCore.mCore 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>角阻尼</td><td>angularDamping</td><td>UPrimitiveComponent.GetAngularDamping()</td><td></td></tr><tr><td>角速度</td><td>angularVelocity</td><td>FPBDRigidParticle.W()</td><td></td></tr><tr><td>body2Actor 位置</td><td>body2Actor.p</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>PxVec3::ZeroVector</td></tr><tr><td>body2Actor 旋转</td><td>body2Actor.q</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>PxIdentity</td></tr><tr><td>世界坐标位置</td><td>body2World.p</td><td>FPBDRigidParticle.X()</td><td></td></tr><tr><td>世界坐标旋转</td><td>body2World.q</td><td>FPBDRigidParticle.R()</td><td></td></tr><tr><td>CCD 推进系数</td><td>ccdAdvanceCoefficient</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>0.15f</td></tr><tr><td>接触报告阈值</td><td>contactReportThreshold</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>PX_MAX_F32</td></tr><tr><td>冻结阈值</td><td>freezeThreshold</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>0</td></tr><tr><td>惯性张量的逆</td><td>inverseInertia</td><td>FPBDRigidParticle.InvI()</td><td></td></tr><tr><td>质量的逆</td><td>inverseMass</td><td>FPBDRigidParticle.InvM()</td><td></td></tr><tr><td>快速移动</td><td>isFastMoving</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>false</td></tr><tr><td>线性阻尼</td><td>linearDamping</td><td>UPrimitiveComponent.GetLinearDamping()</td><td></td></tr><tr><td>线性速度</td><td>linearVelocity</td><td>FPBDRigidParticle.V()</td><td></td></tr><tr><td>锁定标记</td><td>lockFlags</td><td>FConstraintInstance</td><td></td></tr><tr><td>最大角速度平方</td><td>maxAngularVelocitySq</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>49.0f</td></tr><tr><td>最大接触冲量</td><td>maxContactImpulse</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>PX_MAX_F32</td></tr><tr><td>最大线速度平方</td><td>maxLinearVelocitySq</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>PX_MAX_F32</td></tr><tr><td>最大穿透偏置</td><td>maxPenBias</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>-PX_MAX_F32</td></tr><tr><td>标记</td><td>mFlags</td><td><mark><strong>Chaos 和 PhysX 用的不同系统，这块没法转换，但服务器一般也不怎么跑 Simulate，影响不大（有损）</strong></mark></td><td><code>PxRigidBodyFlag::Enum::eKINEMATIC | PxRigidBodyFlag::Enum::eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES</code></td></tr><tr><td>Body2Actor 变换矩阵是否为单位矩阵</td><td>mIdtBody2Actor</td><td><mark><strong>Chaos 没有这个字段默认为单位矩阵，（有损）</strong></mark></td><td>true</td></tr><tr><td>刚体交互次数</td><td>numBodyInteractions</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>0</td></tr><tr><td>计数交互次数</td><td>numCountedInteractions</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>0</td></tr><tr><td>睡眠阈值</td><td>sleepThreshold</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>0.005f</td></tr><tr><td>求解器迭代次数</td><td>solverIterationCounts</td><td><mark><strong>Chaos 中只有全局次数，这里暂时用 PhysX 的默认次数（有损）</strong></mark></td><td><code>(1 &amp; 0xff) &lt;&lt; 8 | (4 &amp; 0xff)</code></td></tr><tr><td>求解器唤醒计数器</td><td>solverWakeCounter</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>0.4f</td></tr><tr><td>唤醒计数器</td><td>wakeCounter</td><td><mark><strong>Chaos 没有对应（有损）</strong></mark></td><td>0.4f</td></tr><tr><td>mShapeManager 属性</td><td>-----------------------------------</td><td>--------------------------------------</td><td>--------------------------------------</td></tr><tr><td>修剪结构</td><td>mPruningStructure</td><td><mark>运行时计算修剪结构，不导出</mark></td><td>nullptr</td></tr><tr><td>场景查询数据</td><td>mSceneQueryData</td><td><mark>反序列化会重置，导出无意义</mark></td><td>0xffffffff</td></tr><tr><td>Shape 数据</td><td>mShapes</td><td>FGeometryParticle.ShapesArray()<mark> 地址</mark></td><td></td></tr></tbody></table><p>Dynamic Actor 相对来说，缺失的属性就比较多了，出去 Static Actor 的那些，还有很多模拟相关的属性：</p><ul><li>body2Actor：Chaos 中没有从 body 到 actor 的变换。</li><li>ccdAdvanceCoefficient、contactReportThreshold、freezeThreshold、isFastMoving、maxAngularVelocitySq、maxContactImpulse、maxLinearVelocitySq、maxPenBias、numBodyInteractions、numCountedInteractions、sleepThreshold、solverIterationCounts、solverWakeCounter、wakeCounter：都没对应，全部设置为未初始化或者默认值，这些属性大部分应用在 simulate，目前服务器实际运行 simulate 的对象很少，所以影响不大。</li></ul><h2 id="特殊规则处理"><a class="anchor" href="#特殊规则处理">#</a> 特殊规则处理</h2><p>除去上述的导出对应关系以外，还涉及到很多导出时的特殊规则和转换问题，下面一一列举：</p><h3 id="几何数据烘培"><a class="anchor" href="#几何数据烘培">#</a> 几何数据烘培</h3><p>由于复杂几何的数据存储在 ExportExtraData 中，大小和内容都是不固定的，且要在 Chaos 内提取对应的物理结构和数据十分困难。因为有些数据是运行时的，需要通过特定的计算得到，如果要实现 100% 的兼容，就必须参考 PhysX 的计算逻辑对 Chaos 的数据做类似的计算，你可能会问难道两个引擎运行时数据不一样吗。是的，这块数据真的相差甚远，因此采用了一个折中的方案：导出 Chaos 中几何的基础数据，再通过 PhysX 读取并计算出运行时数据。但会引入其他影响：</p><ul><li>计算运行时数据放在了反序列化过程中，会有一定的耗时（这部分耗时原本从<strong>序列化</strong>转移到<strong>加载中</strong>）。</li><li>精度丢失问题，临时计算出的运行时数据会有一定程度上的精度缺失，但目前看影响不是很大。</li></ul><h4 id="heightfield-2"><a class="anchor" href="#heightfield-2">#</a> HeightField</h4><p>根据行列导出每个坐标的高度和材质。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxHeightFieldDesc heightFieldDesc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>heightFieldDesc<span class="token punctuation">.</span>nbRows <span class="token operator">=</span> iNumRows<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>heightFieldDesc<span class="token punctuation">.</span>nbColumns <span class="token operator">=</span> iNumCols<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>heightFieldDesc<span class="token punctuation">.</span>format <span class="token operator">=</span> PxHeightFieldFormat<span class="token operator">::</span>Enum<span class="token operator">::</span>eS16_TM<span class="token punctuation">;</span> <span class="token comment">// 假设 Chaos 高度值是 32 位浮点数</span></pre></td></tr><tr><td data-num="5"></td><td><pre>heightFieldDesc<span class="token punctuation">.</span>samples<span class="token punctuation">.</span>data <span class="token operator">=</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>heightFieldDesc<span class="token punctuation">.</span>samples<span class="token punctuation">.</span>stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxHeightFieldSample<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxHeightFieldSample<span class="token punctuation">)</span> <span class="token operator">*</span> iNumRows <span class="token operator">*</span> iNumCols<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="convexmesh-2"><a class="anchor" href="#convexmesh-2">#</a> ConvexMesh</h4><p>按照顶点顺序导出所有三角形的顶点坐标即可。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxConvexMeshDesc convexDesc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>convexDesc<span class="token punctuation">.</span>points<span class="token punctuation">.</span>count <span class="token operator">=</span> iVerticesNum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>convexDesc<span class="token punctuation">.</span>points<span class="token punctuation">.</span>stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxVec3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>convexDesc<span class="token punctuation">.</span>points<span class="token punctuation">.</span>data <span class="token operator">=</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>convexDesc<span class="token punctuation">.</span>flags <span class="token operator">=</span> PxConvexFlag<span class="token operator">::</span>eCOMPUTE_CONVEX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxVec3<span class="token punctuation">)</span> <span class="token operator">*</span> iVerticesNum<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="trianglemesh-2"><a class="anchor" href="#trianglemesh-2">#</a> TriangleMesh</h4><p>TriangleMesh 根据顶点数量分为两种结构，顶点数量过多的情况下，记录时会用 PxI32 否则用 PxU16，主要数据是顶点数据和顶点顺序，不同于凸包，三角网格的大部分顶点都可以复用，因此需要额外的索引来记录三角形组成。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxTriangleMeshDesc triangleDesc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>triangleDesc<span class="token punctuation">.</span>points<span class="token punctuation">.</span>count <span class="token operator">=</span> iVerticesNum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>triangleDesc<span class="token punctuation">.</span>points<span class="token punctuation">.</span>stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxVec3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>triangleDesc<span class="token punctuation">.</span>points<span class="token punctuation">.</span>data <span class="token operator">=</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxVec3<span class="token punctuation">)</span> <span class="token operator">*</span> iVerticesNum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">bool</span> bLarge <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bLarge<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">const</span> PxU32 iIndexNum <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>PxU32<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxU32<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    triangleDesc<span class="token punctuation">.</span>triangles<span class="token punctuation">.</span>count <span class="token operator">=</span> iIndexNum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    triangleDesc<span class="token punctuation">.</span>triangles<span class="token punctuation">.</span>stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxI32<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    triangleDesc<span class="token punctuation">.</span>triangles<span class="token punctuation">.</span>data <span class="token operator">=</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxI32<span class="token punctuation">)</span> <span class="token operator">*</span> iIndexNum <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">const</span> PxU32 iIndexNum <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>PxU32<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxU32<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    triangleDesc<span class="token punctuation">.</span>triangles<span class="token punctuation">.</span>count <span class="token operator">=</span> iIndexNum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    triangleDesc<span class="token punctuation">.</span>triangles<span class="token punctuation">.</span>stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxU16<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    triangleDesc<span class="token punctuation">.</span>triangles<span class="token punctuation">.</span>data <span class="token operator">=</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    address <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxU16<span class="token punctuation">)</span> <span class="token operator">*</span> iIndexNum <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    triangleDesc<span class="token punctuation">.</span>flags <span class="token operator">|=</span> PxMeshFlag<span class="token operator">::</span>e16_BIT_INDICES<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="heightfield-坐标转换"><a class="anchor" href="#heightfield-坐标转换">#</a> HeightField 坐标转换</h3><p>高度场在 PhysX 和 Chaos 的坐标排列和坐标原点不同，因此需要做额外的转换</p><ul><li>简单来说就是做一次平移，做一次旋转，再做一次反向，实现上参考了 Unreal 里的代码，会考虑 Scale 为负的情况下如何变换：<ul><li>平移：因为两边的 Shape 局部坐标原点不一致。</li><li>旋转：因为两边的坐标轴不一样，Unreal 是在 xy-plane 绘制，PhysX 是在 xz-plane 绘制，这里顺带也需要做 Scale 的旋转。</li><li>反向：因为两边的绘制顺序不一致。</li></ul></li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// =========== shape 层面 变换（平移） ===========</span></pre></td></tr><tr><td data-num="2"></td><td><pre>FTransform LandscapeComponentTransform <span class="token operator">=</span> pLandspaceCmp<span class="token operator">-></span><span class="token function">GetComponentToWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>FMatrix LandscapeComponentMatrix <span class="token operator">=</span> LandscapeComponentTransform<span class="token punctuation">.</span><span class="token function">ToMatrixWithScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>FVector Scale <span class="token operator">=</span> LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">ExtractScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>FTransform LandscapeTM <span class="token operator">=</span> FTransform<span class="token operator">::</span>Identity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 镜像 —— 平移</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">bool</span> bIsMirrored <span class="token operator">=</span> LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">Determinant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bIsMirrored<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    LandscapeTM<span class="token punctuation">.</span><span class="token function">SetTranslation</span><span class="token punctuation">(</span><span class="token function">FVector</span><span class="token punctuation">(</span><span class="token operator">-</span>pLandspaceCmp<span class="token operator">-></span>CollisionSizeQuads <span class="token operator">*</span> pLandspaceCmp<span class="token operator">-></span>CollisionScale <span class="token operator">*</span> Scale<span class="token punctuation">.</span>X<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>oShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>q<span class="token punctuation">.</span>w <span class="token operator">=</span> LandscapeTM<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>W<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>oShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>q<span class="token punctuation">.</span>x <span class="token operator">=</span> LandscapeTM<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>X<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>oShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>q<span class="token punctuation">.</span>y <span class="token operator">=</span> LandscapeTM<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>oShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>q<span class="token punctuation">.</span>z <span class="token operator">=</span> LandscapeTM<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>oShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mShape<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>p <span class="token operator">=</span> LandscapeTM<span class="token punctuation">.</span><span class="token function">GetLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//scale 实际上也做了旋转</span></pre></td></tr><tr><td data-num="20"></td><td><pre>FVector <span class="token function">FinalScale</span><span class="token punctuation">(</span>Scale<span class="token punctuation">.</span>X <span class="token operator">*</span> pLandspaceCmp<span class="token operator">-></span>CollisionScale<span class="token punctuation">,</span> Scale<span class="token punctuation">.</span>Y<span class="token operator">*</span> pLandspaceCmp<span class="token operator">-></span>CollisionScale<span class="token punctuation">,</span> Scale<span class="token punctuation">.</span>Z<span class="token operator">*</span> LANDSCAPE_ZSCALE<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>oHeightField<span class="token punctuation">.</span>rowScale <span class="token operator">=</span> FinalScale<span class="token punctuation">.</span>X<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>oHeightField<span class="token punctuation">.</span>columnScale <span class="token operator">=</span> FinalScale<span class="token punctuation">.</span>Y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>oHeightField<span class="token punctuation">.</span>heightScale <span class="token operator">=</span> FinalScale<span class="token punctuation">.</span>Z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// =========== actor 层面 变换（旋转） ===========</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 坐标轴变换 —— 旋转</span></pre></td></tr><tr><td data-num="27"></td><td><pre>FTransform LandscapeComponentTransform <span class="token operator">=</span> pLandspaceCmp<span class="token operator">-></span><span class="token function">GetComponentToWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>FMatrix LandscapeComponentMatrix <span class="token operator">=</span> LandscapeComponentTransform<span class="token punctuation">.</span><span class="token function">ToMatrixWithScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// Reorder the axes</span></pre></td></tr><tr><td data-num="31"></td><td><pre>FVector TerrainX <span class="token operator">=</span> LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">GetScaledAxis</span><span class="token punctuation">(</span>EAxis<span class="token operator">::</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>FVector TerrainY <span class="token operator">=</span> LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">GetScaledAxis</span><span class="token punctuation">(</span>EAxis<span class="token operator">::</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>FVector TerrainZ <span class="token operator">=</span> LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">GetScaledAxis</span><span class="token punctuation">(</span>EAxis<span class="token operator">::</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">SetAxis</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> TerrainX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">SetAxis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TerrainY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>LandscapeComponentMatrix<span class="token punctuation">.</span><span class="token function">SetAxis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TerrainZ<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// 计算位移矩阵</span></pre></td></tr><tr><td data-num="39"></td><td><pre>FTransform LandscapeComponentTransformEd <span class="token operator">=</span> <span class="token function">FTransform</span><span class="token punctuation">(</span>LandscapeComponentMatrix<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>oStatic<span class="token punctuation">.</span>mRigidStatic<span class="token punctuation">.</span>mStatic<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>body2World<span class="token punctuation">.</span>q<span class="token punctuation">.</span>w <span class="token operator">=</span> LandscapeComponentTransformEd<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>W<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>oStatic<span class="token punctuation">.</span>mRigidStatic<span class="token punctuation">.</span>mStatic<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>body2World<span class="token punctuation">.</span>q<span class="token punctuation">.</span>x <span class="token operator">=</span> LandscapeComponentTransformEd<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>X<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>oStatic<span class="token punctuation">.</span>mRigidStatic<span class="token punctuation">.</span>mStatic<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>body2World<span class="token punctuation">.</span>q<span class="token punctuation">.</span>y <span class="token operator">=</span> LandscapeComponentTransformEd<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>oStatic<span class="token punctuation">.</span>mRigidStatic<span class="token punctuation">.</span>mStatic<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>body2World<span class="token punctuation">.</span>q<span class="token punctuation">.</span>z <span class="token operator">=</span> LandscapeComponentTransformEd<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>oStatic<span class="token punctuation">.</span>mRigidStatic<span class="token punctuation">.</span>mStatic<span class="token punctuation">.</span>mCore<span class="token punctuation">.</span>body2World<span class="token punctuation">.</span>p <span class="token operator">=</span> LandscapeComponentTransformEd<span class="token punctuation">.</span><span class="token function">GetLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// =========== 绘制 HeightField（反向） ===========</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FHeightFieldAccessor</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token function">FHeightFieldAccessor</span><span class="token punctuation">(</span><span class="token keyword">const</span> ULandscapeHeightfieldCollisionComponent<span class="token operator">::</span>FHeightfieldGeometryRef<span class="token operator">&amp;</span> InGeometryRef<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token operator">:</span> <span class="token function">GeometryRef</span><span class="token punctuation">(</span>InGeometryRef<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token punctuation">,</span> <span class="token function">NumX</span><span class="token punctuation">(</span>InGeometryRef<span class="token punctuation">.</span>Heightfield<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> InGeometryRef<span class="token punctuation">.</span>Heightfield<span class="token operator">-></span><span class="token function">GetNumCols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token punctuation">,</span> <span class="token function">NumY</span><span class="token punctuation">(</span>InGeometryRef<span class="token punctuation">.</span>Heightfield<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> InGeometryRef<span class="token punctuation">.</span>Heightfield<span class="token operator">-></span><span class="token function">GetNumRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">float</span> <span class="token function">GetUnscaledHeight</span><span class="token punctuation">(</span>int32 X<span class="token punctuation">,</span> int32 Y<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">return</span> GeometryRef<span class="token punctuation">.</span>Heightfield<span class="token operator">-></span><span class="token function">GetHeight</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>    uint8 <span class="token function">GetMaterialIndex</span><span class="token punctuation">(</span>int32 X<span class="token punctuation">,</span> int32 Y<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">return</span> GeometryRef<span class="token punctuation">.</span>Heightfield<span class="token operator">-></span><span class="token function">GetMaterialIndex</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token keyword">const</span> ULandscapeHeightfieldCollisionComponent<span class="token operator">::</span>FHeightfieldGeometryRef<span class="token operator">&amp;</span> GeometryRef<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    int32 NumY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    int32 NumX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>FHeightFieldAccessor <span class="token function">Accessor</span><span class="token punctuation">(</span><span class="token operator">*</span>pLandspaceCmp<span class="token operator">-></span>HeightfieldRef<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">int</span> RowMax <span class="token operator">=</span> Accessor<span class="token punctuation">.</span>NumX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">int</span> ColMax <span class="token operator">=</span> Accessor<span class="token punctuation">.</span>NumY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">bool</span> bIsMirrored <span class="token operator">=</span> pLandspaceCmp<span class="token operator">-></span><span class="token function">GetComponentToWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetDeterminant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bIsMirrored<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    ColMax <span class="token operator">=</span> Accessor<span class="token punctuation">.</span>NumX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    RowMax <span class="token operator">=</span> Accessor<span class="token punctuation">.</span>NumY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>oOutArc<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>RowMax<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxU32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// x</span></pre></td></tr><tr><td data-num="81"></td><td><pre>oOutArc<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ColMax<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxU32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// z</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> ColMax<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> ColMax<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        PxHeightFieldSample oSimple<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIsMirrored<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>            <span class="token keyword">const</span> <span class="token keyword">float</span> CurrHeight <span class="token operator">=</span> Accessor<span class="token punctuation">.</span><span class="token function">GetUnscaledHeight</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>            <span class="token keyword">const</span> uint8 MaterialIdx <span class="token operator">=</span> Accessor<span class="token punctuation">.</span><span class="token function">GetMaterialIndex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>            oSimple<span class="token punctuation">.</span>height <span class="token operator">=</span> CurrHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>            oSimple<span class="token punctuation">.</span>materialIndex0<span class="token punctuation">.</span>mData <span class="token operator">=</span> MaterialIdx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            oSimple<span class="token punctuation">.</span>materialIndex1<span class="token punctuation">.</span>mData <span class="token operator">=</span> MaterialIdx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>            <span class="token keyword">const</span> <span class="token keyword">float</span> CurrHeight <span class="token operator">=</span> Accessor<span class="token punctuation">.</span><span class="token function">GetUnscaledHeight</span><span class="token punctuation">(</span>ColMax <span class="token operator">-</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>            <span class="token keyword">const</span> uint8 MaterialIdx <span class="token operator">=</span> Accessor<span class="token punctuation">.</span><span class="token function">GetMaterialIndex</span><span class="token punctuation">(</span>ColMax <span class="token operator">-</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>            oSimple<span class="token punctuation">.</span>height <span class="token operator">=</span> CurrHeight<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            oSimple<span class="token punctuation">.</span>materialIndex0<span class="token punctuation">.</span>mData <span class="token operator">=</span> MaterialIdx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>            oSimple<span class="token punctuation">.</span>materialIndex1<span class="token punctuation">.</span>mData <span class="token operator">=</span> MaterialIdx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        oOutArc<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>oSimple<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PxHeightFieldSample<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="地址对齐和虚函数表问题"><a class="anchor" href="#地址对齐和虚函数表问题">#</a> 地址对齐和虚函数表问题</h3><p>PhysX 的导出比较粗暴，通过对对象整个序列化的方式直接导出。因此需要严格遵守对象声明中的地址排布，不然恢复过程中就很容易出现差错：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 序列化</span></pre></td></tr><tr><td data-num="2"></td><td><pre>s<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 反序列化</span></pre></td></tr><tr><td data-num="5"></td><td><pre>T<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>因此，如果需要伪造正确的导出结果，类型大小和数据排列就很重要，会影响最终的反序列化：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NpShape<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">272</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NpRigidStatic<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">176</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NpRigidDynamic<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">384</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NpMaterial<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">80</span></pre></td></tr></table></figure><p>可以参考 PhysX 简单移植一下各个类的属性定义，函数的话只需要移植一个虚函数保证结构匹配即可。</p><h4 id="地址对齐"><a class="anchor" href="#地址对齐">#</a> 地址对齐</h4><p>这里的对齐分为两种：</p><ul><li>第一种是每类数据之间的 16 字节对齐</li><li>第二种是 header 的起始地址必须是 128 字节对齐。</li></ul><h3 id="烘培数据导出"><a class="anchor" href="#烘培数据导出">#</a> 烘培数据导出</h3><p>由于烘培数据不属于 PhysX 序列化的一部分，但又不希望把反序列化流程复杂化，因此这部分内容暂时插入在序列化文件的头部。由于 geometry 的数据并不依赖任何内容，因此可以单独在业务层解析。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20240102171933718.png" alt="image-20240102171933718" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-chaos-导出为-physx-物理文件&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-chaos-导出为-physx-物理文件&quot;&gt;#&lt;/a&gt; Unreal Chaos</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="Chaos" scheme="https://hakuya.me/tags/Chaos/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Serialization篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Serialization%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Serialization%E7%AF%87/</id>
    <published>2023-12-11T08:32:00.000Z</published>
    <updated>2023-12-11T08:42:01.636Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxserialization篇"><a class="anchor" href="#physxserialization篇">#</a> PhysX——Serialization 篇</h1><p>本文基于实现的角度，对 PhysX 中序列化和反序列化相关内容做了比较详细的梳理。对于想要了解其中原理或者希望动手修改序列化内容的开发者应该有所裨益。</p><h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2><p>和其他的序列化程序不同，PhysX 中的对象由于存在着些许依赖关系。因此需要花费较大的精力在关系图的建立上，这也是整个序列化流程中较为重要的一环。</p><h2 id="常用容器介绍"><a class="anchor" href="#常用容器介绍">#</a> 常用容器介绍</h2><p>让我们先来看看序列化中常见的几个容器，这有助于我们理解序列化中对于关系的处理：</p><h3 id="collection"><a class="anchor" href="#collection">#</a> Collection</h3><p>Collection 是用来存放序列化对象的容器，PhysX 提供了从 Scene -&gt; Collection -&gt; Binary -&gt; Collection -&gt; Scene。Collection 可以理解为内存对象到二进制文件转换过程的临时容器。开发者只需把应该序列化的对象装入 Collection，剩下的工作都可以交给 PhysX 内部进行处理：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231211144744109.png" alt="image-20231211144744109" /></p><p>整个结构并不复杂，只有两个容器对象：</p><ul><li>mIds：对象指针和序列化编号的 HashMap。</li><li>mObjects：序列化编号和对象指针的 HashMap。</li></ul><h3 id="hashmapbase"><a class="anchor" href="#hashmapbase">#</a> HashMapBase</h3><p>HashMapBase 是整个序列化过程中最常用到的数据结构，提供高效的插入删除查询功能，并支持动态扩容。此外其派生类 <strong>CoalescedHashMap</strong> 还支持高效的随机访问功能：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231211150306957.png" alt="image-20231211150306957" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231211150245992.png" alt="image-20231211150245992" /></p><p>HashMapBase 的核心是 HashBase，整个 HashBase 是一块完整、连续且紧凑的内存空间。主要分为三部分内容：</p><ul><li>哈希桶（mHash）。</li><li>Next 对象指针（mEntriesNext）：当出现 Hash 冲突的时候，根据对象 Next 指针关联下一个元素索引，哈希桶本质上是个头指针。</li><li>对象列表（mEntries）。</li></ul><h3 id="collectionsorter"><a class="anchor" href="#collectionsorter">#</a> CollectionSorter</h3><p>CollectionSorter 继承自 <strong>PxProcessPxBaseCallback</strong>，该基类定义了一个填充接口用于子类实现。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231211160217295.png" alt="image-20231211160217295" /></p><p>CollectionSorter 通过该接口实现了依赖关系的补全，通过 Element 记录每个对象和其关联对象 children。然后根据 sort 函数对结果进行排序，把 children 放在 father 前面，这样导出和导入的时候就可以根据依赖按序补全关系结构图。</p><h3 id="serializationcontext"><a class="anchor" href="#serializationcontext">#</a> SerializationContext</h3><p>SerializationContext 是整个序列化反序列化中比较关键的一环。前面提到了 PhysX 不仅仅要处理对象的储存，还需要记录各个对象间的关联关系。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231211155658154.png" alt="image-20231211155658154" /></p><p>目前的关联关系主要有三种：</p><ul><li>import reference：外部引用。表示部分引用内容在其他 Collection 内，对于分类型导出的时候比较有效。</li><li>internal ptr reference：内部地址引用。用地址编号作为引用 ID。</li><li>internal idx reference：内部编号引用。用某些对象特有的标识 ID 作为引用 ID。</li></ul><h2 id="序列化流程"><a class="anchor" href="#序列化流程">#</a> 序列化流程</h2><ul><li>【step.1】对象收集：顾名思义，就是将需要序列化的对象统统收纳进 <strong>Collection</strong> 容器内。</li><li>【step.2】对象补全：由于添加序列化对象是一项人为操作，一些依赖的对象很可能会漏掉，因此 PhysX 提供了一件补全的功能，尽可能保证依赖的完整性。这一步实际上是利用各类对象自身的  <code>PxSerializer::requiresObjects</code>  函数完成依赖的收集：</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">PxSerialization</span><span class="token operator">::</span><span class="token function">complete</span><span class="token punctuation">(</span>PxCollection<span class="token operator">&amp;</span> collection<span class="token punctuation">,</span> PxSerializationRegistry<span class="token operator">&amp;</span> sr<span class="token punctuation">,</span> <span class="token keyword">const</span> PxCollection<span class="token operator">*</span> exceptFor<span class="token punctuation">,</span> <span class="token keyword">bool</span> followJoints<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxCollection<span class="token operator">*</span> curCollection <span class="token operator">=</span> <span class="token function">PxCreateCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">PX_ASSERT</span><span class="token punctuation">(</span>curCollection<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>curCollection<span class="token operator">-></span><span class="token function">add</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>PxCollection<span class="token operator">*</span> requiresCollection <span class="token operator">=</span> <span class="token function">PxCreateCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">PX_ASSERT</span><span class="token punctuation">(</span>requiresCollection<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">do</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">getRequiresCollection</span><span class="token punctuation">(</span><span class="token operator">*</span>requiresCollection<span class="token punctuation">,</span> <span class="token operator">*</span>curCollection<span class="token punctuation">,</span> collection<span class="token punctuation">,</span> exceptFor<span class="token punctuation">,</span> sr<span class="token punctuation">,</span> followJoints<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">*</span>requiresCollection<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>PxCollection<span class="token operator">*</span> swap <span class="token operator">=</span> curCollection<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>curCollection <span class="token operator">=</span> requiresCollection<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>requiresCollection <span class="token operator">=</span> swap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Cm<span class="token operator">::</span>Collection<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>requiresCollection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>mObjects<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>curCollection<span class="token operator">-></span><span class="token function">getNbObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>requiresCollection<span class="token operator">-></span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>curCollection<span class="token operator">-></span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>【step.3】序列化过程 ——PxSerialization::serializeCollectionToBinary。<ul><li>【step.3.1】对象基于依赖关系排序： <code>PxSerialization::complete</code>  只能保证导出内容基本的完整性，各对象之间的引用关系是没有进行梳理的，因此需要在导出之前进行系统性的梳理，并且需要依照依赖关系，把依赖者放在被依赖者的后面，这里就是通过 <strong>CollectionSorter</strong> 实现的。</li><li>【step.3.2】引用关系分类：由于 PhysX 内定义了很多的引用方式，例如通过 ID 的引用，亦或是通过对象指针的引用。在导出时肯定各不相同，因此需要再归个类，方便分类型把关系进行导出。这里通过 <strong>SerializationContext</strong> 记录不同种类的导出关系。</li><li>【step.3.3】具体的导出步骤：<ul><li>头文件导出：版本号，平台之类的基本信息，用于校验。</li><li>manifest 信息导出：记录各个对象的起始地址和对象类型。</li><li>import reference 外部引用类型导出：记录着引用了外部其他容器内的对象的相关信息。</li><li>export reference map 内部基于 ID 引用的映射表：用于恢复的时候快速通过 ID 查询下标定位对象。</li><li>internal ptr reference 内部指针类型引用导出：基于对象指针所指地址编号作为对象的唯一标识所记录的引用信息。</li><li>internal idx reference 内部 ID 类型引用导出：基于对象 ID 作为唯一标识所记录的引用信息。</li><li>export data 对象本身的导出内容：sizeof (class type)。</li><li>export extra data 对象的额外导出内容：用户自定义。</li></ul></li></ul></li></ul><h2 id="binary格式图"><a class="anchor" href="#binary格式图">#</a> Binary 格式图</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231211164105557.png" alt="image-20231211164105557" /></p><ul><li>Header 部分不做过多解释。</li><li><strong>nbObjectsInCollection</strong>：Collection 内的对象数量。</li><li><strong>manifest nb</strong>：实现了 Serialization 具备可序列化性质的对象数量。</li><li><strong>manifest data</strong>：依据顺序记录各个对象的导出类型。</li><li><strong>actor total offset</strong>：对象导出后占用的总空间大小，用于最后续反序列化对象后的偏移，对应于 export data size。</li><li><strong>importReferences</strong> <strong>nb &amp;&amp; data</strong>：外部引用，表示该 Collection 引用了外部对象，有点类似外链接的感觉。由于现在导出都是全依赖导出形式，因此基本上不存在外部依赖的情况，可以不用过多关注。</li><li>**exportReferences nb &amp;&amp; data：** 内部引用，导出内部对象的 ID 和对应的下标。可以在做依赖恢复的时候提高效率。</li><li>**internalPtr nb &amp;&amp; data：** 内部引用关系，通过对象在序列化数据内的偏移地址作为索引。</li><li>**internalIdx nb &amp;&amp; data：** 内部引用关系，通过对象在序列化数据内的 id 作为索引。</li><li><strong>export data &amp;&amp; export extra data</strong>：对象的实际数据，包含两个部分。export data 表示对象的基本信息。extra data 则更偏向于用户自定义数据。</li></ul><h2 id="反序列化流程"><a class="anchor" href="#反序列化流程">#</a> 反序列化流程</h2><p>todo...</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Serialization" scheme="https://hakuya.me/tags/Serialization/"/>
    
  </entry>
  
  <entry>
    <title>Unreal ReplicationGraph 篇</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20Replication%20%E7%AF%87/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20Replication%20%E7%AF%87/</id>
    <published>2023-11-20T06:24:00.000Z</published>
    <updated>2023-11-20T06:28:28.660Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"></div><h1 id="unreal-replicationgraph-篇"><a class="anchor" href="#unreal-replicationgraph-篇">#</a> Unreal ReplicationGraph 篇</h1><h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2><p>ReplicationGraph 作为 Unreal 引擎的核心功能，提供了多人游戏下的网络复制。为了适应不同游戏场景和特殊业务需求，ReplicationGraph 提供了一套可扩展可定制化的设计模板，通过抽象同步过程，把关联的 Actor 和 Connection 通过图的方式组织在一起，然后依据图的联通特性快速完成同步内容的收集、筛查、过滤，同时允许业务层基于视野网格、距离、敏感区块、重要性、时效性等方面定制化筛选策略。通过搭配组合各项策略可以更好的优化服务器对于同步的性能开销，降低开发者的开发门槛，最终实现高效且灵活的同步机制。下面就来介绍一下 Unreal5.2 版本下的 ReplicationGraph 同步框架的整体结构：</p><h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><p>在了解 ReplicationGraph 结构之前，先来认识一些 ReplicationGraph 中的基本概念：</p><ul><li>每个客户端和服务器建立连接后，会创建对应的 Connection，一个 Connection 可能会有多个 ChildConnection（例如某些游戏支持在一台客户端上进行双人或多人对战的场景下）。因此一个 Connection 会关联至少一个 Actor。</li><li>不论是 ChildConnection 还是 Connection，都会通过 Viewer 用来代表观察者（通常是 PlayerController），同时还有一个 ViewTarget（通常是 Pawn）。<ul><li>PlayerController 用来接受玩家输入的服务器抽象。</li><li>Pawn 表示客户端对象在服务器上的实体（角色）。</li></ul></li><li>所有参与同步的对象都是 <strong>AActor</strong> 或者 <strong>AActor</strong> 派生类，且每个 <strong>AActor</strong> 同步到 Connection 时，都会建立对应的 <strong>ActorChannel</strong>。</li><li>权威性。这个名字比较抽象，可以简单理解为对当前对象（角色）的掌控权力：<ul><li>ROLE_SimulatedProxy：有话语权，但没有操作权。能对自己的角色指手画脚，听不听话还得看别人脸色。</li><li>ROLE_AutonomousProxy：屁都不能放一个，别人说啥就是啥。</li><li>ROLE_Authority：操作权。啥事都得听我的，我就是这个世界的卡密。</li><li>通常情况下服务器会拥有所有对象的「操作权」，客户端会拥有自己控制角色的「话语权」。</li></ul></li></ul><h2 id="数据组成"><a class="anchor" href="#数据组成">#</a> 数据组成</h2><p>最先介绍的是数据部分。由于数据贯穿整个同步流程中，经常被开发者所念叨的就是：“什么时候，哪些对象，同步哪些数据”。我想这也是整个复制框架一直在考虑的问题。ReplicationGraph 把这些问题，通过各项约束进行建模并形成一套完善的衡量体系，抽离出多个评估指标：</p><ul><li>同步周期</li><li>基于类型的同步优先级</li><li>饥饿因子</li><li>距离因子</li><li>剔除距离</li><li>数据状态（Awake、Dormancy、TearOff...）</li><li>快捷通道（FastShared）</li><li>连接带宽</li></ul><p>其中的数据又可以分为两个大类：</p><ul><li>纯配置数据（不可变）</li><li>运行时数据（可变）</li></ul><p>事不宜迟，接下来就从这些数据入手，看看 ReplicationGraph 如何组织这些数据的。弄清楚这些，整个 ReplicationGraph 的实现也就非常明了了：</p><h3 id="actor类全局数据classmap纯配置数据"><a class="anchor" href="#actor类全局数据classmap纯配置数据">#</a> Actor 类全局数据「ClassMap」（纯配置数据）</h3><p>ReplicationGraph 提供了基于 Actor 类型的定制策略，允许基于不同的 Actor 类型定制对应的同步策略。例如某些对象非常庞大，不论身处世界的哪个角落都能看见，那么「剔除距离」就可以设置为 0（无穷大）。又比如某些对象经常变化，且客户端对于这种变化感知需要非常敏感，那么就可以缩减这些对象的「同步周期」。</p><h3 id="actor类实例特化数据actormap配置运行时数据"><a class="anchor" href="#actor类实例特化数据actormap配置运行时数据">#</a> Actor 类实例特化数据「ActorMap」（配置 &amp;&amp; 运行时数据）</h3><p>ActorMap 主要记录现有 Actor 实例的一些设置，部分来源于 ClassMap 的配置数据，还有一些是运行中产生的。比如有一些 Npc 创建出来后，附近有玩家时，会被激活（Dormancy -&gt; Awake），那么在未激活情况下就不需要频繁同步。亦或者一些角色可以根据自己的装备特性让别的玩家看不见，那么就可以设置 TearOff 从而达到暂时隐身的效果。</p><h3 id="connection类实例中各个actor实例数据actorinfomap运行时数据"><a class="anchor" href="#connection类实例中各个actor实例数据actorinfomap运行时数据">#</a> Connection 类实例中各个 Actor 实例数据「ActorInfoMap」（运行时数据）</h3><p>由于 Actor 会根据需要同步给任意数量的 Connection。因此针对每个 Connection 单独记录一个同步设置也是必不可少的。比如一个 Actor 我可以看见但其他人就是看不到，那么就可以单独在我的 Connection 内设置可见性。而且不同 Connection 的同步周期也不是一致的，因此单独记录是十分有必要哒。</p><h3 id="小总结"><a class="anchor" href="#小总结">#</a> 小总结</h3><p>这里做个简单总结：</p><ul><li>全局控制器：ReplicationGraph 通过 CDO 的默认设置，为全局的同步提供默认解决方案。</li><li>类的全局控制器：ReplicationGraph 通过对所有 Actor 类型提供定制的功能（ClassMap），比如某类物体同步快一些，又或者某类同步范围大一些。来控制该类对象的所有同步行为。</li><li>对象的全局控制器：ReplicationGraph 针对单个 Actor 实例通过控制其同步状态等（ActorMap），影响其在所有 Connection 的同步策略。</li><li>连接的控制器：ReplicationGraph 针对任意 Conntion 定制策略。影响某个或某些连接的同步规则（主要是限流）。</li><li>点对点的控制器：ReplicationGraph 针对任意 Conntion 中 Actor 的定制策略（ActorInfoMap）。影响点对点的同步模式。</li></ul><h2 id="三剑客"><a class="anchor" href="#三剑客">#</a> 三剑客</h2><p>说完核心的数据部分，接下来就轮到负责承载和处理这些数据的「三剑客」，也是构筑起整个同步框架的核心类：</p><ul><li>UReplicationGraph</li><li>UNetReplicationGraphConnection</li><li>UReplicationGraphNode</li></ul><h3 id="ureplicationgraph"><a class="anchor" href="#ureplicationgraph">#</a> UReplicationGraph</h3><p>话不多说，先上类图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/UReplicationGraph.png" alt="UReplicationGraph" /></p><p><strong>UReplicationGraph</strong> 继承自 <strong>UReplicationDriver</strong>。<strong>UReplicationDriver</strong> 中定义了贯穿整个同步系统的接口，对任何数据的操作都可以在 <strong>UReplicationDriver</strong> 中找到合适的接口，集百家所长，这也是 <strong>UReplicationGraph</strong> 功能丰富的原因之一。由于 <strong>UReplicationGraph</strong> 和  <strong>NetDriver</strong> 直接关联，而一个 <strong>NetDriver</strong> 只能绑定一个 <strong>World</strong>，<strong>UReplicationGraph</strong> 的复制体系本质上是建立在  <strong>World</strong> 内的。既然如此，之前提到的一些全局性质的数据存放于此也再合适不过 ——ClassMap &amp;&amp; ActorMap。</p><p>除此以外，<strong>UReplicationGraph</strong> 还承担了 UNetReplicationGraphConnection 的管理工作，负责透传各项传操作给 UNetReplicationGraphConnection。</p><h4 id="深入了解-classmap-actormap"><a class="anchor" href="#深入了解-classmap-actormap">#</a> 深入了解 ClassMap &amp;&amp; ActorMap</h4><p>在  <code>UReplicationGraph::InitGlobalActorClassSettings</code>  初始化的时候 <strong>ClassMap</strong> 也随之一起初始化，这两个类的数据都是通过若干个 <strong>FClassReplicationInfo</strong> 组成：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UReplicationGraph</span><span class="token operator">::</span><span class="token function">InitGlobalActorClassSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// AInfo and APlayerControllers have no world location, so distance scaling should always be 0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>FClassReplicationInfo NonSpatialClassInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>NonSpatialClassInfo<span class="token punctuation">.</span>DistancePriorityScale <span class="token operator">=</span> <span class="token number">0.f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>GlobalActorReplicationInfoMap<span class="token punctuation">.</span><span class="token function">SetClassInfo</span><span class="token punctuation">(</span> <span class="token class-name">AInfo</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NonSpatialClassInfo <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>GlobalActorReplicationInfoMap<span class="token punctuation">.</span><span class="token function">SetClassInfo</span><span class="token punctuation">(</span> <span class="token class-name">APlayerController</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NonSpatialClassInfo <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>ActorMap</strong> 的初始化伴随则整个游戏周期，在 Actor 创建、销毁、状态切换等时机都会进行更新。同时也是用来评估 Actor 同步的重要数据源。此外 <strong>ActorMap</strong> 中还保存了有关 Actor 之间的依赖关系（部分 Actor 之前存在从属关系，父类同步的情况下，下属也需要连带同步）</p><p>从类图中可以看到各项指标的定义都在 <strong>FClassReplicationInfo</strong> 中。Actor 的动态数据则存在于 <strong>FGlobalActorReplicationInfo</strong> 中。</p><h3 id="unetreplicationgraphconnection"><a class="anchor" href="#unetreplicationgraphconnection">#</a> UNetReplicationGraphConnection</h3><p><strong>UNetReplicationGraphConnection</strong> 在设计上对标了 <strong>UNetConnection</strong>。如果说 UReplicationGraph 是管全局的，那么 <strong>UNetReplicationGraphConnection</strong> 则主要负责管理单个连接，先来看看类图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/UNetReplicationGraphConnection.png" alt="UNetReplicationGraphConnection" /></p><p><strong>UNetReplicationGraphConnection</strong> 也继承了一个接口类 ——<strong>UReplicationConnectionDriver</strong>。目的也是类似的，主要是用来规范接口标准，保证操作能够透传遍整条链路。</p><h4 id="深入了解-actorinfomap"><a class="anchor" href="#深入了解-actorinfomap">#</a> 深入了解 ActorInfoMap</h4><p>作为 UNetConnection 在同步层的抽象，而  <strong>ActorInfoMap</strong> 又是记录 Connection 相关数据的，因此由 <strong>UNetReplicationGraphConnection</strong> 内部来维护 <strong>ActorInfoMap</strong> 再合适不过。</p><p><strong>ActorInfoMap</strong> 内部主要由三个部分组成：</p><ul><li>GlobalMap：这里引用了的 UReplicationGraph 的 ActorMap &amp;&amp; ClassMap，方便读取。</li><li>ActorMap &amp;&amp; ChannelMap：这两个结构也就是上面提到的 ActorInfoMap 。两个结构存放的内容非常相似，都是 Connection 中同步过的 Actor 的信息，一个是依据 Actor 为 key，一个是依据 Actor 的 Channel 为 key。两者区别主要是 Actor 的生命周期更长一些，如果 Actor 进入 Dormancy 状态时，Channel 会关闭，此时 Channel 的映射可能会移除，而 Actor 映射则是在 Actor 真正销毁的时候才会移除。使用两个 map 存储还有一点是方便不同的 key 进行查询。</li></ul><h4 id="优化策略初见端倪"><a class="anchor" href="#优化策略初见端倪">#</a> 优化策略初见端倪</h4><p>可以看见 <strong>UNetReplicationGraphConnection</strong> 已经有一些 <strong>UReplicationGraphNode</strong> 的成员定义及相关数据了（绿色部分）：</p><ul><li>存放历史 Dormancy 状态 Actors 的 <strong>PrevDormantActorListPerNode</strong>。</li><li>存放 GridNode 中可以被 Viewers 看见的 Cell——<strong>NodesVisibleCells</strong>。</li><li>处理 TearOff 相关逻辑的 TearOffNode。</li></ul><p>对于这些优化策略，暂且按下不表，将会在后面的 UReplicationGraphNode 处展开讲解。</p><h4 id="销毁对象的处理"><a class="anchor" href="#销毁对象的处理">#</a> 销毁对象的处理</h4><p><strong>UNetReplicationGraphConnection</strong> 中花费了较多的逻辑来处理 <strong>ActorDestruction</strong> 的相关内容。</p><p><strong>ActorDestruction</strong> 实际上是用来记录 Actor 销毁前的残留信息，其中包括 Actor 销毁时的坐标、所在流式关卡名称等信息。存储下来主要是为了能够确保销毁可以被正确同步，因为 Actor 销毁后对象就不复存在了，如果在该时刻客户端没有收到销毁信息，之后将没有途径获取销毁的具体信息。</p><p>销毁信息主要分为两类 DestructInfo &amp;&amp; DormantDestructInfo：</p><ul><li>DormantDestructInfo：表示由于 Actor 进入休眠状态，直接视作销毁。这种方式销毁下 Connection 会同步给客户端一个休眠销毁信息，并且尝试关闭对应 Actor 的 Channel。</li><li>DestructInfo：非休眠状态下的销毁信息。这部分信息会根据 Viewers 和被销毁对象的位置进行同步。触发同步时通过对比上次触发时所处位置和当前位置是否超过某个阈值，如果超过的情况下会基于 DistanceCulling 判断被销毁物体距离是否可见。</li></ul><h3 id="ureplicationgraphnode"><a class="anchor" href="#ureplicationgraphnode">#</a> UReplicationGraphNode</h3><p><strong>UReplicationGraphNode</strong> 主要充当要被同步 Actor 的容器，同时配合上层策略完成收集工作。</p><ul><li><strong>UReplicationGraphNode_ActorListFrequencyBuckets</strong>、<strong>UReplicationGraphNode_ActorList</strong> 及其派生类作为容器负责存储 Actor，并提供一些筛选策略。</li><li>其他 <strong>UReplicationGraphNode</strong> 则仅仅只提供策略，不存储 Actor。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/UReplicationGraphNode.png" alt="UReplicationGraphNode" /></p><p>得益于 <strong>UReplicationGraphNode</strong> 本身的结构和接口的定义。可以演化出不同的同步策略，并且可以互相搭配实现复杂的同步机制。目前官方提供了 5 种基础策略：</p><ul><li>UReplicationGraphNode_GridSpatialization2D：网格划分的同步策略。</li><li>UReplicationGraphNode_AlwaysRelevant &amp;&amp; UReplicationGraphNode_AlwaysRelevant_ForConnection：始终可见的全局同步策略。</li><li>UReplicationGraphNode_TearOff_ForConnection：针对 Connection 的定向擦除策略。</li><li>UReplicationGraphNode_DormancyNode &amp;&amp; UReplicationGraphNode_ConnectionDormancyNode：休眠唤醒策略。</li><li>UReplicationGraphNode_DynamicSpatialFrequency：动态空间频率策略。</li></ul><h4 id="ureplicationgraphnode_actorlist"><a class="anchor" href="#ureplicationgraphnode_actorlist">#</a> <strong>UReplicationGraphNode_ActorList</strong></h4><p>Actor 的容器结构，里面主要是分为两部分：</p><ul><li>StreamingLevelCollection：通过流式关卡名称来分别记录 Actor</li><li>ReplicationActorList：记录非流式关卡内的 Actor</li></ul><h4 id="ureplicationgraphnode_gridspatialization2d"><a class="anchor" href="#ureplicationgraphnode_gridspatialization2d">#</a> UReplicationGraphNode_GridSpatialization2D</h4><p><strong>UReplicationGraphNode_GridSpatialization2D</strong> 是一种比较常见的网格划分策略，需要搭配 <strong>UReplicationGraphNode_GridCell</strong> 一起使用。通过定义单个网格大小，将世界区域切分为多个 Cell，按照 Cell 为单位进行对象的同步。</p><p>具体流程：</p><ul><li>每次触发同步操作的时候，需要执行 <strong>PrepareForReplication()</strong> 对所有 Actor 进行 Cell 信息的更新。</li><li>然后把对应的 Actor 放置在所属的 <strong>UReplicationGraphNode_GridCell</strong> 内，一个 Actor 可能存在于多个 Cell 内。</li><li>当某个 Connection 需要获取同步 Actor 列表的时候，会先计算出该 Connection 中的 Viewer 对于哪些 Cell 可见，然后查询这些 Cell 来收集同步对象。</li><li>最后基于各项指标评估是否可以被同步，然后同步给客户端。</li></ul><h4 id="ureplicationgraphnode_alwaysrelevant"><a class="anchor" href="#ureplicationgraphnode_alwaysrelevant">#</a> UReplicationGraphNode_AlwaysRelevant</h4><p><strong>UReplicationGraphNode_AlwaysRelevant</strong> 相对比较简单，其内部提供了设置永远可见的类型。</p><p>具体流程：</p><ul><li>每次触发同步操作的时候，需要执行 <strong>PrepareForReplication()</strong> 对所有永远可见的类型的 Actor 挑选出来，加入到 ChildNode。</li><li>在 GatherActorListsForConnection 操作的时候无脑全量提取即可。</li></ul><blockquote><p>这个设计导致很多地方为了实现 AlwaysRelevant 都单独写了 Update 机制来替换 PrepareForReplication。</p></blockquote><h4 id="ureplicationgraphnode_alwaysrelevant_forconnection"><a class="anchor" href="#ureplicationgraphnode_alwaysrelevant_forconnection">#</a> UReplicationGraphNode_AlwaysRelevant_ForConnection</h4><p>也是永久可见策略，但是基于 Connection。</p><p>内部会记录对于该 Connection 永久可见的 Actor，同时 Connection 中有关该 Actor 的距离剔除信息（ActorInfoMap）会被设置为 0，就可以不被距离策略给过滤掉。</p><h4 id="ureplicationgraphnode_tearoff_forconnection"><a class="anchor" href="#ureplicationgraphnode_tearoff_forconnection">#</a> UReplicationGraphNode_TearOff_ForConnection</h4><p><strong>UReplicationGraphNode_TearOff_ForConnection</strong> 像是 UReplicationGraphNode_AlwaysRelevant_ForConnection 的对立。内部记录了某个 Actor 将要在该 Connection 内被擦除的帧数。</p><h4 id="ureplicationgraphnode_dormancynode"><a class="anchor" href="#ureplicationgraphnode_dormancynode">#</a> UReplicationGraphNode_DormancyNode</h4><p>用来管理 <strong>UReplicationGraphNode_ConnectionDormancyNode</strong>，自己不干什么活。主要是存储休眠了的 Actor（Actor 本身休眠而不是针对某个连接休眠）。</p><p>大部分接口都是通过 <strong>UReplicationGraphNode_GridSpatialization2D</strong> 或者更上层的 <strong>UReplicationGraph</strong> 进行调用，然后负责传达给下层的 <strong>UReplicationGraphNode_ConnectionDormancyNode</strong>。</p><h4 id="ureplicationgraphnode_connectiondormancynode"><a class="anchor" href="#ureplicationgraphnode_connectiondormancynode">#</a> UReplicationGraphNode_ConnectionDormancyNode</h4><p>用来管理 Connection 所关联的休眠 Actor，实现上高度依赖 <strong>UReplicationGraphNode_GridCell</strong>，大部分休眠节点来源于流式关卡的显隐状态切换导致。少部分通过上层业务主动调用。Actor 基于 Connection 的休眠流程如下：</p><ul><li>基于某种原因触发 Actor 的状态切换（唤醒 -&gt; 休眠）</li><li>体现在各个 Connection 中表现为：<ul><li>休眠节点加入 Connection 的 PendingDormantDestructList。</li><li>重新设置为<strong>唤醒</strong>状态 ——NotifyActorDormancyFlush（强制唤醒 Actor）</li><li>同步 <strong>DormantDestructInfo</strong> 信息，让 Actor 走休眠销毁流程（这里对象必须处于唤醒状态，不然无法正常同步销毁信息）</li><li>收到（客户端）销毁信息，设置 Actor 为休眠状态。关闭 Connection 中对应 Actor 的 Channel。</li><li>收到（服务器）Channel 关闭，设置 Actor 为休眠状态。Actor 正式进入休眠。</li></ul></li></ul><p>整体实现还是不太好理解的，有兴趣可以去看看具体实现：</p><ul><li><code>UNetReplicationGraphConnection::ReplicateDormantDestructionInfos</code>  部分。</li><li><code>UReplicationGraphNode_GridSpatialization2D::GatherActorListsForConnection</code>  的 PrevDormantActorList 处理部分。</li><li><code>UControlChannel::ReceiveDestructionInfo</code>  的  <code>CloseReason == EChannelCloseReason::Dormancy</code>  部分。</li><li><code>UActorChannel::Close(EChannelCloseReason Reason</code>  的  <code>Reason == EChannelCloseReason::Dormancy</code>  部分。</li></ul><h4 id="ureplicationgraphnode_dynamicspatialfrequency"><a class="anchor" href="#ureplicationgraphnode_dynamicspatialfrequency">#</a> UReplicationGraphNode_DynamicSpatialFrequency</h4><p><strong>DynamicSpatialFrequency</strong> 思想主要来源于人类视觉系统对于不同方向和空间频率的敏感度存在「方向选择性」和「空间频率选择性」。基于这种特性就可以简单对视野范围内不同方位做不同频率的更新，从而在不影响体验的情况下优化性能。</p><p>其中的实现还是比较复杂的，需要根据法线方向划分周围区域到多个 Zone。然后根据 Actor 处于 Viewer 的某个 Zone，来决定其下次的更新时机。算是在更新周期上下了一番功夫，可能对于单次同步开销高昂的对象有不错的效果。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231117220403256.png" alt="image-20231117220403256" width="300px" /></p><h3 id="小总结-2"><a class="anchor" href="#小总结-2">#</a> 小总结</h3><p>本节主要介绍了 5 种优化策略。有关 ReplicationGraph 如何组织数据以及如何用各种策略优化同步的方式，到此也有了一个基本认识。</p><p>ReplicationGraph 提供了基于 <strong>UReplicationGraphNode_GridSpatialization2D</strong> 的划分结构，在每个 <strong>UReplicationGraphNode_GridCell</strong> 内又提供了两种默认的优化策略 ——<strong>UReplicationGraphNode_DormancyNode</strong> &amp;&amp; <strong>UReplicationGraphNode_ActorListFrequencyBuckets</strong>。</p><p><strong>UReplicationGraphNode_DormancyNode</strong> 用来处理休眠对象，保证对象休眠后尽可能的减少同步开销。<strong>UReplicationGraphNode_ActorListFrequencyBuckets</strong> 对非休眠对象的同步检查进行分帧处理，保证性能的稳定。</p><p>除此以外，还提供了 <strong>UReplicationGraphNode_AlwaysRelevant_ForConnection</strong> &amp;&amp; <strong>UReplicationGraphNode_TearOff_ForConnection</strong> 来处理 Connection 层面的可见和擦除。</p><p>这些基本策略都是默认包含的，只要采用了 <strong>UBasicReplicationGraph</strong> 就可以立马生效，此外还可以尝试一下 <strong>UReplicationGraphNode_DynamicSpatialFrequency</strong> 的优化，或许也会有意想不到的效果。</p><p>下面是 <strong>UBasicReplicationGraph</strong> 内的大致同步策略图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/UBasicReplicationGraph.png" alt="UBasicReplicationGraph" /></p><h2 id="如何知道哪些对象需要同步"><a class="anchor" href="#如何知道哪些对象需要同步">#</a> 如何知道哪些对象需要同步？</h2><p>这个问题要说简单也简单，要说复杂也复杂。大部分情况下 GraphNode 中收集到的 Actor 都是需要同步的。这里需要依赖 Actor 的管理策略了，也就是上述 5 种策略如何搭配组合。这将决定每次执行  <code>GatherActorListsForConnection</code>  获取到需要同步的 ActorList 的结果。</p><p>但最终哪些会被同步还是取决于  <code>ReplicateActorListsForConnections_Default</code>  &amp;&amp;  <code>ReplicateActorListsForConnections_FastShared</code> 。</p><ul><li><strong>ReplicateActorListsForConnections_Default</strong> 会根据对象的各项权重计算出最终的因子。由于带宽资源有限，基于权重因子的排序的结果会觉定哪些对象更「重要」，从而更容易获得同步资格。</li><li><strong>ReplicateActorListsForConnections_FastShared</strong> 和 Default 是两个分开的赛道，这里面的对象走的是绿通，不需要考虑优先级，因此唯一的筛选标准只有「裁剪距离」。但是同样有自己的带宽限制，因此不可能全同步，公平期间采用的是分帧处理。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 ListIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ListIdx <span class="token operator">&lt;</span> GatheredLists<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ListIdx<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> FActorRepListConstView<span class="token operator">&amp;</span> List <span class="token operator">=</span> GatheredLists<span class="token punctuation">[</span><span class="token punctuation">(</span>ListIdx <span class="token operator">+</span> FrameNum<span class="token punctuation">)</span> <span class="token operator">%</span> GatheredLists<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int32 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> List<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">//... 这里用帧率对 GatheredLists 求余来做起始点的随机</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>下面简单梳理了一下同步的流程图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/ServerReplicateActors.png" alt="ServerReplicateActors" /></p><h2 id="其他特性"><a class="anchor" href="#其他特性">#</a> 其他特性</h2><h3 id="default-fastshared"><a class="anchor" href="#default-fastshared">#</a> Default &amp;&amp; FastShared</h3><p>这个上面也简单介绍了， <code>GatherActorListsForConnection</code>  里面有两种类型 Actor 的收集，一种是走正常同步，另一种则是快捷通道的同步。如果需要体验这种 FastShared，需要提前在 <strong>FGlobalActorReplicationInfo</strong> 中注册同步函数 <code>FastSharedReplicationFunc</code> ，该函数是针对 Actor 对象级别的处理。例如同步玩家的位置信息：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>CharacterClassRepInfo<span class="token punctuation">.</span>FastSharedReplicationFunc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> Actor<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">bool</span> bSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ALyraCharacter<span class="token operator">*</span> Character <span class="token operator">=</span> Cast<span class="token operator">&lt;</span>ALyraCharacter<span class="token operator">></span><span class="token punctuation">(</span>Actor<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>bSuccess <span class="token operator">=</span> Character<span class="token operator">-></span><span class="token function">UpdateSharedReplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">return</span> bSuccess<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">ALyraCharacter</span><span class="token operator">::</span><span class="token function">UpdateSharedReplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetLocalRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ROLE_Authority<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>FSharedRepMovement SharedMovement<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>SharedMovement<span class="token punctuation">.</span><span class="token function">FillForCharacter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// Only call FastSharedReplication if data has changed since the last frame.</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// Skipping this call will cause replication to reuse the same bunch that we previously</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// produced, but not send it to clients that already received. (But a new client who has not received</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// it, will get it this frame)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SharedMovement<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>LastSharedReplication<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>LastSharedReplication <span class="token operator">=</span> SharedMovement<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>ReplicatedMovementMode <span class="token operator">=</span> SharedMovement<span class="token punctuation">.</span>RepMovementMode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token function">FastSharedReplication</span><span class="token punctuation">(</span>SharedMovement<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// We cannot fastrep right now. Don't send anything.</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="replayconnection"><a class="anchor" href="#replayconnection">#</a> ReplayConnection</h3><p>回放连接，该连接特点在于  <code>GatherActorListsForConnection</code>  收集 Actor 的时候，可以共享所有 Connection Viewers 的视野进行 Actor 收集，有点类似全图视野的感觉。</p><h3 id="swaproles"><a class="anchor" href="#swaproles">#</a> SwapRoles</h3><p>SwapRoles 功能是可以<strong>永久</strong>切换 Actor 的权威性，可以让原本受服务器控制的 Npc 交给客户端管理，服务器充当被同步方。</p><p>这里为了保证客户端获取到权威性后，服务器能够正常把修改同步给其他客户端。一般会创建一个哨兵对象：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>TOptional<span class="token operator">&lt;</span>FScopedActorRoleSwap<span class="token operator">></span> SwapGuard</pre></td></tr></table></figure><p>在客户端执行完操作并同步给服务器完成数据的复制以后，服务器会切换回权威状态，并处理同步操作给到其他客户端，由于这种调换是基于 Connection 的，因此其他客户端连接中不会发生权威性的互换操作，可以正常通过网络复制被同步。</p><h2 id="定制化案例-lyra"><a class="anchor" href="#定制化案例-lyra">#</a> 定制化案例 Lyra</h2><p>说了这么多，那具体如何上手呢？这里通过 Lyra 案例进行简单的介绍。LyraGame 中主要是定制了 ULyraReplicationGraph、ULyraReplicationGraphNode_AlwaysRelevant_ForConnection 并实现了另类的分帧策略 ULyraReplicationGraphNode_PlayerStateFrequencyLimiter。</p><h3 id="ulyrareplicationgraph"><a class="anchor" href="#ulyrareplicationgraph">#</a> ULyraReplicationGraph</h3><p>先来看看 ULyraReplicationGraph，这里比较关键的是 <strong>InitGlobalActorClassSettings</strong> 实现：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">ULyraReplicationGraph</span><span class="token operator">::</span><span class="token function">InitGlobalActorClassSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 注册了 Class Init 的函数，里面夹带了 RegisterClassRepNodeMapping 操作</span></pre></td></tr><tr><td data-num="4"></td><td><pre>GlobalActorReplicationInfoMap<span class="token punctuation">.</span><span class="token function">SetInitClassInfoFunc</span><span class="token punctuation">(</span><span class="token comment">/*....*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 注册了对象初始化函数，主要是为了获取 Route 策略</span></pre></td></tr><tr><td data-num="6"></td><td><pre>ClassRepNodePolicies<span class="token punctuation">.</span>InitNewElement <span class="token operator">=</span> <span class="token comment">/*....*/</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 一些 Lyra 配置的路由策略类</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FRepGraphActorClassSettings<span class="token operator">&amp;</span> ActorClassSettings <span class="token operator">:</span> LyraRepGraphSettings<span class="token operator">-></span>ClassSettings<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ActorClassSettings<span class="token punctuation">.</span>bAddClassRepInfoToMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>UClass<span class="token operator">*</span> StaticActorClass <span class="token operator">=</span> ActorClassSettings<span class="token punctuation">.</span><span class="token function">GetStaticActorClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">AddClassRepInfo</span><span class="token punctuation">(</span>StaticActorClass<span class="token punctuation">,</span> ActorClassSettings<span class="token punctuation">.</span>ClassNodeMapping<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 这里遍历了所有 UClass 类，把能够同步的记录下来，并设置对应的 Route 策略。</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 该策略是 Lyra 定制的，用于指定哪些类型可以被放入到哪些 GraphNode 中</span></pre></td></tr><tr><td data-num="22"></td><td><pre>TArray<span class="token operator">&lt;</span>UClass<span class="token operator">*</span><span class="token operator">></span> AllReplicatedClasses<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>TObjectIterator<span class="token operator">&lt;</span>UClass<span class="token operator">></span> It<span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">//....</span></pre></td></tr><tr><td data-num="26"></td><td><pre>AllReplicatedClasses<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token function">RegisterClassRepNodeMapping</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// 设置了一下 ACharacter 各项权重因子</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">auto</span> SetClassInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>UClass<span class="token operator">*</span> Class<span class="token punctuation">,</span> <span class="token keyword">const</span> FClassReplicationInfo<span class="token operator">&amp;</span> Info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> GlobalActorReplicationInfoMap<span class="token punctuation">.</span><span class="token function">SetClassInfo</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> Info<span class="token punctuation">)</span><span class="token punctuation">;</span> ExplicitlySetClasses<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>ExplicitlySetClasses<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>FClassReplicationInfo CharacterClassRepInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>CharacterClassRepInfo<span class="token punctuation">.</span>DistancePriorityScale <span class="token operator">=</span> <span class="token number">1.f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>CharacterClassRepInfo<span class="token punctuation">.</span>StarvationPriorityScale <span class="token operator">=</span> <span class="token number">1.f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>CharacterClassRepInfo<span class="token punctuation">.</span>ActorChannelFrameTimeout <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>CharacterClassRepInfo<span class="token punctuation">.</span><span class="token function">SetCullDistanceSquared</span><span class="token punctuation">(</span><span class="token class-name">ALyraCharacter</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>GetDefaultObject<span class="token operator">&lt;</span>ALyraCharacter<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>NetCullDistanceSquared<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token function">SetClassInfo</span><span class="token punctuation">(</span><span class="token class-name">ACharacter</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CharacterClassRepInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// 设置了一下 ALyraCharacter 的 FastShared 同步函数处理，以及 FastShared 自身通道的相关配置</span></pre></td></tr><tr><td data-num="42"></td><td><pre>CharacterClassRepInfo<span class="token punctuation">.</span>FastSharedReplicationFunc <span class="token operator">=</span> <span class="token comment">/*....*/</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>CharacterClassRepInfo<span class="token punctuation">.</span>FastSharedReplicationFuncName <span class="token operator">=</span> <span class="token function">FName</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"FastSharedReplication"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>FastSharedPathConstants<span class="token punctuation">.</span>MaxBitsPerFrame <span class="token operator">=</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>TargetKBytesSecFastSharedPath <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">/</span> NetDriver<span class="token operator">-></span>NetServerMaxTickRate<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>FastSharedPathConstants<span class="token punctuation">.</span>DistanceRequirementPct <span class="token operator">=</span> Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>FastSharedPathCullDistPct<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token function">SetClassInfo</span><span class="token punctuation">(</span><span class="token class-name">ALyraCharacter</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CharacterClassRepInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">// 设置了一下分帧策略，因为 UReplicationGraphNode_GridCell 会用到</span></pre></td></tr><tr><td data-num="49"></td><td><pre>UReplicationGraphNode_ActorListFrequencyBuckets<span class="token operator">::</span>DefaultSettings<span class="token punctuation">.</span>ListSize <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>UReplicationGraphNode_ActorListFrequencyBuckets<span class="token operator">::</span>DefaultSettings<span class="token punctuation">.</span>NumBuckets <span class="token operator">=</span> Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>DynamicActorFrequencyBuckets<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>UReplicationGraphNode_ActorListFrequencyBuckets<span class="token operator">::</span>DefaultSettings<span class="token punctuation">.</span>BucketThresholds<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>UReplicationGraphNode_ActorListFrequencyBuckets<span class="token operator">::</span>DefaultSettings<span class="token punctuation">.</span>EnableFastPath <span class="token operator">=</span> <span class="token punctuation">(</span>Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>EnableFastSharedPath <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>UReplicationGraphNode_ActorListFrequencyBuckets<span class="token operator">::</span>DefaultSettings<span class="token punctuation">.</span>FastPathFrameModulo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">// 初始化 RPC 相关准入策略</span></pre></td></tr><tr><td data-num="56"></td><td><pre>RPCSendPolicyMap<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>UClass<span class="token operator">*</span> ReplicatedClass <span class="token operator">:</span> AllReplicatedClasses<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token function">RegisterClassReplicationInfo</span><span class="token punctuation">(</span>ReplicatedClass<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">// 初始化 DestructInfo 最远距离</span></pre></td></tr><tr><td data-num="63"></td><td><pre>DestructInfoMaxDistanceSquared <span class="token operator">=</span> Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>DestructionInfoMaxDist <span class="token operator">*</span> Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>DestructionInfoMaxDist<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">// 初始化 RPC multicasts 广播策略</span></pre></td></tr><tr><td data-num="66"></td><td><pre>RPC_Multicast_OpenChannelForClass<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>RPC_Multicast_OpenChannelForClass<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token class-name">AActor</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Open channels for multicast RPCs by default</span></pre></td></tr><tr><td data-num="68"></td><td><pre>RPC_Multicast_OpenChannelForClass<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token class-name">AController</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// multicasts should never open channels on Controllers since opening a channel on a non-owner breaks the Controller's replication.</span></pre></td></tr><tr><td data-num="69"></td><td><pre>RPC_Multicast_OpenChannelForClass<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token class-name">AServerStatReplicator</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FRepGraphActorClassSettings<span class="token operator">&amp;</span> ActorClassSettings <span class="token operator">:</span> LyraRepGraphSettings<span class="token operator">-></span>ClassSettings<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ActorClassSettings<span class="token punctuation">.</span>bAddToRPC_Multicast_OpenChannelForClassMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>UClass<span class="token operator">*</span> StaticActorClass <span class="token operator">=</span> ActorClassSettings<span class="token punctuation">.</span><span class="token function">GetStaticActorClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>RPC_Multicast_OpenChannelForClass<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>StaticActorClass<span class="token punctuation">,</span> ActorClassSettings<span class="token punctuation">.</span>bRPC_Multicast_OpenChannelForClass<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>整体看下来主要做了以下几件事：</p><ul><li>初始化所有 Actor 类型的路由策略。这会决定哪些类型的 Actor 会受到哪些优化策略影响。</li><li>给 Character 做了一定的优化。设置了些许权重，增加了 LyraCharacter 位置属性的 FastShared 同步。</li><li>设置了销毁信息内对于距离的限制，以及 RPC 调用时对于类型的准入和接收条件。这会决定哪些对象可以执行 RPC 调用，哪些对象可以收到 RPC 广播。</li></ul><p>再来看看另一个比较重要的接口 <strong>InitGlobalGraphNodes</strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">ULyraReplicationGraph</span><span class="token operator">::</span><span class="token function">InitGlobalGraphNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// -----------------------------------------------</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//Spatial Actors</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// -----------------------------------------------</span></pre></td></tr><tr><td data-num="6"></td><td><pre>GridNode <span class="token operator">=</span> CreateNewNode<span class="token operator">&lt;</span>UReplicationGraphNode_GridSpatialization2D<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>GridNode<span class="token operator">-></span>CellSize <span class="token operator">=</span> Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>CellSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>GridNode<span class="token operator">-></span>SpatialBias <span class="token operator">=</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span>Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>SpatialBiasX<span class="token punctuation">,</span> Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>SpatialBiasY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Lyra<span class="token operator">::</span>RepGraph<span class="token operator">::</span>DisableSpatialRebuilds<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>GridNode<span class="token operator">-></span><span class="token function">AddToClassRebuildDenyList</span><span class="token punctuation">(</span><span class="token class-name">AActor</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Disable All spatial rebuilding</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">AddGlobalGraphNode</span><span class="token punctuation">(</span>GridNode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// -----------------------------------------------</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//Always Relevant (to everyone) Actors</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// -----------------------------------------------</span></pre></td></tr><tr><td data-num="20"></td><td><pre>AlwaysRelevantNode <span class="token operator">=</span> CreateNewNode<span class="token operator">&lt;</span>UReplicationGraphNode_ActorList<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">AddGlobalGraphNode</span><span class="token punctuation">(</span>AlwaysRelevantNode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// -----------------------------------------------</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">//Player State specialization. This will return a rolling subset of the player states to replicate</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// -----------------------------------------------</span></pre></td></tr><tr><td data-num="26"></td><td><pre>ULyraReplicationGraphNode_PlayerStateFrequencyLimiter<span class="token operator">*</span> PlayerStateNode <span class="token operator">=</span> CreateNewNode<span class="token operator">&lt;</span>ULyraReplicationGraphNode_PlayerStateFrequencyLimiter<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token function">AddGlobalGraphNode</span><span class="token punctuation">(</span>PlayerStateNode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里定制了 LyraGame 的专属同步方案：</p><ul><li>基于 UReplicationGraphNode_GridSpatialization2D 的全局优化，对地图做网格切分，优化同步。</li><li>基于 UReplicationGraphNode_ActorList 的全局可见方案。</li><li>基于 ULyraReplicationGraphNode_PlayerStateFrequencyLimiter 的全局定时角色状态同步。</li></ul><p>剩下最后一个比较重要的接口 ——<strong>InitConnectionGraphNodes</strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">ULyraReplicationGraph</span><span class="token operator">::</span><span class="token function">InitConnectionGraphNodes</span><span class="token punctuation">(</span>UNetReplicationGraphConnection<span class="token operator">*</span> RepGraphConnection<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">InitConnectionGraphNodes</span><span class="token punctuation">(</span>RepGraphConnection<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>ULyraReplicationGraphNode_AlwaysRelevant_ForConnection<span class="token operator">*</span> AlwaysRelevantConnectionNode <span class="token operator">=</span> CreateNewNode<span class="token operator">&lt;</span>ULyraReplicationGraphNode_AlwaysRelevant_ForConnection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// This node needs to know when client levels go in and out of visibility</span></pre></td></tr><tr><td data-num="8"></td><td><pre>RepGraphConnection<span class="token operator">-></span>OnClientVisibleLevelNameAdd<span class="token punctuation">.</span><span class="token function">AddUObject</span><span class="token punctuation">(</span>AlwaysRelevantConnectionNode<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ULyraReplicationGraphNode_AlwaysRelevant_ForConnection<span class="token operator">::</span>OnClientLevelVisibilityAdd<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>RepGraphConnection<span class="token operator">-></span>OnClientVisibleLevelNameRemove<span class="token punctuation">.</span><span class="token function">AddUObject</span><span class="token punctuation">(</span>AlwaysRelevantConnectionNode<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ULyraReplicationGraphNode_AlwaysRelevant_ForConnection<span class="token operator">::</span>OnClientLevelVisibilityRemove<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">AddConnectionGraphNode</span><span class="token punctuation">(</span>AlwaysRelevantConnectionNode<span class="token punctuation">,</span> RepGraphConnection<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这个也比较简单，上面两个主要是全局的策略，这里主要是定制了 Connection 级别的策略。为每个 Connection 设置了改良版的 ULyraReplicationGraphNode_AlwaysRelevant_ForConnection 节点。</p><p>还有一些常规化的定制逻辑，例如：</p><ul><li>路由接口：RouteRemoveXXX、RouteAddXXX。</li><li>事件注册：OnXXXAdd、OnXXXRemove。</li><li>定义了若干全局数据。</li></ul><h3 id="ulyrareplicationgraphnode_alwaysrelevant_forconnection"><a class="anchor" href="#ulyrareplicationgraphnode_alwaysrelevant_forconnection">#</a> ULyraReplicationGraphNode_AlwaysRelevant_ForConnection</h3><p>主要功能是在每次收集同步对象时，会把当前 Connection 关联的所有 Viewers 以及和该 Viewers 有依赖关系的对象加入同步列表。</p><p>同时基于关卡的可见性，从 ULyraReplicationGraph 获取可见流式关卡中的永远可见对象列表加入同步列表。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">ULyraReplicationGraphNode_AlwaysRelevant_ForConnection</span><span class="token operator">::</span><span class="token function">GatherActorListsForConnection</span><span class="token punctuation">(</span><span class="token keyword">const</span> FConnectionGatherActorListParameters<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ULyraReplicationGraph<span class="token operator">*</span> LyraGraph <span class="token operator">=</span> CastChecked<span class="token operator">&lt;</span>ULyraReplicationGraph<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">GetOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ReplicationActorList<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 这里主要是收集 Connection 中关联的 Viewers 和 ViewTargets.</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 因为一个 Connection 可能会有多个 ChildConnection，因此也可能出现多个 Viewers 和 ViewTargets.</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FNetViewer<span class="token operator">&amp;</span> CurViewer <span class="token operator">:</span> Params<span class="token punctuation">.</span>Viewers<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ReplicationActorList<span class="token punctuation">.</span><span class="token function">ConditionalAdd</span><span class="token punctuation">(</span>CurViewer<span class="token punctuation">.</span>InViewer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ReplicationActorList<span class="token punctuation">.</span><span class="token function">ConditionalAdd</span><span class="token punctuation">(</span>CurViewer<span class="token punctuation">.</span>ViewTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ALyraPlayerController<span class="token operator">*</span> PC <span class="token operator">=</span> Cast<span class="token operator">&lt;</span>ALyraPlayerController<span class="token operator">></span><span class="token punctuation">(</span>CurViewer<span class="token punctuation">.</span>InViewer<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 50% throttling of PlayerStates.</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">bool</span> bReplicatePS <span class="token operator">=</span> <span class="token punctuation">(</span>Params<span class="token punctuation">.</span>ConnectionManager<span class="token punctuation">.</span>ConnectionOrderNum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>Params<span class="token punctuation">.</span>ReplicationFrameNum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bReplicatePS<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>APlayerState<span class="token operator">*</span> PS <span class="token operator">=</span> PC<span class="token operator">-></span>PlayerState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bInitializedPlayerState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>bInitializedPlayerState <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>FConnectionReplicationActorInfo<span class="token operator">&amp;</span> ConnectionActorInfo <span class="token operator">=</span> Params<span class="token punctuation">.</span>ConnectionManager<span class="token punctuation">.</span>ActorInfoMap<span class="token punctuation">.</span><span class="token function">FindOrAdd</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>ConnectionActorInfo<span class="token punctuation">.</span>ReplicationPeriodFrame <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>ReplicationActorList<span class="token punctuation">.</span><span class="token function">ConditionalAdd</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>FCachedAlwaysRelevantActorInfo<span class="token operator">&amp;</span> LastData <span class="token operator">=</span> PastRelevantActorMap<span class="token punctuation">.</span><span class="token function">FindOrAdd</span><span class="token punctuation">(</span>CurViewer<span class="token punctuation">.</span>Connection<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ALyraCharacter<span class="token operator">*</span> Pawn <span class="token operator">=</span> Cast<span class="token operator">&lt;</span>ALyraCharacter<span class="token operator">></span><span class="token punctuation">(</span>PC<span class="token operator">-></span><span class="token function">GetPawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">UpdateCachedRelevantActor</span><span class="token punctuation">(</span>Params<span class="token punctuation">,</span> Pawn<span class="token punctuation">,</span> LastData<span class="token punctuation">.</span>LastViewer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Pawn <span class="token operator">!=</span> CurViewer<span class="token punctuation">.</span>ViewTarget<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>ReplicationActorList<span class="token punctuation">.</span><span class="token function">ConditionalAdd</span><span class="token punctuation">(</span>Pawn<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ALyraCharacter<span class="token operator">*</span> ViewTargetPawn <span class="token operator">=</span> Cast<span class="token operator">&lt;</span>ALyraCharacter<span class="token operator">></span><span class="token punctuation">(</span>CurViewer<span class="token punctuation">.</span>ViewTarget<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">UpdateCachedRelevantActor</span><span class="token punctuation">(</span>Params<span class="token punctuation">,</span> ViewTargetPawn<span class="token punctuation">,</span> LastData<span class="token punctuation">.</span>LastViewTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// 这里就是打包流式关卡中永远可见的对象。 </span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">// 主要是基于 Connection 对于流式关卡的可见性以及流式关卡本身是否处于 Dormany 状态来判断。</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">CleanupCachedRelevantActors</span><span class="token punctuation">(</span>PastRelevantActorMap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>Params<span class="token punctuation">.</span>OutGatheredReplicationLists<span class="token punctuation">.</span><span class="token function">AddReplicationActorList</span><span class="token punctuation">(</span>ReplicationActorList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>FPerConnectionActorInfoMap<span class="token operator">&amp;</span> ConnectionActorInfoMap <span class="token operator">=</span> Params<span class="token punctuation">.</span>ConnectionManager<span class="token punctuation">.</span>ActorInfoMap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>TMap<span class="token operator">&lt;</span>FName<span class="token punctuation">,</span> FActorRepListRefView<span class="token operator">></span><span class="token operator">&amp;</span> AlwaysRelevantStreamingLevelActors <span class="token operator">=</span> LyraGraph<span class="token operator">-></span>AlwaysRelevantStreamingLevelActors<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 Idx<span class="token operator">=</span>AlwaysRelevantStreamingLevelsNeedingReplication<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> Idx <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>Idx<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">const</span> FName<span class="token operator">&amp;</span> StreamingLevel <span class="token operator">=</span> AlwaysRelevantStreamingLevelsNeedingReplication<span class="token punctuation">[</span>Idx<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>FActorRepListRefView<span class="token operator">*</span> Ptr <span class="token operator">=</span> AlwaysRelevantStreamingLevelActors<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>StreamingLevel<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>AlwaysRelevantStreamingLevelsNeedingReplication<span class="token punctuation">.</span><span class="token function">RemoveAtSwap</span><span class="token punctuation">(</span>Idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>FActorRepListRefView<span class="token operator">&amp;</span> RepList <span class="token operator">=</span> <span class="token operator">*</span>Ptr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>RepList<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">bool</span> bAllDormant <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>FActorRepListType Actor <span class="token operator">:</span> RepList<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>FConnectionReplicationActorInfo<span class="token operator">&amp;</span> ConnectionActorInfo <span class="token operator">=</span> ConnectionActorInfoMap<span class="token punctuation">.</span><span class="token function">FindOrAdd</span><span class="token punctuation">(</span>Actor<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ConnectionActorInfo<span class="token punctuation">.</span>bDormantOnConnection <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>bAllDormant <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bAllDormant<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>AlwaysRelevantStreamingLevelsNeedingReplication<span class="token punctuation">.</span><span class="token function">RemoveAtSwap</span><span class="token punctuation">(</span>Idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>Params<span class="token punctuation">.</span>OutGatheredReplicationLists<span class="token punctuation">.</span><span class="token function">AddReplicationActorList</span><span class="token punctuation">(</span>RepList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="ulyrareplicationgraphnode_playerstatefrequencylimiter"><a class="anchor" href="#ulyrareplicationgraphnode_playerstatefrequencylimiter">#</a> ULyraReplicationGraphNode_PlayerStateFrequencyLimiter</h3><p>功能大致是为了做 PlayerState 的分帧同步，不过实现上比较糙，这里简单看一下就好：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 每次同步之前重建一下同步列表，同步列表时以每两个 PlayerState 为单位组成的</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">ULyraReplicationGraphNode_PlayerStateFrequencyLimiter</span><span class="token operator">::</span><span class="token function">PrepareForReplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ReplicationActorLists<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>ForceNetUpdateReplicationActorList<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>ReplicationActorLists<span class="token punctuation">.</span><span class="token function">AddDefaulted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>FActorRepListRefView<span class="token operator">*</span> CurrentList <span class="token operator">=</span> <span class="token operator">&amp;</span>ReplicationActorLists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>TActorIterator<span class="token operator">&lt;</span>APlayerState<span class="token operator">></span> <span class="token function">It</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>APlayerState<span class="token operator">*</span> PS <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsActorValidForReplicationGather</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>CurrentList<span class="token operator">-></span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> TargetActorsPerFrame<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ReplicationActorLists<span class="token punctuation">.</span><span class="token function">AddDefaulted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>CurrentList <span class="token operator">=</span> <span class="token operator">&amp;</span>ReplicationActorLists<span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>CurrentList<span class="token operator">-></span><span class="token function">Add</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 收集同步对象的时候，从列表里面通过取余的方式抽取其中一个列表内的两个 PlayerState 进行同步</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">ULyraReplicationGraphNode_PlayerStateFrequencyLimiter</span><span class="token operator">::</span><span class="token function">GatherActorListsForConnection</span><span class="token punctuation">(</span><span class="token keyword">const</span> FConnectionGatherActorListParameters<span class="token operator">&amp;</span> Params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">const</span> int32 ListIdx <span class="token operator">=</span> Params<span class="token punctuation">.</span>ReplicationFrameNum <span class="token operator">%</span> ReplicationActorLists<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>Params<span class="token punctuation">.</span>OutGatheredReplicationLists<span class="token punctuation">.</span><span class="token function">AddReplicationActorList</span><span class="token punctuation">(</span>ReplicationActorLists<span class="token punctuation">[</span>ListIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ForceNetUpdateReplicationActorList<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>Params<span class="token punctuation">.</span>OutGatheredReplicationLists<span class="token punctuation">.</span><span class="token function">AddReplicationActorList</span><span class="token punctuation">(</span>ForceNetUpdateReplicationActorList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="性能设计问题"><a class="anchor" href="#性能设计问题">#</a> 性能 &amp;&amp; 设计问题</h2><p>整体看下来，感觉 ReplicationGraph 有些地方实现还是蛮糟糕的：</p><h3 id="各种策略存在强依赖关系"><a class="anchor" href="#各种策略存在强依赖关系">#</a> 各种策略存在强依赖关系</h3><p>ReplicationGraph 虽然看起来足够灵活，但实际上并非如此，每个策略都必须应用在某几个固定场景，虽然提供了灵活的搭配能力，但实际上可搭配点不多。</p><ul><li>UReplicationGraphNode_GridSpatialization2D 通常需要作为 GlobalNode 被使用，如果基于连接的划分，性能开销是不可估量的。因此很难针对连接来定制化同步网格的大小。</li><li>UReplicationGraphNode_GridSpatialization2D 中的 UReplicationGraphNode_GridCell 完全依赖 UReplicationGraphNode_DormancyNode 的实现。这点上不能单纯移除 UReplicationGraphNode_DormancyNode  来解决，难以拆解意味着 DormancyNode 的应用场景非常局限。</li><li>UReplicationGraphNode_GridCell 本身就可有很多个，每个里面都需要维护一个 DormancyNode 和 N 个 ConnectionDormancyNode，数量可能过于庞大。</li><li>UReplicationGraphNode_TearOff_ForConnection 也是内嵌在实现里的，设计上强绑定在 GraphConnection 中，基于全局的擦除还需要自己实现，而且功能上和 DormancyNode 有点冲突。</li><li>ReplicationGraph 内部定义了很多不相干的数据，如： <strong>PrevDormantActorListPerNode</strong>、<strong>NodesVisibleCells</strong>。这些实际上是用于 GridSpatialization2D 和 DormancyNode 的，等于是变相的把这两个节点和框架做了捆绑。</li></ul><h3 id="dormancy-实现很糟糕"><a class="anchor" href="#dormancy-实现很糟糕">#</a> Dormancy 实现很糟糕</h3><p>直觉上应该是 DormancyNode 管理多个 ConnectionDormancyNode。每个 ConnectionDormancyNode 记录自身的休眠节点。对于 GridSpatialization2D 策略下，需要记录每个 Cell 的休眠节点，看起来才比较合理。现在的设计上是：每个 Cell 包含一个 DormancyNode，每个 DormancyNode  管理多个 ConnectionDormancyNode。</p><p>实际上阅读代码过程中其他 GraphNode 的注释中也多次，不得不因为 DormancyNode 而书写一些丑陋的代码，并强调 Dormancy 应该重写了。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231117231615916.png" alt="image-20231117231615916" /></p><blockquote><p>这仅仅是个人观点，肯定也有很多考虑不周的地方（疯狂叠甲）</p></blockquote><h3 id="各种-array-的查询很糟糕"><a class="anchor" href="#各种-array-的查询很糟糕">#</a> 各种 Array 的查询很糟糕</h3><p>能够明显的感觉到，整个 ReplicationGraph 框架内使用了大量的 Array 结构。最明显的就是 <strong>FConnectionGatherActorListParameters</strong> 以及 <strong>UReplicationGraphNode_ActorList</strong></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231117232040541.png" alt="image-20231117232040541" /></p><p>带来的性能开销是可以预见的：几乎所有的增删改查操作都需要做遍历，但是 Array 的遍历查询太慢了。</p><h3 id="面对收集结果的去重问题很糟糕"><a class="anchor" href="#面对收集结果的去重问题很糟糕">#</a> 面对收集结果的去重问题很糟糕</h3><p>目前看下来去重逻辑可能只在最终需要同步的时候会校验上次的同步帧。内部实际上 GraphNode 没有对 Actor 的独占性做任何保证，换句话说，任何 Actor 都可能同时存在于多个 GraphNode，这取决于代码写法的合理性。稍不留意就可能导致一个对象被收集多次从而带来额外的性能开销（例如在某个 ConnectionNode 中注册了多个 GraphNode，并且同时会调用 AddNetworkActor）。而且这些问题的暴露和查找可能会比较耗时。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>最后做个总结，就目前的 ReplicationGraph 框架来看，其提供的功能对于大部分项目来说，已经够用了。有基于网格的拆分、休眠、分帧等优化。虽然提供了非常多的优化方案，但框架底层确实存在很多不完善的点有待解决，想要用好还是比较考验项目自身设计的。但 ReplicationGraph 也提供了很多关于同步的思路，例如通过图的方式来规划同步策略，引入 Dormancy、TearOff、DynamicSpatialFrequency 等优化策略，最后附上一张 ReplicationGraph 的全局类图，本篇讲解到此也就结束了：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/ReplicationGraph%E6%80%BB.png" alt="ReplicationGraph总" /></p><h2 id="参考文档"><a class="anchor" href="#参考文档">#</a> 参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9uYXNobmllLmdpdGh1Yi5pby9ub25lLzIwMTkvMDgvMDUvVUUtcmVwbGljYXRpb24tZ3JhcGguaHRtbA==">https://nashnie.github.io/none/2019/08/05/UE-replication-graph.html</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-replicationgraph-篇&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-replicationgraph-篇&quot;&gt;#&lt;/a&gt; Unreal Replicati</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="ReplicationGraph" scheme="https://hakuya.me/tags/ReplicationGraph/"/>
    
  </entry>
  
  <entry>
    <title>Unreal RPC</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20RPC/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20RPC/</id>
    <published>2023-09-07T08:01:00.000Z</published>
    <updated>2023-10-10T07:25:19.898Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"></div><h1 id="unreal-rpc"><a class="anchor" href="#unreal-rpc">#</a> Unreal RPC</h1><p>RPC 在 Unreal 中被广泛运用，是除了 Replication 之外唯二的数据传输方式（另一个是手动压解的收发包模式）。</p><p>RPC（Remote Procedure Call）远程过程调用，简单来说就是像执行本地函数一样的调用远程服务接口，简化调用编码复杂度，那么在 Unreal 中具体是如何实现的呢？</p><h2 id="rpc-函数定义"><a class="anchor" href="#rpc-函数定义">#</a> RPC 函数定义</h2><p>这里以  <code>ServerSetReplicatedTargetData</code>  函数为例，详细了解一下 Unreal 中关于 RPC 的定义：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> reliable<span class="token punctuation">,</span> WithValidation<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ServerSetReplicatedTargetData</span><span class="token punctuation">(</span>FGameplayAbilitySpecHandle AbilityHandle<span class="token punctuation">,</span> FPredictionKey AbilityOriginalPredictionKey<span class="token punctuation">,</span> <span class="token keyword">const</span> FGameplayAbilityTargetDataHandle<span class="token operator">&amp;</span> ReplicatedTargetDataHandle<span class="token punctuation">,</span> FGameplayTag ApplicationTag<span class="token punctuation">,</span> FPredictionKey CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>在类声明中，使用  <code>UFUNCTION</code>  宏声明 RPC 函数，并使用  <code>Server</code> 、 <code>Client</code>  或  <code>NetMulticast</code>  关键字指定 RPC 类型。</p><ul><li><code>Server</code> ：由客户端调用，但在服务器上执行的函数。</li><li><code>Client</code> ：由服务器调用，但在特定客户端上执行的函数。</li><li><code>NetMulticast</code> ：由服务器调用，并在所有连接的客户端上执行的函数。</li></ul><p>通过 UHT 生成后的函数定义如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>GAMEPLAYABILITIES_API UScriptStruct<span class="token operator">*</span> <span class="token function">Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// -------------------------- execFunction --------------------------</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>UAbilitySystemComponent<span class="token operator">::</span>execServerSetReplicatedTargetData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FGameplayAbilitySpecHandle<span class="token punctuation">,</span>Z_Param_AbilityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FPredictionKey<span class="token punctuation">,</span>Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FGameplayAbilityTargetDataHandle<span class="token punctuation">,</span>Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FGameplayTag<span class="token punctuation">,</span>Z_Param_ApplicationTag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FPredictionKey<span class="token punctuation">,</span>Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    P_FINISH<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    P_NATIVE_BEGIN<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>P_THIS<span class="token operator">-></span><span class="token function">ServerSetReplicatedTargetData_Validate</span><span class="token punctuation">(</span>Z_Param_AbilityHandle<span class="token punctuation">,</span>Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">,</span>Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">,</span>Z_Param_ApplicationTag<span class="token punctuation">,</span>Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token function">RPC_ValidateFailed</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"ServerSetReplicatedTargetData_Validate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    P_THIS<span class="token operator">-></span><span class="token function">ServerSetReplicatedTargetData_Implementation</span><span class="token punctuation">(</span>Z_Param_AbilityHandle<span class="token punctuation">,</span>Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">,</span>Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">,</span>Z_Param_ApplicationTag<span class="token punctuation">,</span>Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    P_NATIVE_END<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    FGameplayAbilitySpecHandle AbilityHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    FPredictionKey AbilityOriginalPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    FGameplayAbilityTargetDataHandle ReplicatedTargetDataHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    FGameplayTag ApplicationTag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    FPredictionKey CurrentPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// -------------------------- Function --------------------------</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">static</span> FName NAME_UAbilitySystemComponent_ServerSetReplicatedTargetData <span class="token operator">=</span> <span class="token function">FName</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"ServerSetReplicatedTargetData"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UAbilitySystemComponent</span><span class="token operator">::</span><span class="token function">ServerSetReplicatedTargetData</span><span class="token punctuation">(</span>FGameplayAbilitySpecHandle AbilityHandle<span class="token punctuation">,</span> FPredictionKey AbilityOriginalPredictionKey<span class="token punctuation">,</span> FGameplayAbilityTargetDataHandle <span class="token keyword">const</span><span class="token operator">&amp;</span> ReplicatedTargetDataHandle<span class="token punctuation">,</span> FGameplayTag ApplicationTag<span class="token punctuation">,</span> FPredictionKey CurrentPredictionKey<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms Parms<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    Parms<span class="token punctuation">.</span>AbilityHandle<span class="token operator">=</span>AbilityHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    Parms<span class="token punctuation">.</span>AbilityOriginalPredictionKey<span class="token operator">=</span>AbilityOriginalPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    Parms<span class="token punctuation">.</span>ReplicatedTargetDataHandle<span class="token operator">=</span>ReplicatedTargetDataHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    Parms<span class="token punctuation">.</span>ApplicationTag<span class="token operator">=</span>ApplicationTag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    Parms<span class="token punctuation">.</span>CurrentPredictionKey<span class="token operator">=</span>CurrentPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token function">ProcessEvent</span><span class="token punctuation">(</span><span class="token function">FindFunctionChecked</span><span class="token punctuation">(</span>NAME_UAbilitySystemComponent_ServerSetReplicatedTargetData<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// 把函数定义注册到 UAbilitySystemComponent 类里</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UAbilitySystemComponent</span><span class="token operator">::</span><span class="token function">StaticRegisterNativesUAbilitySystemComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    UClass<span class="token operator">*</span> Class <span class="token operator">=</span> <span class="token class-name">UAbilitySystemComponent</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> FNameNativePtrPair Funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token string">"ServerSetReplicatedTargetData"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>UAbilitySystemComponent<span class="token operator">::</span>execServerSetReplicatedTargetData <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token class-name">FNativeFunctionRegistrar</span><span class="token operator">::</span><span class="token function">RegisterFunctions</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> Funcs<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// -------------------------- Function MetaData --------------------------</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams NewProp_AbilityHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams NewProp_AbilityOriginalPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FMetaDataPairParam NewProp_ReplicatedTargetDataHandle_MetaData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams NewProp_ReplicatedTargetDataHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams NewProp_ApplicationTag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams NewProp_CurrentPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FPropertyParamsBase<span class="token operator">*</span> <span class="token keyword">const</span> PropPointers<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FMetaDataPairParam Function_MetaDataParams<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FFunctionParams FuncParams<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_AbilityHandle <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"AbilityHandle"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>EPropertyFlags<span class="token punctuation">)</span><span class="token number">0x0010000000000080</span><span class="token punctuation">,</span> UECodeGen_Private<span class="token operator">::</span>EPropertyGenFlags<span class="token operator">::</span>Struct<span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms<span class="token punctuation">,</span> AbilityHandle<span class="token punctuation">)</span><span class="token punctuation">,</span> Z_Construct_UScriptStruct_FGameplayAbilitySpecHandle<span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 3562347300</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_AbilityOriginalPredictionKey <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"AbilityOriginalPredictionKey"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>EPropertyFlags<span class="token punctuation">)</span><span class="token number">0x0010000000000080</span><span class="token punctuation">,</span> UECodeGen_Private<span class="token operator">::</span>EPropertyGenFlags<span class="token operator">::</span>Struct<span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms<span class="token punctuation">,</span> AbilityOriginalPredictionKey<span class="token punctuation">)</span><span class="token punctuation">,</span> Z_Construct_UScriptStruct_FPredictionKey<span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 2453680625</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FMetaDataPairParam Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_ReplicatedTargetDataHandle_MetaData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token string">"NativeConst"</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_ReplicatedTargetDataHandle <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"ReplicatedTargetDataHandle"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>EPropertyFlags<span class="token punctuation">)</span><span class="token number">0x0010000008000082</span><span class="token punctuation">,</span> UECodeGen_Private<span class="token operator">::</span>EPropertyGenFlags<span class="token operator">::</span>Struct<span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms<span class="token punctuation">,</span> ReplicatedTargetDataHandle<span class="token punctuation">)</span><span class="token punctuation">,</span> Z_Construct_UScriptStruct_FGameplayAbilityTargetDataHandle<span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_ReplicatedTargetDataHandle_MetaData<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_ReplicatedTargetDataHandle_MetaData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 3993235140</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_ApplicationTag <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"ApplicationTag"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>EPropertyFlags<span class="token punctuation">)</span><span class="token number">0x0010000000000080</span><span class="token punctuation">,</span> UECodeGen_Private<span class="token operator">::</span>EPropertyGenFlags<span class="token operator">::</span>Struct<span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms<span class="token punctuation">,</span> ApplicationTag<span class="token punctuation">)</span><span class="token punctuation">,</span> Z_Construct_UScriptStruct_FGameplayTag<span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 1225434376</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FStructPropertyParams Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_CurrentPredictionKey <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"CurrentPredictionKey"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>EPropertyFlags<span class="token punctuation">)</span><span class="token number">0x0010000000000080</span><span class="token punctuation">,</span> UECodeGen_Private<span class="token operator">::</span>EPropertyGenFlags<span class="token operator">::</span>Struct<span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token function">STRUCT_OFFSET</span><span class="token punctuation">(</span>AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms<span class="token punctuation">,</span> CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">,</span> Z_Construct_UScriptStruct_FPredictionKey<span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 2453680625</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FPropertyParamsBase<span class="token operator">*</span> <span class="token keyword">const</span> Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>PropPointers<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FPropertyParamsBase<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_AbilityHandle<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FPropertyParamsBase<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_AbilityOriginalPredictionKey<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FPropertyParamsBase<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_ReplicatedTargetDataHandle<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FPropertyParamsBase<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_ApplicationTag<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FPropertyParamsBase<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>NewProp_CurrentPredictionKey<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FMetaDataPairParam Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>Function_MetaDataParams<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token string">"Comment"</span><span class="token punctuation">,</span> <span class="token string">"/** Replicates targeting data to the server */"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token string">"ModuleRelativePath"</span><span class="token punctuation">,</span> <span class="token string">"Public/AbilitySystemComponent.h"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token string">"ToolTip"</span><span class="token punctuation">,</span> <span class="token string">"Replicates targeting data to the server"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token keyword">const</span> UECodeGen_Private<span class="token operator">::</span>FFunctionParams Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>FuncParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Z_Construct_UClass_UAbilitySystemComponent<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token string">"ServerSetReplicatedTargetData"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>AbilitySystemComponent_eventServerSetReplicatedTargetData_Parms<span class="token punctuation">)</span><span class="token punctuation">,</span> Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>PropPointers<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>PropPointers<span class="token punctuation">)</span><span class="token punctuation">,</span> RF_Public<span class="token operator">|</span>RF_Transient<span class="token operator">|</span>RF_MarkAsNative<span class="token punctuation">,</span> <span class="token punctuation">(</span>EFunctionFlags<span class="token punctuation">)</span><span class="token number">0x80220CC0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>Function_MetaDataParams<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>Function_MetaDataParams<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre>UFunction<span class="token operator">*</span> <span class="token function">Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token keyword">static</span> UFunction<span class="token operator">*</span> ReturnFunction <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ReturnFunction<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        <span class="token class-name">UECodeGen_Private</span><span class="token operator">::</span><span class="token function">ConstructUFunction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ReturnFunction<span class="token punctuation">,</span> Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData_Statics<span class="token operator">::</span>FuncParams<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token keyword">return</span> ReturnFunction<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token keyword">const</span> FClassFunctionLinkInfo Z_Construct_UClass_UAbilitySystemComponent_Statics<span class="token operator">::</span>FuncInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData<span class="token punctuation">,</span> <span class="token string">"ServerSetReplicatedTargetData"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 2588216155</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>生成代码大致可以分为三个部分内容：</p><ul><li>ServerSetReplicatedTargetData 函数的 MetaData，其中包括描述函数参数的  <code>UECodeGen_Private::FStructPropertyParams</code>  以及函数转为 <strong>UFunction</strong> 的构造函数  <code>Z_Construct_UFunction_UAbilitySystemComponent_ServerSetReplicatedTargetData</code> ，之后会在  <code>Z_Construct_UClass_UAbilitySystemComponent_Statics</code>  类中注册这些 UFunction 工厂函数，在 <strong>UClass</strong> 的创建的时候把这些 <strong>UFunction</strong> 也一并创建，然后就可以通过反射进行函数查找了。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FStructPropertyParams</span> <span class="token comment">// : FPropertyParamsBaseWithOffset</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>      NameUTF8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>         RepNotifyFuncUTF8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    EPropertyFlags      PropertyFlags<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    EPropertyGenFlags   Flags<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    EObjectFlags     ObjectFlags<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    int32            ArrayDim<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    SetterFuncPtr  SetterFunc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    GetterFuncPtr  GetterFunc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    int32            Offset<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    UScriptStruct<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>ScriptStructFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> FMetaDataPairParam<span class="token operator">*</span>           MetaDataArray<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>int32                               NumMetaData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>ServerSetReplicatedTargetData 函数本身，这个函数除了打包参数以外什么都不会去做，而是通过 <strong>ProcessEvent</strong> 统一调用函数执行，函数查询时通过函数名 &quot;ServerSetReplicatedTargetData&quot;。<strong>ProcessEvent</strong> 不仅仅会调用函数，还会根据函数的类型、进程的 NetMode、角色的权威性、决定在哪里（本地 or 远程服务器）调用。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230907103825299.png" alt="image-20230907103825299" /></p><ul><li>execServerSetReplicatedTargetData 函数，该函数内会调用两个固定接口 「<strong>xxx_Validate</strong> 和 <strong>xxx_Implementation</strong>」。远程调用的时候，会通过 RPC 获取到函数名 &quot;ServerSetReplicatedTargetData&quot;，然后通过  <code>Object-&gt;FindFunction(FunctionName)</code>  查找到该函数，execServerSetReplicatedTargetData 的注册是在 StaticRegisterNativesUAbilitySystemComponent 是进行的。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230907105035027.png" alt="image-20230907105035027" /></p><h3 id="execserversetreplicatedtargetdata-展开"><a class="anchor" href="#execserversetreplicatedtargetdata-展开">#</a> execServerSetReplicatedTargetData 展开</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 展开前</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DEFINE_FUNCTION</span><span class="token punctuation">(</span>UAbilitySystemComponent<span class="token operator">::</span>execServerSetReplicatedTargetData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FGameplayAbilitySpecHandle<span class="token punctuation">,</span>Z_Param_AbilityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FPredictionKey<span class="token punctuation">,</span>Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FGameplayAbilityTargetDataHandle<span class="token punctuation">,</span>Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FGameplayTag<span class="token punctuation">,</span>Z_Param_ApplicationTag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">P_GET_STRUCT</span><span class="token punctuation">(</span>FPredictionKey<span class="token punctuation">,</span>Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    P_FINISH<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    P_NATIVE_BEGIN<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>P_THIS<span class="token operator">-></span><span class="token function">ServerSetReplicatedTargetData_Validate</span><span class="token punctuation">(</span>Z_Param_AbilityHandle<span class="token punctuation">,</span>Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">,</span>Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">,</span>Z_Param_ApplicationTag<span class="token punctuation">,</span>Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">RPC_ValidateFailed</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"ServerSetReplicatedTargetData_Validate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    P_THIS<span class="token operator">-></span><span class="token function">ServerSetReplicatedTargetData_Implementation</span><span class="token punctuation">(</span>Z_Param_AbilityHandle<span class="token punctuation">,</span>Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">,</span>Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">,</span>Z_Param_ApplicationTag<span class="token punctuation">,</span>Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    P_NATIVE_END<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 展开后</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UAbilitySystemComponent</span><span class="token operator">::</span><span class="token function">execServerSetReplicatedTargetData</span><span class="token punctuation">(</span>UObject<span class="token operator">*</span> Context<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                                                                FFrame<span class="token operator">&amp;</span> Stack<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                                                                <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">const</span> Z_Param__Result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    FGameplayAbilitySpecHandle Z_Param_AbilityHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    Stack<span class="token punctuation">.</span>StepCompiledIn<span class="token operator">&lt;</span>FStructProperty<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Z_Param_AbilityHandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    FPredictionKey Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    Stack<span class="token punctuation">.</span>StepCompiledIn<span class="token operator">&lt;</span>FStructProperty<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    FGameplayAbilityTargetDataHandle Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    Stack<span class="token punctuation">.</span>StepCompiledIn<span class="token operator">&lt;</span>FStructProperty<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    FGameplayTag Z_Param_ApplicationTag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    Stack<span class="token punctuation">.</span>StepCompiledIn<span class="token operator">&lt;</span>FStructProperty<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Z_Param_ApplicationTag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>    FPredictionKey Z_Param_CurrentPredictionKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    Stack<span class="token punctuation">.</span>StepCompiledIn<span class="token operator">&lt;</span>FStructProperty<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>    Stack<span class="token punctuation">.</span>Code <span class="token operator">+=</span> <span class="token operator">!</span><span class="token operator">!</span>Stack<span class="token punctuation">.</span>Code<span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        FBlueprintEventTimer<span class="token operator">::</span>FScopedNativeTimer ScopedNativeCallTimer<span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ThisClass<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                 <span class="token operator">-></span><span class="token function">ServerSetReplicatedTargetData_Validate</span><span class="token punctuation">(</span>Z_Param_AbilityHandle<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                                                          Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                                                          Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                                                          Z_Param_ApplicationTag<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                                                          Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token function">RPC_ValidateFailed</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"ServerSetReplicatedTargetData_Validate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ThisClass<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token operator">-></span><span class="token function">ServerSetReplicatedTargetData_Implementation</span><span class="token punctuation">(</span>Z_Param_AbilityHandle<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                                                           Z_Param_AbilityOriginalPredictionKey<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                                                           Z_Param_ReplicatedTargetDataHandle<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                                                           Z_Param_ApplicationTag<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                                                           Z_Param_CurrentPredictionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>展开后的  <code>execServerSetReplicatedTargetData</code>  会执行 <strong>ServerSetReplicatedTargetData_Validate</strong> 和 <strong>ServerSetReplicatedTargetData_Implementation</strong>。</p><h2 id="rpc-bunch-包结构"><a class="anchor" href="#rpc-bunch-包结构">#</a> Rpc Bunch 包结构</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230907171443816.png" alt="image-20230907171443816" width="600px" /></p><ul><li><strong>FNetworkGUID</strong> 标识调用对象</li><li><strong>FieldNetIndex</strong> 标识调用函数</li></ul><h2 id="rpc-调用链路图"><a class="anchor" href="#rpc-调用链路图">#</a> RPC 调用链路图</h2><blockquote><p>Client &lt;-&gt; DS</p></blockquote><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231010152253641.png" alt="image-20231010152253641" width="1200px" /></p><blockquote><p>ListenServer &amp;&amp; Stalone</p></blockquote><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231010152455642.png" alt="image-20231010152455642" width="600px" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-rpc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-rpc&quot;&gt;#&lt;/a&gt; Unreal RPC&lt;/h1&gt;
&lt;p&gt;RPC 在 Unreal 中被广泛运用，是除了 Rep</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE5" scheme="https://hakuya.me/tags/UE5/"/>
    
    <category term="RPC" scheme="https://hakuya.me/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>Unreal 握手流程</title>
    <link href="https://hakuya.me/learning/unreal/Unreal%20%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B/"/>
    <id>https://hakuya.me/learning/unreal/Unreal%20%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B/</id>
    <published>2023-08-03T08:19:00.000Z</published>
    <updated>2023-08-22T08:03:15.145Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本篇内容和源码均参考 UE5。</p></div><h1 id="unreal-握手登录流程"><a class="anchor" href="#unreal-握手登录流程">#</a> Unreal 握手 &amp;&amp; 登录流程</h1><h2 id="握手包结构"><a class="anchor" href="#握手包结构">#</a> 握手包结构</h2><p>先来了解一下握手包的结构：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230803102753308.png" alt="image-20230803102753308" width="1000px" /></p><p>主要由 5 个部分组成：</p><ul><li>MagicHeader：暂未使用的空包头。</li><li>SessionID &amp;&amp; ClientID：历史会话 ID（用于重连）及客户端 ID。</li><li>包体：握手包的数据块，其内又可以分为三个部分：<ul><li>基础数据块：主要包含基本的包信息如包类型、客户端版本、客户端包编号等。</li><li>密钥 ID：加密使用的服务器密钥编号。</li><li>包时间戳和 Cookie 信息：Cookie 是通过密钥 ID 对应的密钥对时间戳 + 客户端 ip 端口计算得到的密文。</li></ul></li><li>随机数据：单纯填充用，可以让包大小不是恒定。</li><li>终止符：包结束位，如果整个包不是 8 bit 整数倍，还会在其末尾填充至 8bit 整数倍。</li></ul><h2 id="四次握手流程"><a class="anchor" href="#四次握手流程">#</a> 四次握手流程</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/ue-%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B.drawio-16910304805123.png" alt="ue-握手流程.drawio" /></p><p>整个握手流程主要分为四个步骤：</p><ul><li>Init</li><li>Challenge</li><li>Response</li><li>Ack</li></ul><h3 id="init-流程"><a class="anchor" href="#init-流程">#</a> Init 流程</h3><p>客户端在触发 <strong>UEngine::Browse</strong> 打开地图文件的时候会初始化对应的 Driver 对象，并尝试和服务器建立无状态链接。为了容忍丢包会进行 1s / 次 的重复发包，如果超过一定时间仍然未收到回包的情况下则结束握手流程。</p><h3 id="challenge-流程"><a class="anchor" href="#challenge-流程">#</a> Challenge 流程</h3><p>服务器收到 InitPacket 后，服务器会根据当前正在生效的密钥用时间戳 + 客户端 IP 端口进行加密，得到 Cookie 信息。并连同密钥 ID 和 Cookie 信息一起发送回客户端。由于服务器是<strong>无状态</strong>的，因此会多次处理客户的的 InitPacket。</p><h3 id="response-流程"><a class="anchor" href="#response-流程">#</a> Response 流程</h3><p>由于每个密钥的有效时间是 15 s，客户端收到 ChallengePacket 后，会检查 Cookie 的时效性（当前时间 - 上次发包时间），确认有效后会把服务器的密钥 ID 和 Cookie 信息留存起来，并再次发送回服务器，同时更新客户端连接状态由  UnInitialized → InitializedOnLocal 。</p><p>如果发现密钥失效，则会返回 Init 流程并重置客户端状态为 UnInitialized，并在 Tick 过程重新发送 InitPacket 。</p><p>由于服务器无状态，这里可能会接收到多个服务器的 Challenge 包，客户端都会进行处理，并保留最新的密钥 ID 和 Cookie 信息。并且为了容忍丢包会进行 1s / 次 的重复发包（使用最新的密钥 ID 和 Cookie 信息）</p><h3 id="ack-流程"><a class="anchor" href="#ack-流程">#</a> Ack 流程</h3><p>服务器收到 ResponsePacket 后，会先检查包的时效性，由于服务器存储了 2 个密钥（密钥 0 &amp;&amp; 密钥 1），每间隔 5 s 检查一次密钥有效性，密钥激活 15 s 后会被轮替，因此理论上一个密钥的激活时间最长为 20 s。当密钥失活后依旧会保留 15 s，并在 5 s 一次的检查中被清理，失活状态下的密钥依旧有效因此一个密钥最长有效时间为 40 s。</p><p>在确认密钥有效的情况下，根据密钥对 Cookie 进行校验比对。成功后服务器便认为客户端连接，又再次发回给客户端 Cookie 信息，密钥 ID 为 1 是默认值，该字段后面不会被用到。之后服务器会初始化一个客户端的 UNetConnect 对象，根据 Cookie 信息得到 2 个随机序列，一个用于客户端一个用于服务器。并且忽略后续的握手包。</p><p>客户端收到 AckPacket 后，同样会根据 Cookie 信息初始化客户端和服务器包序列，保留 Cookie 信息并设置连接状态由 InitializedOnLocal → Initialized ，至此整个握手流程完成，可以开始通讯。</p><h2 id="登录流程"><a class="anchor" href="#登录流程">#</a> 登录流程</h2><p>客户端收到 Ack Packet 后，就会进入登录流程，触发的方式是注册握手完成后的回调函数：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// ========================== 注册回调 ==========================</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UPendingNetGame</span><span class="token operator">::</span><span class="token function">InitNetDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>GDisallowNetworkTravel<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> NetDriver<span class="token operator">-></span><span class="token function">InitConnect</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> URL<span class="token punctuation">,</span> ConnectionError <span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ServerConn<span class="token operator">-></span>Handler<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ServerConn<span class="token operator">-></span>Handler<span class="token operator">-></span><span class="token function">BeginHandshaking</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">FPacketHandlerHandshakeComplete</span><span class="token operator">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>UPendingNetGame<span class="token operator">::</span>SendInitialJoin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">PacketHandler</span><span class="token operator">::</span><span class="token function">BeginHandshaking</span><span class="token punctuation">(</span>FPacketHandlerHandshakeComplete InHandshakeDel<span class="token comment">/*=FPacketHandlerHandshakeComplete()*/</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>bBeganHandshaking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>HandshakeCompleteDel <span class="token operator">=</span> InHandshakeDel<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// ========================== 握手完成后触发回调 ==========================</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">StatelessConnectHandlerComponent</span><span class="token operator">::</span><span class="token function">Incoming</span><span class="token punctuation">(</span>FBitReader<span class="token operator">&amp;</span> Packet<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">// 收到握手包</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>HandshakeData<span class="token punctuation">.</span>HandshakePacketType <span class="token operator">==</span> EHandshakePacketType<span class="token operator">::</span>Ack <span class="token operator">&amp;&amp;</span> HandshakeData<span class="token punctuation">.</span>Timestamp <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token function">Initialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">HandlerComponent</span><span class="token operator">::</span><span class="token function">Initialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>bInitialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>Handler<span class="token operator">-></span><span class="token function">HandlerComponentInitialized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">PacketHandler</span><span class="token operator">::</span><span class="token function">HandlerComponentInitialized</span><span class="token punctuation">(</span>HandlerComponent<span class="token operator">*</span> InComponent<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>State <span class="token operator">!=</span> Handler<span class="token operator">::</span>State<span class="token operator">::</span>Initialized<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bAllInitialized<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token function">HandlerInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">PacketHandler</span><span class="token operator">::</span><span class="token function">HandlerInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bBeganHandshaking<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>         <span class="token comment">// 执行回调</span></pre></td></tr><tr><td data-num="55"></td><td><pre>HandshakeCompleteDel<span class="token punctuation">.</span><span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>SendInitialJoin</strong> 最终会发送 Hello 消息给服务器：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UPendingNetGame</span><span class="token operator">::</span><span class="token function">SendInitialJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>NetDriver <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>UNetConnection<span class="token operator">*</span> ServerConn <span class="token operator">=</span> NetDriver<span class="token operator">-></span>ServerConnection<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ServerConn <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bEncryptionRequirementsFailure<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>EEngineNetworkRuntimeFeatures LocalNetworkFeatures <span class="token operator">=</span> NetDriver<span class="token operator">-></span><span class="token function">GetNetworkRuntimeFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">FNetControlMessage</span><span class="token operator">&lt;</span>NMT_Hello<span class="token operator">></span><span class="token operator">::</span><span class="token function">Send</span><span class="token punctuation">(</span>ServerConn<span class="token punctuation">,</span> IsLittleEndian<span class="token punctuation">,</span> LocalNetworkVersion<span class="token punctuation">,</span> EncryptionToken<span class="token punctuation">,</span> LocalNetworkFeatures<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>ServerConn<span class="token operator">-></span><span class="token function">FlushNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="hello-packet"><a class="anchor" href="#hello-packet">#</a> Hello Packet</h3><p><strong>FNetControlMessage&lt;NMT_Hello&gt;</strong> 在 Unreal 中是通过宏定义实现的：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span> Index<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token expression"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> NMT_</span><span class="token punctuation">##</span><span class="token expression">Name <span class="token operator">=</span> Index <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token expression"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">FNetControlMessage</span><span class="token operator">&lt;</span>Index<span class="token operator">></span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token expression"><span class="token keyword">static</span> uint8 <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token expression"><span class="token class-name">FNetControlMessageInfo</span><span class="token operator">::</span><span class="token function">SetName</span><span class="token punctuation">(</span>Index<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span>#Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token expression"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/** sends a message of this type on the specified connection's control channel \</pre></td></tr><tr><td data-num="12"></td><td><pre>* @note: const not used only because of the FArchive interface; the parameters are not modified \</pre></td></tr><tr><td data-num="13"></td><td><pre>*/</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token expression"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Send</span><span class="token punctuation">(</span>UNetConnection<span class="token operator">*</span> Conn<span class="token punctuation">,</span> ParamTypes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token expression"><span class="token keyword">static_assert</span><span class="token punctuation">(</span>Index <span class="token operator">&lt;</span> FNetControlMessageInfo<span class="token operator">::</span>MaxNames<span class="token punctuation">,</span> </span><span class="token string">"Control channel message must be a byte."</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token expression"><span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token operator">!</span>Conn<span class="token operator">-></span><span class="token function">IsA</span><span class="token punctuation">(</span><span class="token class-name">UChildConnection</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token comment">/** control channel messages can only be sent on the parent connection */</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>Closing<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token expression">FControlChannelOutBunch <span class="token function">Bunch</span><span class="token punctuation">(</span>Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token expression">uint8 MessageType <span class="token operator">=</span> Index<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token expression">Bunch <span class="token operator">&lt;&lt;</span> MessageType<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token expression"><span class="token class-name">FNetControlMessageInfo</span><span class="token operator">::</span><span class="token function">SendParams</span><span class="token punctuation">(</span>Bunch<span class="token punctuation">,</span> Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token expression">Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">SendBunch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Bunch<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">/** receives a message of this type from the passed in bunch */</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token expression"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token expression">UE_NODISCARD <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">Receive</span><span class="token punctuation">(</span>FInBunch<span class="token operator">&amp;</span> Bunch<span class="token punctuation">,</span> ParamTypes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token expression"><span class="token class-name">FNetControlMessageInfo</span><span class="token operator">::</span><span class="token function">ReceiveParams</span><span class="token punctuation">(</span>Bunch<span class="token punctuation">,</span> Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token expression"><span class="token keyword">return</span> <span class="token operator">!</span>Bunch<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">/** throws away a message of this type from the passed in bunch */</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Discard</span><span class="token punctuation">(</span>FInBunch<span class="token operator">&amp;</span> Bunch<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token expression">TTuple<span class="token operator">&lt;</span>__VA_ARGS__<span class="token operator">></span> Params<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token expression"><span class="token function">VisitTupleElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>Bunch<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> Param<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token expression">Bunch <span class="token operator">&lt;&lt;</span> Param<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token expression">Params<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Hello<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> uint8<span class="token punctuation">,</span> uint32<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> uint16<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>宏展开后长下面这个样子：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    NMT_Hello <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FNetControlMessage</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">static</span> uint8 <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">FNetControlMessageInfo</span><span class="token operator">::</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Send</span><span class="token punctuation">(</span>UNetConnection<span class="token operator">*</span> Conn<span class="token punctuation">,</span> ParamTypes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> FNetControlMessageInfo<span class="token operator">::</span>MaxNames<span class="token punctuation">,</span> <span class="token string">"Control channel message must be a byte."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token operator">!</span>Conn<span class="token operator">-></span><span class="token function">IsA</span><span class="token punctuation">(</span><span class="token class-name">UChildConnection</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>Closing<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            FControlChannelOutBunch <span class="token function">Bunch</span><span class="token punctuation">(</span>Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            uint8 MessageType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            Bunch <span class="token operator">&lt;&lt;</span> MessageType<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token class-name">FNetControlMessageInfo</span><span class="token operator">::</span><span class="token function">SendParams</span><span class="token punctuation">(</span>Bunch<span class="token punctuation">,</span> Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            Conn<span class="token operator">-></span>Channels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">SendBunch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Bunch<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="30"></td><td><pre>    UE_NODISCARD <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">Receive</span><span class="token punctuation">(</span>FInBunch<span class="token operator">&amp;</span> Bunch<span class="token punctuation">,</span> ParamTypes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token class-name">FNetControlMessageInfo</span><span class="token operator">::</span><span class="token function">ReceiveParams</span><span class="token punctuation">(</span>Bunch<span class="token punctuation">,</span> Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">!</span>Bunch<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Discard</span><span class="token punctuation">(</span>FInBunch<span class="token operator">&amp;</span> Bunch<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        TTuple<span class="token operator">&lt;</span>uint8<span class="token punctuation">,</span> uint32<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> uint16<span class="token operator">></span> Params<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token function">VisitTupleElements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>Bunch<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> Param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Bunch <span class="token operator">&lt;&lt;</span> Param<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Params<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>FNetControlMessageInfo::SendParams(Bunch, Params...);</code>  负责对参数进行打包，实现还是比较有意思的，用的模板的模式匹配 + 递归：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SendParams</span><span class="token punctuation">(</span>FControlChannelOutBunch<span class="token operator">&amp;</span> Bunch<span class="token punctuation">,</span> ParamTypes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">FirstParamType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SendParams</span><span class="token punctuation">(</span>FControlChannelOutBunch<span class="token operator">&amp;</span> Bunch<span class="token punctuation">,</span> FirstParamType<span class="token operator">&amp;</span> FirstParam<span class="token punctuation">,</span> ParamTypes<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    Bunch <span class="token operator">&lt;&lt;</span> FirstParam<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">SendParams</span><span class="token punctuation">(</span>Bunch<span class="token punctuation">,</span> Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="其他协议包定义"><a class="anchor" href="#其他协议包定义">#</a> 其他协议包定义：</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 【c2s.1】Hello</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Hello<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> uint8<span class="token punctuation">,</span> uint32<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> uint16<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 【s2c.1】Challenge </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Challenge<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> FString<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 【c2s.2】Login </span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Login<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> FString<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> FUniqueNetIdRepl<span class="token punctuation">,</span> FString<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 【s2c.2】Welcome </span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Welcome<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> FString<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> FString<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 【c2s.3】Netspeed </span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Netspeed<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> int32<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 【c2s.4】Join </span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">DEFINE_CONTROL_CHANNEL_MESSAGE</span><span class="token punctuation">(</span>Join<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="登录包定义"><a class="anchor" href="#登录包定义">#</a> 登录包定义</h3><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230816154635846.png" alt="image-20230816154635846" width="1000px" /></p><p>主要可以分成三个部分：</p><ul><li>PacketBaseInfo：里面主要包含包序列号、ACK 信息、网络抖动等信息。</li><li>BunchHeader：包含一些标志信息如创建 or 关闭 Channel、是否可靠、是否分包等。值得注意的是 FName 字段的打包规则比较特殊：由于 Unreal 内部会优化字符串，硬编码会通过一个全局字符表存储，然后直接通过编号索引来指代。</li><li>BunchData：BunchData 里就是各个业务的包了，在登录流程中前 8 bit 会被用来解析为 MessageType，后续的内容则根据业务自行处理压包和解包。</li></ul><h3 id="登录流程总览图"><a class="anchor" href="#登录流程总览图">#</a> 登录流程总览图</h3><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/ue-%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B.drawio-16921727696422.png" alt="ue-登录流程.drawio" /></p><p>整个登录流程会接着握手包的 Ack 继续执行。</p><ul><li>客户端会先发起 Hello 请求，里面可以选择携带相关的密文摘要信息。</li><li>服务器收到 Hello 包后，如果没有密文摘要信息，则直接回复 Challenge 包。</li><li>客户端收到 Challenge 包后，会发送 Login 包，并携带角色 ID 和 URL。</li><li>服务器收到 Login 包后，会发送 Welcome 包，并携带当前 World 的 PersistentLevelName 和 GameModeName。</li><li>客户端收到 Welcome 包后会同步给服务器当前的 NetSpeed。并根据 PersistentLevelName 加载地图、完成 World 的切换。</li><li>当客户端地图加载完毕后，会回复客户端 Join 包。</li><li>服务器收到 Join 包后会在地图内创建玩家并且同步各项内容。之后业务就可以正常基于网络交互通讯了。</li></ul><h3 id="加密通信"><a class="anchor" href="#加密通信">#</a> 加密通信</h3><p>Unreal 本身提供了三种加密：</p><ul><li>FAESHandlerComponent</li><li>FAESGCMHandlerComponent</li><li>FDTLSHandlerComponent</li></ul><p>这里以 LyraGame 中的 DTLS 为例进行简单介绍：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 加密结构</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FEncryptionData</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/** Encryption key */</span></pre></td></tr><tr><td data-num="5"></td><td><pre>TArray<span class="token operator">&lt;</span>uint8<span class="token operator">></span> Key<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">/** Encryption fingerprint */</span></pre></td></tr><tr><td data-num="7"></td><td><pre>TArray<span class="token operator">&lt;</span>uint8<span class="token operator">></span> Fingerprint<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/** Encryption identifier */</span></pre></td></tr><tr><td data-num="9"></td><td><pre>FString Identifier<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>加密开启流程在客户端发送 Hello 包之后（Hello 及 Hello 包之前都是明文传输） ：</p><ul><li>Hello 包可以携带一个  <code>EncryptionToken</code>  用来唯一标识一个连接。</li><li>服务器收到  <code>EncryptionToken</code>  后会调用  <code>XXXGameInstance::ReceivedNetworkEncryptionToken</code>  函数，为该标识生成一个独有的服务器证书 Cert（有效时长 4 小时）</li><li>证书生成完成后会发送  <code>EncryptionAck</code>  包，通知客户端服务器开启加密</li><li>客户端收到  <code>EncryptionAck</code>  包后会调用  <code>XXXGameInstance::ReceivedNetworkEncryptionAck</code>  同样设置客户端证书。</li><li>其中证书内的加密信息  <code>FEncryptionData</code>  内容如下：<ul><li><code>FEncryptionData::Key</code>  一般是通过  <code>AES256</code>  生成的密钥做对称加密。</li><li><code>FEncryptionData::Fingerprint</code>  需要从特定的安全服务器提取的指纹信息。</li><li><code>FEncryptionData::Identifier</code>  对应客户端的  <code>EncryptionToken</code> 。一般是用客户端的 UUID 作为  <code>EncryptionToken</code> 。</li></ul></li></ul><h4 id="加密解密"><a class="anchor" href="#加密解密">#</a> 加密解密</h4><p>上述的三种加密组件： <code>FAESHandlerComponent</code> 、 <code>FAESGCMHandlerComponent</code> 、 <code>FDTLSHandlerComponent</code>  可以注册到  <code>PacketHandler</code>  上。</p><ul><li>在  <code>FDTLSHandlerComponent::Incoming</code>  处理解密。</li><li>在  <code>FDTLSHandlerComponent::Outgoing</code>  处理加密。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230822145102872.png" alt="image-20230822145102872" /></p><p><code>FDTLSHandlerComponent</code>  会在原本包体的前面新增 3 个 bit 用来标识加密是否开启，是否为握手（加密的握手，非建立连接的握手），以及一个终止位。</p><h4 id="开启加密流程"><a class="anchor" href="#开启加密流程">#</a> 开启加密流程</h4><p>在 Config/DefaultEngine.ini 中新增配置：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[PacketHandlerComponents]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">; Options can be set in this section of DefaultEngine.ini to enable different types of network packet encruption plugins</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">EncryptionComponent</span><span class="token attr-value"><span class="token punctuation">=</span>DTLSHandlerComponent</span></pre></td></tr></table></figure><p>并且在 URL 中加入 <em>EncryptionToken</em> 后缀，这里方便测试直接修改了 Hello 包的默认值：</p><pre><code class="language-c++">void UPendingNetGame::SendInitialJoin()&#123;if (NetDriver != nullptr)&#123;UNetConnection* ServerConn = NetDriver-&gt;ServerConnection;if (ServerConn != nullptr)&#123;uint8 IsLittleEndian = uint8(PLATFORM_LITTLE_ENDIAN);check(IsLittleEndian == !!IsLittleEndian); // should only be one or zeroconst int32 AllowEncryption = CVarNetAllowEncryption.GetValueOnGameThread();FString EncryptionToken;if (AllowEncryption != 0)&#123;//EncryptionToken = URL.GetOption(TEXT(&quot;EncryptionToken=&quot;), TEXT(&quot;&quot;));              EncryptionToken = URL.GetOption(TEXT(&quot;EncryptionToken=&quot;), TEXT(&quot;1&quot;));&#125;        &#125;    &#125;&#125;</code></pre><p>然后就可以开始调试了，在  <code>FDTLSHandlerComponent::TickHandshake</code>  中会定时检查状态，并发送握手包。当状态为  <code>InternalState = EDTLSHandlerState::Encrypted</code>  时标识开始进行加密传输。</p><h3 id="可靠性"><a class="anchor" href="#可靠性">#</a> 可靠性</h3><p>由于登陆包是通过 ControlChannel 进行处理的，见上面的消息宏展开，使用的是  <code>FControlChannelOutBunch</code>  传输，其中  <code>bReliable</code>  始终是 true。因此登录包以及后续玩家相关包都是可靠。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">FControlChannelOutBunch</span><span class="token operator">::</span><span class="token function">FControlChannelOutBunch</span><span class="token punctuation">(</span>UChannel<span class="token operator">*</span> InChannel<span class="token punctuation">,</span> <span class="token keyword">bool</span> bClose<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">:</span> <span class="token function">FOutBunch</span><span class="token punctuation">(</span>InChannel<span class="token punctuation">,</span> bClose<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">checkSlow</span><span class="token punctuation">(</span>Cast<span class="token operator">&lt;</span>UControlChannel<span class="token operator">></span><span class="token punctuation">(</span>InChannel<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// control channel bunches contain critical handshaking/synchronization and should always be reliable</span></pre></td></tr><tr><td data-num="6"></td><td><pre>bReliable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>另外每个 Channel 的 Close 包必定是 bReliable 的。</p><h4 id="重传"><a class="anchor" href="#重传">#</a> 重传</h4><p>发送过的 Bunch 会根据 bReliable 字段存储在 OutRec 中用于重传。重传机制主要通过两种方式保证消息必达（<strong>如果消息超过消息缓冲区队列大小</strong>，会直接<strong>断开</strong> Connect 连接）：</p><ul><li>ControlChannel 的重传机制（通过 Tick 进行触发）：如果是 Open 包，即开启一个 ControlChannel 通道的包，这个包的重传间隔是 1s，另外就是 ControlChannel 创建成功后的中间数据包，这部分包会存储在 QueuedMessages 用于重传。</li><li>通用的 Channel 重传机制（通过 ReplicateActor 进行触发）：这里重传是基于 SendBunch 触发的，每次 SendBunch 的时候并不一定会发送当前需要发送的包，而是把该可靠包放入队尾，然后取出最早没有 Ack 的多个包进行发送。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UControlChannel</span><span class="token operator">::</span><span class="token function">QueueMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> FOutBunch<span class="token operator">*</span> Bunch<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">LLM_SCOPE_BYTAG</span><span class="token punctuation">(</span>NetChannel<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>QueuedMessages<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> MAX_QUEUED_CONTROL_MESSAGES<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// we're out of room in our extra buffer as well, so kill the connection</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogNet<span class="token punctuation">,</span> Log<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Overflowed control channel message queue, disconnecting client"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// intentionally directly setting State as the messaging in Close() is not going to work in this case</span></pre></td></tr><tr><td data-num="10"></td><td><pre>Connection<span class="token operator">-></span><span class="token function">SetConnectionState</span><span class="token punctuation">(</span>USOCK_Closed<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UControlChannel</span><span class="token operator">::</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>OpenAcked <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>int32 Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>FOutBunch<span class="token operator">*</span> Out <span class="token operator">=</span> OutRec<span class="token punctuation">;</span> Out<span class="token punctuation">;</span> Out <span class="token operator">=</span> Out<span class="token operator">-></span>Next<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Out<span class="token operator">-></span>ReceivedAck<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>Count<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Count <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// Resend any pending packets if we didn't get the appropriate acks.</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span> FOutBunch<span class="token operator">*</span> Out<span class="token operator">=</span>OutRec<span class="token punctuation">;</span> Out<span class="token punctuation">;</span> Out<span class="token operator">=</span>Out<span class="token operator">-></span>Next <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>Out<span class="token operator">-></span>ReceivedAck <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">double</span> Wait <span class="token operator">=</span> Connection<span class="token operator">-></span>Driver<span class="token operator">-></span><span class="token function">GetElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> Out<span class="token operator">-></span>Time<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">checkSlow</span><span class="token punctuation">(</span>Wait <span class="token operator">>=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Wait <span class="token operator">></span> <span class="token number">1.0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogNetTraffic<span class="token punctuation">,</span> Log<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Channel %i ack timeout); resending %i..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ChIndex<span class="token punctuation">,</span> Out<span class="token operator">-></span>ChSequence <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">check</span><span class="token punctuation">(</span>Out<span class="token operator">-></span>bReliable<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>Connection<span class="token operator">-></span><span class="token function">SendRawBunch</span><span class="token punctuation">(</span> <span class="token operator">*</span>Out<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// attempt to send queued messages</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>QueuedMessages<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Closing<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>FControlChannelOutBunch <span class="token function">Bunch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Bunch<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>Bunch<span class="token punctuation">.</span>bReliable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>Bunch<span class="token punctuation">.</span><span class="token function">SerializeBits</span><span class="token punctuation">(</span>QueuedMessages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QueuedMessages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>CountBits<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Bunch<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">SendBunch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Bunch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>QueuedMessages<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token comment">// an error here most likely indicates an unfixable error, such as the text using more than the maximum packet size</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token comment">// so there is no point in queueing it as it will just fail again</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token function">ensureMsgf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Control channel queued bunch overflowed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogNet<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Control channel queued bunch overflowed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>Connection<span class="token operator">-></span><span class="token function">Close</span><span class="token punctuation">(</span>ENetCloseResult<span class="token operator">::</span>ControlChannelQueueBunchOverflowed<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FPacketIdRange <span class="token class-name">UChannel</span><span class="token operator">::</span><span class="token function">SendBunch</span><span class="token punctuation">(</span> FOutBunch<span class="token operator">*</span> Bunch<span class="token punctuation">,</span> <span class="token keyword">bool</span> Merge <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//-----------------------------------------------------</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Contemplate merging or Possibly split large bunch into list of smaller partial bunches</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//-----------------------------------------------------</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">//-----------------------------------------------------</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// OverflowsReliable</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//-----------------------------------------------------</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">bool</span> bOverflowsReliable <span class="token operator">=</span> <span class="token punctuation">(</span>NumOutRec <span class="token operator">+</span> OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> RELIABLE_BUFFER <span class="token operator">+</span> Bunch<span class="token operator">-></span>bClose<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>GCVarNetPartialBunchReliableThreshold <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> GCVarNetPartialBunchReliableThreshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Connection<span class="token operator">-></span><span class="token function">IsInternalAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bOverflowsReliable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogNetPartialBunch<span class="token punctuation">,</span> Log<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"OutgoingBunches.Num (%d) exceeds reliable threashold (%d). Making bunches reliable. Property replication will be paused on this channel until these are ACK'd."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GCVarNetPartialBunchReliableThreshold<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>Bunch<span class="token operator">-></span>bReliable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>bPausedUntilReliableACK <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// The threshold was hit, but making these reliable would overflow the reliable buffer. This is a problem: there is just too much data.</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogNetPartialBunch<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"OutgoingBunches.Num (%d) exceeds reliable threashold (%d) but this would overflow the reliable buffer! Consider sending less stuff. Channel: %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GCVarNetPartialBunchReliableThreshold<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Bunch<span class="token operator">-></span>bReliable <span class="token operator">&amp;&amp;</span> bOverflowsReliable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogNetPartialBunch<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"SendBunch: Reliable partial bunch overflows reliable buffer! %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogNetPartialBunch<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"   Num OutgoingBunches: %d. NumOutRec: %d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NumOutRec <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">PrintReliableBunchBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// Bail out, we can't recover from this (without increasing RELIABLE_BUFFER)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>FString ErrorMsg <span class="token operator">=</span> <span class="token function">NSLOCTEXT</span><span class="token punctuation">(</span><span class="token string">"NetworkErrors"</span><span class="token punctuation">,</span> <span class="token string">"ClientReliableBufferOverflow"</span><span class="token punctuation">,</span> <span class="token string">"Outgoing reliable buffer overflow"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>Connection<span class="token operator">-></span><span class="token function">SendCloseReason</span><span class="token punctuation">(</span>ENetCloseResult<span class="token operator">::</span>ReliableBufferOverflow<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token class-name">FNetControlMessage</span><span class="token operator">&lt;</span>NMT_Failure<span class="token operator">></span><span class="token operator">::</span><span class="token function">Send</span><span class="token punctuation">(</span>Connection<span class="token punctuation">,</span> ErrorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>Connection<span class="token operator">-></span><span class="token function">FlushNet</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>Connection<span class="token operator">-></span><span class="token function">Close</span><span class="token punctuation">(</span>ENetCloseResult<span class="token operator">::</span>ReliableBufferOverflow<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">return</span> PacketIdRange<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">//-----------------------------------------------------</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// Send all the bunches we need to</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">//Note: this is done all at once. We could queue this up somewhere else before sending to Out.</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">//-----------------------------------------------------</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span> int32 PartialNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> PartialNum <span class="token operator">&lt;</span> OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>PartialNum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>FOutBunch <span class="token operator">*</span> NextBunch <span class="token operator">=</span> OutgoingBunches<span class="token punctuation">[</span>PartialNum<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>NextBunch<span class="token operator">-></span>bReliable <span class="token operator">=</span> Bunch<span class="token operator">-></span>bReliable<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>NextBunch<span class="token operator">-></span>bOpen <span class="token operator">=</span> Bunch<span class="token operator">-></span>bOpen<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>NextBunch<span class="token operator">-></span>bClose <span class="token operator">=</span> Bunch<span class="token operator">-></span>bClose<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>NextBunch<span class="token operator">-></span>CloseReason <span class="token operator">=</span> Bunch<span class="token operator">-></span>CloseReason<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>NextBunch<span class="token operator">-></span>bIsReplicationPaused <span class="token operator">=</span> Bunch<span class="token operator">-></span>bIsReplicationPaused<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>NextBunch<span class="token operator">-></span>ChIndex <span class="token operator">=</span> Bunch<span class="token operator">-></span>ChIndex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>NextBunch<span class="token operator">-></span>ChName <span class="token operator">=</span> Bunch<span class="token operator">-></span>ChName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>NextBunch<span class="token operator">-></span>bHasPackageMapExports <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>NextBunch<span class="token operator">-></span>bHasMustBeMappedGUIDs <span class="token operator">|=</span> Bunch<span class="token operator">-></span>bHasMustBeMappedGUIDs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>NextBunch<span class="token operator">-></span>bPartial <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>NextBunch<span class="token operator">-></span>bPartialInitial <span class="token operator">=</span> <span class="token punctuation">(</span>PartialNum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>NextBunch<span class="token operator">-></span>bPartialFinal <span class="token operator">=</span> <span class="token punctuation">(</span>PartialNum <span class="token operator">==</span> OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>NextBunch<span class="token operator">-></span>bOpen <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>PartialNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Only the first bunch should have the bOpen bit set</span></pre></td></tr><tr><td data-num="70"></td><td><pre>NextBunch<span class="token operator">-></span>bClose <span class="token operator">=</span> <span class="token punctuation">(</span>Bunch<span class="token operator">-></span>bClose <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>OutgoingBunches<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> PartialNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Only last bunch should have bClose bit set</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre>         <span class="token comment">// 这里通过 PrepBunch 获取到需要重传的起始包</span></pre></td></tr><tr><td data-num="74"></td><td><pre>FOutBunch <span class="token operator">*</span>ThisOutBunch <span class="token operator">=</span> <span class="token function">PrepBunch</span><span class="token punctuation">(</span>NextBunch<span class="token punctuation">,</span> OutBunch<span class="token punctuation">,</span> Merge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This handles queuing reliable bunches into the ack list</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token comment">// Update Packet Range</span></pre></td></tr><tr><td data-num="77"></td><td><pre>int32 PacketId <span class="token operator">=</span> <span class="token function">SendRawBunch</span><span class="token punctuation">(</span>ThisOutBunch<span class="token punctuation">,</span> Merge<span class="token punctuation">,</span> <span class="token function">GetTraceCollector</span><span class="token punctuation">(</span><span class="token operator">*</span>NextBunch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>PartialNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>PacketIdRange <span class="token operator">=</span> <span class="token function">FPacketIdRange</span><span class="token punctuation">(</span>PacketId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>PacketIdRange<span class="token punctuation">.</span>Last <span class="token operator">=</span> PacketId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token comment">// Update channel sequence count.</span></pre></td></tr><tr><td data-num="88"></td><td><pre>Connection<span class="token operator">-></span>LastOut <span class="token operator">=</span> <span class="token operator">*</span>ThisOutBunch<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>Connection<span class="token operator">-></span>LastEnd<span class="token operator">=</span> <span class="token function">FBitWriterMark</span><span class="token punctuation">(</span> Connection<span class="token operator">-></span>SendBuffer <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment">// Update open range if necessary</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Bunch<span class="token operator">-></span>bOpen <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Connection<span class="token operator">-></span>ResendAllDataState <span class="token operator">==</span> EResendAllDataState<span class="token operator">::</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>OpenPacketId <span class="token operator">=</span> PacketIdRange<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token comment">// Destroy outgoing bunches now that they are sent, except the one that was passed into ::SendBunch</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token comment">//This is because the one passed in ::SendBunch is the responsibility of the caller, the other bunches in OutgoingBunches</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token comment">//were either allocated in this function for partial bunches, or taken from the package map, which expects us to destroy them.</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> It <span class="token operator">=</span> OutgoingBunches<span class="token punctuation">.</span><span class="token function">CreateIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>FOutBunch <span class="token operator">*</span>DeleteBunch <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>DeleteBunch <span class="token operator">!=</span> Bunch<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token keyword">delete</span> DeleteBunch<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token keyword">return</span> PacketIdRange<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="参考文档"><a class="anchor" href="#参考文档">#</a> 参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzIzNzU1MzU=">UE4 UDP 是如何进行可靠传输的</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81OTc3MzIzNTg=">虚幻引擎中如何使用数据包处理程序组件启用加密</span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MDM3ODU5MTc=">在 Unreal 引擎中应用 TLS 加密</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本篇内容和源码均参考 UE5。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;unreal-握手登录流程&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unreal-握手登录流程&quot;&gt;#&lt;/a&gt; Unreal 握手 &amp;amp;&amp;a</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="握手" scheme="https://hakuya.me/tags/%E6%8F%A1%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——GJK &amp;&amp; EPA</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94GJK%20&amp;&amp;%20EPA/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94GJK%20&amp;&amp;%20EPA/</id>
    <published>2023-04-24T09:15:00.000Z</published>
    <updated>2023-11-04T05:00:44.778Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="gjk-epa"><a class="anchor" href="#gjk-epa">#</a> GJK &amp;&amp; EPA</h1><p>GJK 用来计算物体间的最短碰撞距离，而 EPA 用于计算物体发生嵌入的最短脱离距离，通过 GJK 和 EPA 可以知道物体是否嵌入，还需要运动多久发生碰撞。</p><h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><div class="note info"><p>闵可夫斯基差（<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWlua293c2tpX2FkZGl0aW9u">Minkowski difference</span>）</p></div><p>也经常被称为「闵可夫斯基和」，简单来说就是两个集合的顶点两两做加法 (减法) 得到的新集合所组成的凸包。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423194225714.png" alt="image-20230423194225714" width="800px" /></p><div class="note info"><p>支撑面 &amp;&amp; 支撑点</p></div><p>集合物体通过和支撑面的法线方向做投影所得到的最远距离点被称为支撑点。该点也可以理解为物体距离支撑面的最远点。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423194251409.png" alt="image-20230423194251409" width="600px" /></p><div class="note info"><p>支撑函数</p></div><p>每个图形都有特定的支撑函数，该函数主要用来计算不同方向上的支撑点。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230424155050506.png" alt="image-20230424155050506" width="600px" /></p><div class="note info"><p>上述两个规则还可以进一步推演，计算某个指定（法线）方向的「闵可夫斯基差」的最远点（支撑点）。</p></div><p>两个图形分别取法线方向和法线反向计算支撑点，然后再做「闵可夫斯基差」：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423195215055.png" alt="image-20230423195215055" width="1000px" /></p><h2 id="gjkgilbertjohnsonkeerthi-distance-algorithm"><a class="anchor" href="#gjkgilbertjohnsonkeerthi-distance-algorithm">#</a> GJK(Gilbert–Johnson–Keerthi distance algorithm)</h2><p>「闵可夫斯基差」可以用来描述两个物体间的距离，通过一个二维图形距离原点的距离进行表示（如果两个物体发送重叠，那么原点将会在该图形内部）。</p><p>由于「闵可夫斯基差」的特性，求解两个物体最近点可以简化为求解「闵可夫斯基差」点集组成的凸包中距离原点最近的点（前提是两个物体没有发生内嵌）</p><p>计算最短距离方法有点近似牛顿迭代法。本质上是通过多次迭代让结果趋于最优：</p><p>【step.1】取 「闵可夫斯基差」点集上的任意点，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，由于该集合组成的图形是凸包，因此任意点都可以成为某个方向的支撑点。取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>O</mi><msub><mi>w</mi><mn>0</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{Ow_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1163299999999998em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 作为支撑面，沿着法线方向计算支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>【step.2】 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 组成的面<strong>支撑面</strong>记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，通过支撑面 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 计算新的法线（法线方向必须向着原点）这样才能距离原点更近，法线计算公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>o</mi><msub><mi>w</mi><mn>0</mn></msub></mrow><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mrow><msub><mi>w</mi><mn>0</mn></msub><msub><mi>w</mi><mn>1</mn></msub></mrow><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mrow><msub><mi>w</mi><mn>0</mn></msub><msub><mi>w</mi><mn>1</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{ow_0} \times \vec{w_0w_1} \times \vec{w_0w_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>，并得到新的支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">w_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>【step.3~4】取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mn>2</mn></msub><msub><mi>w</mi><mn>0</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_2w_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mn>2</mn></msub><msub><mi>w</mi><mn>1</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_2w_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 中法线向着原点的作为新的支撑面计算新的支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">w_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423204022468.png" alt="image-20230423204022468" width="800px" /></p><p>该迭代计算的退出条件有两个：</p><ul><li>原点在当前三个支撑点组成的三角形<strong>内部</strong>，这种情况下说明物体发生了嵌入，GJK 计算失败，需要升级成 EPA 计算分离距离。</li><li>该迭代算法收敛到一定的阈值，例如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mi>n</mi></msub><msub><mi>w</mi><mn>0</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_nw_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 和原点距离近乎接近于 0 或者相比于上次迭代的距离变得更大，亦或者超过最大迭代次数等。</li></ul><h2 id="epaexpanding-polytope-algorithm"><a class="anchor" href="#epaexpanding-polytope-algorithm">#</a> EPA(Expanding Polytope Algorithm)</h2><p>EPA 算法和 GJK 非常类似，GJK 是用于计算非重叠情况下两物体的最短距离，而 EPA 则是在此基础之上，计算重叠情况下的最小分离距离。</p><p>两着的思想也非常相似，计算最短距离依靠「闵可夫斯基差」求解各个方向上能够分离物体的最短距离，再从其中取最小值。</p><p>计算最小分离距离也是依靠「闵可夫斯基差」求解凸包集合中距离原点最近的位置，唯一的区别在于 GJK 求解中原点在凸包<strong>外部</strong>，而 EPA 求解时，原点在凸包<strong>内部</strong>。</p><div class="note info"><p>由于 EPA 时 GJK 算法的特例，因此该算法会继承原有 GJK 算法的结果继续迭代，算法核心是构建一个 core shape，而最短脱离点则是该 core shape 中距离原点最近的点的距离：</p></div><p>【step.1】计算 GJK 过程中的失败情况下，会得到一个包含原点的三角形，通过把三角形三条边作为支撑面求解最短分离距离点。由于是求最短，因此分离距离大于当前距离的点集不会被纳入 core shape。</p><p>【step.2】由于新加入的点集又可以扩展出两个支撑面，重复上诉迭代步骤，没有更近的点被加入 core shape 集合时，该迭代就可以终止了。</p><p>【step.3】最后从得到的 core shape 中，找出距离原点最近的顶点即可。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230424124125996.png" alt="image-20230424124125996" width="1000px" /></p><blockquote><p>可以看到，整个算法对于点集较多的凸包 work 的不是很好，特别是圆形，算法结果收敛会变得很慢。</p></blockquote><h2 id="sweep-情况下如何计算碰撞点"><a class="anchor" href="#sweep-情况下如何计算碰撞点">#</a> Sweep 情况下如何计算碰撞点</h2><p>对于静止物体我们可以直接套用 GJK &amp;&amp; EPA 进行计算，得到最终的最短距离。那么对于运动中的对象如何获取到物体沿着某个方向运动的最长距离呢？</p><p>好消息是，一个物体对另一个物体进行 sweep 测试的过程中，「闵可夫斯基差」的形状是不会改变的，变化的只有「闵可夫斯基差」的「位置」。</p><p>利用这一特性，求解凸包的 EPA &amp;&amp; GJK 就可以简化为求解一个<strong>拉伸</strong>「闵可夫斯基差」凸包的 EPA &amp;&amp; GJK，看起来有点抽象，下面举个简单例子：</p><blockquote><p>假设 「闵可夫斯基差」计算得到的最短方向正好和 sweep 方向是反向的，意味着 sweep 起始位置才是距离最近的，之后的运动都是远离物体的。因此 sweep 的影响可以被忽略。再延展一下，能够让 sweep 过程中两个物体靠的<strong>更近</strong>，就意味着 sweep 在「最短方向」上的水平分量是和「最短方向」同向的情况下。垂直方向自然是没有影响的，可以忽略。</p></blockquote><p>这里假设 sweep 的方向为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>。</p><ul><li>【step.1】找到任意一个支撑点 A，沿着 A 和原点方向作为法线寻找另一个支撑点 B。已知的是 B 肯定在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向上离 O 点最近的支撑点。</li><li>【step.2】[设想一下，如果沿着 sweep 方向横扫，对于闵可夫斯基集合来说就意味着平移 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>。把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 拆分成平行于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向和垂直于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向。垂直于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向的 sweep 不会让 B 点到原点的距离变短（假设 B 在 AO 上有个投影 B’，B’ 一定是闵可夫斯基集合中沿着 AO 方向投影里，距离原点最近的点，又已知两点的距离表示集合图形的距离，那么垂直于 AO 移动 B’，肯定会让 B’ 变得更长，那么 B’O 也就更长，两个物体就会更加的远离）。</li><li>【step.3】那么唯一可能缩短距离的方向就还剩下平行于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向的 sweep 分量。该 sweep 会让 B 点靠近原点。那么只需要确定，如果 B’O 的距离大于该分量，即便 sweep 到终点，也不会发生碰撞，反之则<strong>可能</strong>发生碰撞。我们可以求解这个分量（对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 进行拆分，平行于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向的记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>r</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>）。图中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>w</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vw}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 是 B 点在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向的投影，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>w</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vw}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>r</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>。则可能发生碰撞。</li><li>【step.4】如果可能碰撞的情况下，只需要步进一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>w</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vw}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 距离就可以还原 sweep 碰撞前的临界位置，求解出该距离对应的 sweep 方向所能够步进的最远距离 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>v</mi><mi>r</mi><mi mathvariant="normal">/</mi><mi>v</mi><mi>w</mi><mo>∗</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">offset = vr / vw * r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></li><li>【step.5.A】如果不可能碰撞，只需沿着 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{BO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向对偏移后的新闵可夫斯基集差再做支持点查询，得到支撑点 C。同样计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>C</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{CO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>。重复之前的「step1~4」 得到 sweep 对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{BO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 的投影 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>r</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>w</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vw}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>。如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>w</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vw}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{BO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向同向，且和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>r</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 反向，那么可以预见，不论如何沿着 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{BO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 移动都不会缩两个图形短距离了，又已知垂直于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{BO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向的移动也不会缩短距离，因此 sweep 方向的移动必然也不会再缩短距离，此时就视为无碰撞，计算结束。</li><li>【step.5.B】步进完成后，由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>v</mi><mi>w</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{vw}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 垂直于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>，这里需要引入新的支撑点 C，C 的计算基于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{BO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 方向法线。得到支撑点 C 后，问题退化为 EPA。由于此时已经发生重叠，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>r</mi><mi mathvariant="normal">/</mi><mi>v</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">{vr / vw}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></span> 结果将为负数，sweep 的推进变为回退。回退一定距离后继续求解，直到达到临界值，便可求解得到 sweep 到达临界位置的最短距离。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20231104125309858.png" alt="image-20231104125309858" width="1600px" /></p><h2 id="physx-的-gjk"><a class="anchor" href="#physx-的-gjk">#</a> PhysX 的 GJK</h2><p>PhysX 的 GJK 在查询和支撑点选取上做了一定的优化：</p><ol><li>初始的支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 挑选方式是基于两个物体中心点的方向来做的。</li><li>第二个支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是基于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mn>0</mn></msub><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_0O}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1163299999999998em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 方向作为法线求算得到。</li><li>后续支撑点的计算方向有两套规则：<ul><li>支撑点只有两个的情况下，计算原点和两支撑点组成<strong>线段</strong>的最短距离位置。并得到该位置到原点的方向作为查询方向。</li><li>支撑点有三个的情况下，计算三个支撑点组成的三角形和原点的最短距离位置（最短边 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>x</mi></msub><msub><mi>w</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">w_x w_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>）。然后用该位置到原点的方向作为查询方向得到新的支撑点用于替换 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">w_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</li></ul></li></ol><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230424103457009.png" alt="image-20230424103457009" width="1000px" /></p><h2 id="对于球体和胶囊体如何在有限的迭代中得到最优解"><a class="anchor" href="#对于球体和胶囊体如何在有限的迭代中得到最优解">#</a> 对于球体和胶囊体，如何在有限的迭代中得到最优解</h2><p>计算中引入了一个「膨胀的概念」Unreal 中称为 「Thickness」，PhysX 中称为「Inflation」。这个概念对应求解球体和胶囊体非常有效，有了这个「膨胀值」球体就可以表示成一个「点」，而胶囊体就是一个线段，在计算碰撞的时候，只需要对点和线段做检查，并在结果中加入一个膨胀值即可。</p><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zb2xpZC5zb3VyY2Vmb3JnZS5uZXQvamd0OThjb252ZXgucGRm">A Fast and Robust GJK Implementation for Collision Detection of Convex Objects</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93aW50ZXIuZGV2L2xpbGFwcHMvZ2prLw==">可视化的 GJK 计算页面</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1hanY0NkJTcWNLNA==">A Strange But Elegant Approach to a Surprisingly Hard Problem (GJK Algorithm)</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGl2YS1wb3J0YWwub3JnL3NtYXNoL2dldC9kaXZhMjozNDM4MjAvRlVMTFRFWFQwMS5wZGY=">Real-time Collision Detection with Implicit Objects</span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5yLTUub3JnL2ZpbGVzL2Jvb2tzL2NvbXB1dGVycy9hbGdvLWxpc3QvZ2FtZS1kZXZlbG9wbWVudC9HaW5vX3Zhbl9kZW5fQmVyZ2VuLUNvbGxpc2lvbl9EZXRlY3Rpb25faW5fSW50ZXJhY3RpdmVfM0RfRW52aXJvbm1lbnRzLUVOLnBkZg==">Collision Detection in Interactive 3D Environments</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Collision" scheme="https://hakuya.me/tags/Collision/"/>
    
    <category term="GJK" scheme="https://hakuya.me/tags/GJK/"/>
    
    <category term="EPA" scheme="https://hakuya.me/tags/EPA/"/>
    
  </entry>
  
  <entry>
    <title>UE 资产导出和加载</title>
    <link href="https://hakuya.me/learning/unreal/UE%20%E8%B5%84%E4%BA%A7%E5%AF%BC%E5%87%BA%E5%92%8C%E5%8A%A0%E8%BD%BD/"/>
    <id>https://hakuya.me/learning/unreal/UE%20%E8%B5%84%E4%BA%A7%E5%AF%BC%E5%87%BA%E5%92%8C%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-12-20T02:36:00.000Z</published>
    <updated>2022-12-29T01:36:04.582Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本篇内容和源码均参考 UE5。</p></div><h1 id="ue-资产导出和加载"><a class="anchor" href="#ue-资产导出和加载">#</a> UE 资产导出和加载</h1><p>资产（Asset）是 Unreal Engine 中持久化对象的重要文件，通常以  <code>.uasset</code>  结尾，Asset 的官方定义是存储 UObject 被序列化后的二进制文件。而在 Unreal Engine Editor 中预览和修改操作，本质上就是对这些「资产」文件的读写。下面以 <strong>BlueprintStruct</strong> 为例，分成以下几个步骤，简单梳理整个流程：</p><ul><li>资产加载（Load）</li><li>反序列化（UnSerialize）</li><li>资产导出 （Export）</li><li>序列化（Serialize）</li></ul><h2 id="资产加载"><a class="anchor" href="#资产加载">#</a> 资产加载</h2><p>Unreal 对于非必须资产的加载，使用的是「懒加载」模式。编辑器会在第一次打开的时候读取文件内容并解析到内存。</p><p>通过  <code>UAssetEditorSubsystem::OpenEditorForAsset</code>  -&gt;  <code>LoadPackage</code>  -&gt;  <code>LoadPackageInternal</code></p><h3 id="beginload"><a class="anchor" href="#beginload">#</a> BeginLoad</h3><p><strong>BeginLoad</strong> 主要是用来在加载资源之前，处理好所有留存的异步任务。这个处理操作会在主线程（Game Thread）完成，并且会一直阻塞，直到所有异步任务都处理完毕，一般用于加载资源之前提前进行垃圾回收，避免加载过程中触发 GC。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">BeginLoad</span><span class="token punctuation">(</span>FUObjectSerializeContext<span class="token operator">*</span> LoadContext<span class="token punctuation">,</span> <span class="token keyword">const</span> TCHAR<span class="token operator">*</span> DebugContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LoadContext<span class="token operator">-></span><span class="token function">HasStartedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsInAsyncLoadingThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// Make sure we're finishing up all pending async loads, and trigger texture streaming next tick if necessary.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">FlushAsyncLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">FlushAsyncLoading</span><span class="token punctuation">(</span>int32 RequestId <span class="token comment">/* = INDEX_NONE */</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>GPackageLoader<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>GPackageLoader<span class="token operator">-></span><span class="token function">FlushLoading</span><span class="token punctuation">(</span>RequestId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FAsyncLoadingThread</span><span class="token operator">::</span><span class="token function">FlushLoading</span><span class="token punctuation">(</span>int32 PackageID<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsAsyncLoadingPackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 处理异步任务</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        EAsyncPackageState<span class="token operator">::</span>Type Result <span class="token operator">=</span> <span class="token function">TickAsyncLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FlushRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsMultithreaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token comment">// 维持心跳</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token class-name">FThreadHeartBeat</span><span class="token operator">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HeartBeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token class-name">FPlatformProcess</span><span class="token operator">::</span><span class="token function">SleepNoStats</span><span class="token punctuation">(</span><span class="token number">0.0001f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="getpackagelinker"><a class="anchor" href="#getpackagelinker">#</a> GetPackageLinker</h3><p>GetPackageLinker 负责初始化 UPackage 关联的 <strong>FLinkerLoad</strong> 对象。<strong>FLinkerLoad</strong> 是整个资源加载的核心，负责  <code>FStructuredArchiveFormatter</code> 、 <code>FArchive</code> 、 <code>FStructuredArchive</code> 、 <code>FStructuredArchiveRecord</code>  的管理工作。在 Window 平台下，读取二进制文件时，<strong>FLinkerLoad</strong> 中大致的关系如下图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219172720904.png" alt="image-20221219172720904" /></p><ul><li><p><strong>FArchive</strong>：通过重载  <code>&lt;&lt;</code>  运算符，实现数据的写入和读取操作。</p></li><li><p><strong>FStructuredArchiveRecord</strong> &amp;&amp; <strong>FStructuredArchiveFormatter</strong> &amp;&amp; <strong>FStructuredArchive</strong>：共同定义了读写数据的格式范式。几乎所有 UPackage 数据都可以通过 Slot、Stream、Array、Map、Record 排列组合。</p></li></ul><h4 id="farchivefilereadergenericinternalprecache"><a class="anchor" href="#farchivefilereadergenericinternalprecache">#</a> FArchiveFileReaderGeneric::InternalPrecache</h4><p>FArchiveFileReaderGeneric 是 FArchive 的派生类，负责读接口的封装和读数据的暂存。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FArchiveFileReaderGeneric</span><span class="token operator">::</span><span class="token function">InternalPrecache</span><span class="token punctuation">(</span> int64 PrecacheOffset<span class="token punctuation">,</span> int64 PrecacheSize <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    int64 WriteOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    int64 BufferCount <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token operator">::</span><span class="token function">Min</span><span class="token punctuation">(</span>BufferSize<span class="token punctuation">,</span> Size <span class="token operator">-</span> Pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    int64 ReadCount <span class="token operator">=</span> BufferCount<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    BufferArray<span class="token punctuation">.</span><span class="token function">SetNumUninitialized</span><span class="token punctuation">(</span>BufferCount<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment">/* AllowShrink */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 读取内容</span></pre></td></tr><tr><td data-num="10"></td><td><pre>int64 Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">ReadLowLevel</span><span class="token punctuation">(</span> BufferArray<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> WriteOffset<span class="token punctuation">,</span> ReadCount<span class="token punctuation">,</span> Count <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>FArchiveFileReaderGeneric 持有读取文件的句柄 ——Handle，通过 Handle 对文件进行读取。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FArchiveFileReaderGeneric</span><span class="token operator">::</span><span class="token function">ReadLowLevel</span><span class="token punctuation">(</span> uint8<span class="token operator">*</span> Dest<span class="token punctuation">,</span> int64 CountToRead<span class="token punctuation">,</span> int64<span class="token operator">&amp;</span> OutBytesRead <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> Handle<span class="token operator">-></span><span class="token function">Read</span><span class="token punctuation">(</span> Dest<span class="token punctuation">,</span> CountToRead <span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>OutBytesRead <span class="token operator">=</span> CountToRead<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>OutBytesRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Window 版本下通过 ReadFile 调用 SDK 对文件进行读取，读取的二进制内容，会保存在 FArchiveFileReaderGeneric 的 <strong>BufferArray</strong> 中，加载过程到此结束：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//window 下 IFileHandle 的实现类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FFileHandleWindows</span><span class="token operator">::</span><span class="token function">Read</span><span class="token punctuation">(</span>uint8<span class="token operator">*</span> Dest<span class="token punctuation">,</span> int64 BytesToRead<span class="token punctuation">)</span> override</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// Now kick off an async read</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">TRACE_PLATFORMFILE_BEGIN_READ</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>OverlappedIO<span class="token punctuation">,</span> FileHandle<span class="token punctuation">,</span> FilePos<span class="token punctuation">,</span> BytesToRead<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    int64 TotalNumRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">do</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        uint32 BytesToRead32 <span class="token operator">=</span> <span class="token punctuation">(</span>uint32<span class="token punctuation">)</span>FMath<span class="token operator">::</span>Min<span class="token operator">&lt;</span>int64<span class="token operator">></span><span class="token punctuation">(</span>BytesToRead<span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>UINT32_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        uint32 NumRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>FileHandle<span class="token punctuation">,</span> Destination<span class="token punctuation">,</span> BytesToRead32<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">::</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>NumRead<span class="token punctuation">,</span> <span class="token operator">&amp;</span>OverlappedIO<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//... 异常处理 ...</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        BytesToRead <span class="token operator">-=</span> BytesToRead32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        Destination <span class="token operator">+=</span> BytesToRead32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        TotalNumRead <span class="token operator">+=</span> NumRead<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">// Update where we are in the file</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        FilePos <span class="token operator">+=</span> NumRead<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token function">UpdateOverlappedPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>BytesToRead <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="反序列化"><a class="anchor" href="#反序列化">#</a> 反序列化</h2><p>加载获取到二进制文件后，下一步就是解析二进制内的内容，得到对应的 UPackage 对象。</p><h3 id="flinkerloadprocesspackagesummary"><a class="anchor" href="#flinkerloadprocesspackagesummary">#</a> FLinkerLoad::ProcessPackageSummary</h3><p>ProcessPackageSummary 会对二进制进行解析，并把结果结构化的存储在 <strong>StructuredArchiveRootRecord</strong> 中，主要分成以下几个步骤，由于该部分代码比较复杂，有兴趣的可以深入阅读，这里只简单介绍一下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FLinkerLoad<span class="token operator">::</span>ELinkerStatus <span class="token class-name">FLinkerLoad</span><span class="token operator">::</span><span class="token function">ProcessPackageSummary</span><span class="token punctuation">(</span>TMap<span class="token operator">&lt;</span>TPair<span class="token operator">&lt;</span>FName<span class="token punctuation">,</span> FPackageIndex<span class="token operator">></span><span class="token punctuation">,</span> FPackageIndex<span class="token operator">></span><span class="token operator">*</span> ObjectNameWithOuterToExportMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 解析文件概要：</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 「FPackageFileSummary Summary」 </span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializePackageFileSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 根据 Summary 信息解析 PackageTrailer，包含一些查找表信息</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 「TUniquePtr&lt;UE::FPackageTrailer> PackageTrailer」</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializePackageTrailer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 解析名称映射，序列化对象的时候，相同的字段名通常为了压缩会集中存储，然后其他地方通过名称映射的编号访问</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 「TArray&lt;FNameEntryId> NameMap」</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeNameMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 读取软链接，包括一些资产引用、子路径等</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 「TSet&lt;FSoftObjectPath> SoftObjectPathList」</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeSoftObjectPathList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 文本数据读取</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeGatherableTextDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 读取 ImportMap</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 「TArray&lt;FObjectImport> ImportMap」</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeImportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 读取 ExportMap</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 「TArray&lt;FObjectExport> ExportMap」</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeExportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">// 构造 ExportReaders</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 「TArray&lt;FStructuredArchiveChildReader*> ExportReaders」</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">ConstructExportsReaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">// 修复版本的读取 ImportMap（修复读取到的和最新的不一致问题？）</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FixupImportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">PopulateInstancingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">PopulateRelocationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 修复版本的读取 ExportMap（修复读取到的和最新的不一致问题？）</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FixupExportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 读取 DependsMap</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 「TArray&lt;TArray&lt;FPackageIndex> > DependsMap」</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeDependsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">// 生成 ExportMap 对象的 Hash 值并关联 Hash 和 Idx</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">CreateExportHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 通过 Export.OuterIndex 查找 Export 中是否已经有导出好的对象了，有的话直接关联上该 FLinkerLoad</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FindExistingExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">// 序列化 DependsMap</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// 「TArray&lt;FPackageIndex> PreloadDependencies」</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializePreloadDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">// LinkerLoad 创建完成，添加到 FLinkerManager，并再次验证 ImportMap 合法性。</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FinalizeCreation</span><span class="token punctuation">(</span>ObjectNameWithOuterToExportMap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">return</span> Status<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>前面提到了，从文件中读取到的二进制内容会存储在 FArchiveFileReaderGeneric 的 <strong>BufferArray</strong> 中，在反序列化过程会使用  <code>&lt;&lt;</code>  运算符从 BufferArray 把数据解析到 <strong>StructuredArchiveRootRecord</strong> 内，这里以读取 <strong>Summary</strong> 数据为例：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 反序列化 Summary</span></pre></td></tr><tr><td data-num="2"></td><td><pre>FLinkerLoad<span class="token operator">::</span>ELinkerStatus <span class="token class-name">FLinkerLoad</span><span class="token operator">::</span><span class="token function">SerializePackageFileSummaryInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>StructuredArchiveRootRecord<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">SA_VALUE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Summary"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Summary<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> FORCEINLINE FStructuredArchiveRecord<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>UE<span class="token operator">::</span>StructuredArchive<span class="token operator">::</span>Private<span class="token operator">::</span>TNamedValue<span class="token operator">&lt;</span>T<span class="token operator">></span> Item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">EnterField</span><span class="token punctuation">(</span>Item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> Item<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token comment">// Item.Value == FPackageFileSummary</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 通过基类的 &lt;&lt; 运算符读取 Summary 内的各项数值，这里以 int32 的 Tag 为例：</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> FPackageFileSummary<span class="token operator">&amp;</span> Sum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bCanStartSerializing<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>Record <span class="token operator">&lt;&lt;</span> <span class="token function">SA_VALUE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Tag"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Sum<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里还会执行一次 EnterField 然后进到 FStructuredArchiveSlot &lt;&lt; 逻辑</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">void</span> FStructuredArchiveSlot<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>int32<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">EnterSlot</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>StructuredArchive<span class="token punctuation">.</span>Formatter<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 「FBinaryArchiveFormatter::Serialize」</span></pre></td></tr><tr><td data-num="27"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">LeaveSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">FBinaryArchiveFormatter</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>int32<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>Inner <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span><span class="token comment">// 这里会执行 FLinkerLoad &lt;&lt; 逻辑</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>FORCEINLINE <span class="token keyword">friend</span> FArchive<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FArchive<span class="token operator">&amp;</span> Ar<span class="token punctuation">,</span> int32<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    Ar<span class="token punctuation">.</span><span class="token function">ByteOrderSerialize</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>uint32<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">return</span> Ar<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="43"></td><td><pre>FArchive<span class="token operator">&amp;</span> <span class="token function">ByteOrderSerialize</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsByteSwapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Value<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 「FLinkerLoad::Serialize」</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">SerializeByteOrderSwapped</span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">using</span> FLinker<span class="token operator">::</span>Serialize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>FORCEINLINE <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length<span class="token punctuation">)</span> override</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    Loader<span class="token operator">-></span><span class="token function">Serialize</span><span class="token punctuation">(</span>V<span class="token punctuation">,</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 「FArchiveFileReaderGeneric::Serialize」</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">// 这里会从 BufferArray 把对应长度的内容读取进来</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FArchiveFileReaderGeneric</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> Length<span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token class-name">FMemory</span><span class="token operator">::</span><span class="token function">Memcpy</span><span class="token punctuation">(</span> V<span class="token punctuation">,</span> BufferArray<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>Pos<span class="token operator">-</span>BufferBase<span class="token punctuation">,</span> Copy <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>Pos       <span class="token operator">+=</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>Length    <span class="token operator">-=</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>V          <span class="token operator">=</span><span class="token punctuation">(</span> uint8<span class="token operator">*</span> <span class="token punctuation">)</span>V <span class="token operator">+</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="flinkerloadloadallobjects"><a class="anchor" href="#flinkerloadloadallobjects">#</a> FLinkerLoad::LoadAllObjects</h3><p>LoadAllObjects 主要是初始化 ExportObject。以 <strong>BlueprintStruct</strong> 为例，其组成主要分为以下几个对象：</p><ul><li><strong>UMetaData</strong>：定义了 UPackage 对象本身的特殊属性，描述一些基本信息。</li><li><strong>UUserDefinedStruct</strong>：定义了 <strong>BlueprintStruct</strong> 里的数据结构：</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219111729365.png" alt="image-20221219111729365" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219111700076.png" alt="image-20221219111700076" /></p><ul><li><strong>UUserDefinedStructEditorData</strong>：该结构负责存储 BlueprintStruct 在 Unreal Editor 中的相关信息。</li></ul><blockquote><p>到此，LoadPackageInternal 流程就算是完成了，uasset 文件也被反序列化加载到了内存中，编辑器相关的数据也初始化完成。</p></blockquote><h2 id="资产导出"><a class="anchor" href="#资产导出">#</a> 资产导出</h2><p>编辑器里对于资产的保存是通过注册的控件事件向控制台发送 CMD 实现的，具体指令如下：</p><p><code>OBJ SAVEPACKAGE PACKAGE=&quot;/Game/learn_blueprint/BP_ST_SUB_TASK_DATA&quot; FILE=&quot;../../../../programe/learn_ue/Content/learn_blueprint/BP_ST_SUB_TASK_DATA.uasset&quot; SILENT=true</code></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219114203968.png" alt="image-20221219114203968" /></p><p>先来看看 SaveAsset 的调用堆栈：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219114557034.png" alt="image-20221219114557034" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> InternalSavePackageResult <span class="token function">InternalSavePackage</span><span class="token punctuation">(</span>UPackage<span class="token operator">*</span> PackageToSave<span class="token punctuation">,</span> <span class="token keyword">bool</span> bUseDialog<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> bOutPackageLocallyWritable<span class="token punctuation">,</span> FOutputDevice <span class="token operator">&amp;</span>SaveOutput<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre>bWasSuccessful <span class="token operator">=</span> GEngine<span class="token operator">-></span><span class="token function">Exec</span><span class="token punctuation">(</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token class-name">FString</span><span class="token operator">::</span><span class="token function">Printf</span><span class="token punctuation">(</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"OBJ SAVEPACKAGE PACKAGE=\"%s\" FILE=\"%s\" SILENT=true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>PackageName<span class="token punctuation">,</span> <span class="token operator">*</span>FinalPackageSavePath <span class="token punctuation">)</span><span class="token punctuation">,</span> SaveOutput <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>CMD 的解析流程这里就不再展开了，函数最终会执行到  <code>UEditorEngine::Save</code> ：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219115129805.png" alt="image-20221219115129805" /></p><h3 id="harvestpackage"><a class="anchor" href="#harvestpackage">#</a> HarvestPackage</h3><p>在导出对象之前，Unreal 还需要系统性的收集并整理好所有需要打包的内容，打包所需的依赖，这项工作由 <strong>FPackageHarvester</strong> 来完成，其管理了若干个 <strong>FHarvestedRealm</strong>，并通过  <code>&lt;&lt;</code>  运算符，把需要导出的对象信息按照 ExportObject 为单位存储在 <strong>FHarvestedRealm</strong> 中：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219152624707.png" alt="image-20221219152624707" /></p><h4 id="fpackageharvesterprocessexport"><a class="anchor" href="#fpackageharvesterprocessexport">#</a> FPackageHarvester::ProcessExport</h4><p>ProcessExport 导出的内容主要是之前提到的 <strong>UMetaData</strong>、<strong>UUserDefinedStruct</strong>、<strong>UUserDefinedStructEditorData</strong> 三个 ExportObject：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FPackageHarvester</span><span class="token operator">::</span><span class="token function">ProcessExport</span><span class="token punctuation">(</span><span class="token keyword">const</span> FExportWithContext<span class="token operator">&amp;</span> InProcessContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>UObject<span class="token operator">*</span> Export <span class="token operator">=</span> InProcessContext<span class="token punctuation">.</span>Export<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// In the CDO case the above would serialize most of the references, including transient properties</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// but we still want to serialize the object using the normal path to collect all custom versions it might be using.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">SCOPED_SAVETIMER_TEXT</span><span class="token punctuation">(</span><span class="token operator">*</span>WriteToString<span class="token operator">&lt;</span><span class="token number">128</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">GetClassTraceScope</span><span class="token punctuation">(</span>Export<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"_SaveSerialize"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Export<span class="token operator">-></span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>每个类型都有与之对应的宏定义，这里并非真正意义上的序列化，而是获取需要序列化的数据集：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// UMetaData</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">IMPLEMENT_FARCHIVE_SERIALIZER</span><span class="token punctuation">(</span>UMetaData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">IMPLEMENT_FARCHIVE_SERIALIZER</span><span class="token punctuation">(</span> TClass <span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>FArchive<span class="token operator">&amp;</span> Ar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token function">FStructuredArchiveFromArchive</span><span class="token punctuation">(</span>Ar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">EnterRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// UUserDefinedStruct</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">IMPLEMENT_FARCHIVE_SERIALIZER</span><span class="token punctuation">(</span>UUserDefinedStruct<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// UUserDefinedStructEditorData</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">IMPLEMENT_FSTRUCTUREDARCHIVE_SERIALIZER</span><span class="token punctuation">(</span>UUserDefinedStructEditorData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">IMPLEMENT_FSTRUCTUREDARCHIVE_SERIALIZER</span><span class="token punctuation">(</span> TClass <span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FRecord Record<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> FArchiveUObjectFromStructuredArchive <span class="token function">Ar</span><span class="token punctuation">(</span>Record<span class="token punctuation">.</span><span class="token function">EnterField</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"BaseClassAutoGen"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>Ar<span class="token punctuation">.</span><span class="token function">GetArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Ar<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span></pre></td></tr></table></figure><p>主要来看下 <strong>UUserDefinedStruct</strong> 中的实现，该操作会把 UUserDefinedStruct 内的 Property 存储在 <strong>FHarvestedRealm</strong> 内：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219145506673.png" alt="image-20221219145506673" /></p><p>由于代码过于复杂，这里做了一定程度上的简化：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 直接执行父类序列化接口</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UUserDefinedStruct</span><span class="token operator">::</span><span class="token function">SerializeTaggedProperties</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Data<span class="token punctuation">,</span> UStruct<span class="token operator">*</span> DefaultsStruct<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Defaults<span class="token punctuation">,</span> <span class="token keyword">const</span> UObject<span class="token operator">*</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span> <span class="token keyword">const</span> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">SerializeTaggedProperties</span><span class="token punctuation">(</span>Slot<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> DefaultsStruct<span class="token punctuation">,</span> Defaults<span class="token punctuation">,</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 执行带版本控制的属性序列化 SerializeVersionedTaggedProperties</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UStruct</span><span class="token operator">::</span><span class="token function">SerializeTaggedProperties</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Data<span class="token punctuation">,</span> UStruct<span class="token operator">*</span> DefaultsStruct<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Defaults<span class="token punctuation">,</span> <span class="token keyword">const</span> UObject<span class="token operator">*</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Slot<span class="token punctuation">.</span><span class="token function">GetArchiveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseUnversionedPropertySerialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">SerializeUnversionedProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Slot<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> DefaultsStruct<span class="token punctuation">,</span> Defaults<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">SerializeVersionedTaggedProperties</span><span class="token punctuation">(</span>Slot<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> DefaultsStruct<span class="token punctuation">,</span> Defaults<span class="token punctuation">,</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 由于属性本身就是单链表结构，因此这里其实就是一个个的进行序列化，但是加了很多复杂校验因此看着代码非常庞大</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UStruct</span><span class="token operator">::</span><span class="token function">SerializeVersionedTaggedProperties</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Data<span class="token punctuation">,</span> UStruct<span class="token operator">*</span> DefaultsStruct<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Defaults<span class="token punctuation">,</span> <span class="token keyword">const</span> UObject<span class="token operator">*</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// Iterate over properties in the order they were linked and serialize them.</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>FProperty<span class="token operator">*</span> Property <span class="token operator">=</span> UnderlyingArchive<span class="token punctuation">.</span>ArUseCustomPropertyList <span class="token operator">?</span> <span class="token punctuation">(</span>CustomPropertyNode <span class="token operator">?</span> CustomPropertyNode<span class="token operator">-></span>Property <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span> PropertyLink<span class="token punctuation">;</span> Property<span class="token punctuation">;</span> Property <span class="token operator">=</span> UnderlyingArchive<span class="token punctuation">.</span>ArUseCustomPropertyList <span class="token operator">?</span> <span class="token class-name">FCustomPropertyListNode</span><span class="token operator">::</span><span class="token function">GetNextPropertyAndAdvance</span><span class="token punctuation">(</span>CustomPropertyNode<span class="token punctuation">)</span> <span class="token operator">:</span> Property<span class="token operator">-></span>PropertyLinkNext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        FPropertyTag <span class="token function">Tag</span><span class="token punctuation">(</span> UnderlyingArchive<span class="token punctuation">,</span> Property<span class="token punctuation">,</span> Idx<span class="token punctuation">,</span> DataPtr<span class="token punctuation">,</span> DefaultValue <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        PropertySlot <span class="token operator">&lt;&lt;</span> Tag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        Tag<span class="token punctuation">.</span><span class="token function">SerializeTaggedProperty</span><span class="token punctuation">(</span>PropertySlot<span class="token punctuation">,</span> Property<span class="token punctuation">,</span> DataPtr<span class="token punctuation">,</span> DefaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 通过 &lt;&lt; 运算符存储</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> FPropertyTag<span class="token operator">&amp;</span> Tag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>Slot <span class="token operator">&lt;&lt;</span> <span class="token function">SA_ATTRIBUTE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Tag<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>Slot <span class="token operator">&lt;&lt;</span> <span class="token function">SA_ATTRIBUTE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Type"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Tag<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里以  <code>task_id</code>  为例，说明整个存储过程：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219212010069.png" alt="image-20221219212010069" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>FORCEINLINE <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>UE<span class="token operator">::</span>StructuredArchive<span class="token operator">::</span>Private<span class="token operator">::</span>TNamedAttribute<span class="token operator">&lt;</span>T<span class="token operator">></span> Item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">EnterAttribute</span><span class="token punctuation">(</span>Item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> Item<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> FStructuredArchiveSlot<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">EnterSlot</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>StructuredArchive<span class="token punctuation">.</span>Formatter<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">LeaveSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">FBinaryArchiveFormatter</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>Inner <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>FArchive<span class="token operator">&amp;</span> FArchiveFromStructuredArchiveImpl<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">FName</span><span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>InnerArchive <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 最终会调用到 FPackageHarvester 的 &lt;&lt; 函数</span></pre></td></tr><tr><td data-num="26"></td><td><pre>FArchive<span class="token operator">&amp;</span> FPackageHarvester<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">HarvestExportDataName</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// 数据最终会存储在 HarvestedRealm 的 NamesReferencedFromExportData 中以备导出时使用</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 实际上 property 里面的字段还有很多，不同字段可能存放在不同位置，这里仅仅是用变量的别名存储作为样例</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FPackageHarvester</span><span class="token operator">::</span><span class="token function">HarvestExportDataName</span><span class="token punctuation">(</span>FName Name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>SaveContext<span class="token punctuation">.</span><span class="token function">GetHarvestedRealm</span><span class="token punctuation">(</span>CurrentExportHarvestingRealm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetNamesReferencedFromExportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Name<span class="token punctuation">.</span><span class="token function">GetDisplayIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219212427302.png" alt="image-20221219212427302" /></p><p>值得一提的是，这里的三个 <strong>HarvestedRealms</strong> 分别定义了三个存储域，目前用的是 Editor 版本，因此存储在第三个 <strong>HarvestedRealms</strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="2"></td><td><pre> * Available save realm during save package harvesting </pre></td></tr><tr><td data-num="3"></td><td><pre> * A realm is the set of objects gathered and referenced for a particular domain/context</pre></td></tr><tr><td data-num="4"></td><td><pre> */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ESaveRealm</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint32</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Game<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Optional<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Editor<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>RealmCount<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>None<span class="token operator">=</span> RealmCount</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="createlinker-buildlinker"><a class="anchor" href="#createlinker-buildlinker">#</a> CreateLinker  &amp;&amp; BuildLinker</h3><p>从上面 SaveContext 的数据中可以发现，所有 HarvestedRealms 里的 <strong>Linker</strong> 对象都是 NULL，根据资产加载的经验，每个文件的导出必须依赖一个 Linker。因此还需要创建对应的 Linker 对象来关联导出文件，此外还需要关联上要导出的三个对象：<strong>UMetaData</strong>、<strong>UUserDefinedStruct</strong>、<strong>UUserDefinedStructEditorData</strong>。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219171233982.png" alt="image-20221219171233982" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 创建 Linker 关联</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ESavePackageResult <span class="token function">CreateLinker</span><span class="token punctuation">(</span>FSaveContext<span class="token operator">&amp;</span> SaveContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//...</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// Allocate the linker with a tempfile, forcing byte swapping if wanted.</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    SaveContext<span class="token punctuation">.</span><span class="token function">SetTempFilename</span><span class="token punctuation">(</span><span class="token class-name">FPaths</span><span class="token operator">::</span><span class="token function">CreateTempFilename</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">FPaths</span><span class="token operator">::</span><span class="token function">ProjectSavedDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>BaseFilename<span class="token punctuation">.</span><span class="token function">Left</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    SaveContext<span class="token punctuation">.</span><span class="token function">SetLinker</span><span class="token punctuation">(</span>MakePimpl<span class="token operator">&lt;</span>FLinkerSave<span class="token operator">></span><span class="token punctuation">(</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetTempFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SaveContext<span class="token punctuation">.</span><span class="token function">IsForceByteSwapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SaveContext<span class="token punctuation">.</span><span class="token function">IsSaveUnversionedNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">//...</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// set formatter</span></pre></td></tr><tr><td data-num="12"></td><td><pre>SaveContext<span class="token punctuation">.</span><span class="token function">SetFormatter</span><span class="token punctuation">(</span>MakeUnique<span class="token operator">&lt;</span>FBinaryArchiveFormatter<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>FArchive<span class="token operator">*</span><span class="token punctuation">)</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetLinker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>SaveContext<span class="token punctuation">.</span><span class="token function">SetStructuredArchive</span><span class="token punctuation">(</span>MakeUnique<span class="token operator">&lt;</span>FStructuredArchive<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">return</span> <span class="token function">ReturnSuccessOrCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 主要是把 HarvestedRealms 里的数据解析存储到 Linker 内</span></pre></td></tr><tr><td data-num="18"></td><td><pre>ESavePackageResult <span class="token function">BuildLinker</span><span class="token punctuation">(</span>FSaveContext<span class="token operator">&amp;</span> SaveContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// Setup Linker </span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// Build Name Map</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// Build SoftObjectPathList</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// Build GatherableText</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// Build ImportMap</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// Build ExportMap &amp; Package Netplay data</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">// Build Linker Reverse Mapping</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">// Build DependsMap</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">// Build SoftPackageReference &amp; Searchable Name Map</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">// Map Export Indices</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">return</span> <span class="token function">ReturnSuccessOrCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="序列化"><a class="anchor" href="#序列化">#</a> 序列化</h2><p>序列化流程就是把对象数据打包成二进制文件，Window 环境下序列化 <strong>UUserDefinedStruct</strong> 涉及到的类图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219222221548.png" alt="image-20221219222221548" /></p><ul><li><strong>FHarvestedRealm</strong> 内部的对象非常丰富，承担了序列化数据的临时载体。</li><li><strong>FSaveContext</strong> 是整个流程的核心。负责管理 <strong>FHarvestedRealm</strong> 和各种上下文标记。</li><li><strong>FLinkerSave</strong> 则是用来关联导出文件和 <strong>FSaveContext</strong>，等于是所有功能载体的集合。</li></ul><h3 id="writepackageheader-writeexports"><a class="anchor" href="#writepackageheader-writeexports">#</a> WritePackageHeader &amp;&amp; WriteExports</h3><p>写入其实分为两个部分，一个是头文件（<strong>WritePackageHeader</strong>），包括 Summary 、NameMap 等等，可以参考之前的反序列化；另一个是 ExportObject 内容（<strong>WriteExports</strong>），整体流程比较接近，这里以 WriteExports 为例进行介绍：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219213849222.png" alt="image-20221219213849222" /></p><p>整体流程和  <code>FPackageHarvester::ProcessExport</code>  几乎一致，唯一的区别在于 <strong>FArchiveFromStructuredArchiveImpl</strong> 中的 <strong>InnerArchive</strong> 对象：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FArchive<span class="token operator">&amp;</span> FArchiveFromStructuredArchiveImpl<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">FName</span><span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ProcessExport 中由于还没有初始化 Linker 对象，因此 InnerArchive 是 FPackageHarvester</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// WriteExports 中 Linker 对象已经初始化完毕，因此 InnerArchive 是 FLinkerSave</span></pre></td></tr><tr><td data-num="5"></td><td><pre>InnerArchive <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// ProcessExport</span></pre></td></tr><tr><td data-num="10"></td><td><pre>FArchive<span class="token operator">&amp;</span> FPackageHarvester<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">HarvestExportDataName</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// WriteExports</span></pre></td></tr><tr><td data-num="17"></td><td><pre>FArchive<span class="token operator">&amp;</span> FLinkerSave<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span> FName<span class="token operator">&amp;</span> InName <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">//...</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> Ar <span class="token operator">&lt;&lt;</span> Save <span class="token operator">&lt;&lt;</span> Number<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>而 <strong>FLinkerSave</strong> 最终会调用 <strong>FArchiveFileWriterGeneric</strong> 的 <strong>Serialize</strong> 把 <strong>BufferArray</strong> 内临时存储的二进制内容，写入到  <strong>Handler</strong> 句柄所绑定的文件内。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FLinkerSave</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Saver<span class="token operator">-></span><span class="token function">Serialize</span><span class="token punctuation">(</span> V<span class="token punctuation">,</span> Length <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FArchiveFileWriterGeneric</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Pos <span class="token operator">+=</span> Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> Length <span class="token operator">>=</span> BufferSize <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">FlushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">WriteLowLevel</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>V<span class="token punctuation">,</span> Length <span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">SetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">LogWriteError</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Error writing to file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>int64 Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> Length <span class="token operator">></span><span class="token punctuation">(</span> Copy<span class="token operator">=</span>BufferSize<span class="token operator">-</span>BufferArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>BufferArray<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>V<span class="token punctuation">,</span> Copy<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>Length      <span class="token operator">-=</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>V            <span class="token operator">=</span><span class="token punctuation">(</span> uint8<span class="token operator">*</span> <span class="token punctuation">)</span>V <span class="token operator">+</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">FlushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 回写</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>BufferArray<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>V<span class="token punctuation">,</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FArchiveFileWriterGeneric</span><span class="token operator">::</span><span class="token function">FlushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">bool</span> bDidWriteData <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>int64 BufferNum <span class="token operator">=</span> BufferArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>bDidWriteData <span class="token operator">=</span> <span class="token function">WriteLowLevel</span><span class="token punctuation">(</span>BufferArray<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BufferNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bDidWriteData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">SetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">LogWriteError</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Error flushing file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>BufferArray<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">return</span> bDidWriteData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FArchiveFileWriterGeneric</span><span class="token operator">::</span><span class="token function">WriteLowLevel</span><span class="token punctuation">(</span> <span class="token keyword">const</span> uint8<span class="token operator">*</span> Src<span class="token punctuation">,</span> int64 CountToWrite <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">return</span> Handle<span class="token operator">-></span><span class="token function">Write</span><span class="token punctuation">(</span> Src<span class="token punctuation">,</span> CountToWrite <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="finalizetempoutputfiles"><a class="anchor" href="#finalizetempoutputfiles">#</a> FinalizeTempOutputFiles</h3><p>另外导出文件实际上是个临时文件，因为考虑到写入过程中可能出现的各种异常情况，如果写坏了原文件并且写入异常情况下，可能导致新文件不可用</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219161435715.png" alt="image-20221219161435715" /></p><p>并且，在文件写入成功即将替换掉原文件之前，Unreal 还会对原文件进行备份，避免异常情况下替换失败导致原文件丢失：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>ESavePackageResult <span class="token function">FinalizeTempOutputFiles</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPackagePath<span class="token operator">&amp;</span> PackagePath<span class="token punctuation">,</span> <span class="token keyword">const</span> FSavePackageOutputFileArray<span class="token operator">&amp;</span> OutputFiles<span class="token punctuation">,</span> <span class="token keyword">const</span> FDateTime<span class="token operator">&amp;</span> FinalTimeStamp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 Index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Index <span class="token operator">&lt;</span> OutputFiles<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>Index<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>CanFileBeMoved<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment">// 【step.1】备份文件 .uasset -> old.temp</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FileSystem<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token operator">*</span>TempFilePath<span class="token punctuation">,</span> <span class="token operator">*</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RecordMovedFile</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">,</span> TempFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RestorePackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">return</span> ESavePackageResult<span class="token operator">::</span>Error<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FSavePackageOutputFile<span class="token operator">&amp;</span> File <span class="token operator">:</span> OutputFiles<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span>TempFilePath<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 【step.2】新文件覆盖原文件 new.temp -> .uasset</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FileSystem<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">,</span> <span class="token operator">*</span>File<span class="token punctuation">.</span>TempFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RecordNewFile</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RestorePackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">return</span> ESavePackageResult<span class="token operator">::</span>Error<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FinalTimeStamp <span class="token operator">!=</span> <span class="token class-name">FDateTime</span><span class="token operator">::</span><span class="token function">MinValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>FileSystem<span class="token punctuation">.</span><span class="token function">SetTimeStamp</span><span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">,</span> FinalTimeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// 【step.3】清理原文件的备份 remove old.temp</span></pre></td></tr><tr><td data-num="43"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">DiscardBackupFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">return</span> ESavePackageResult<span class="token operator">::</span>Success<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>至此，整个加载导出流程就基本上梳理完成，其中的某些对象由于依赖关系和复杂的数据结构等问题可能涉及到更为复杂的序列化 &amp;&amp; 反序列化规则，但整理流程应该大同小异，更多细节的内容还需要读者自行摸索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本篇内容和源码均参考 UE5。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;ue-资产导出和加载&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ue-资产导出和加载&quot;&gt;#&lt;/a&gt; UE 资产导出和加载&lt;/h1&gt;
&lt;p&gt;资产（A</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="Asset" scheme="https://hakuya.me/tags/Asset/"/>
    
    <category term="Serialize" scheme="https://hakuya.me/tags/Serialize/"/>
    
  </entry>
  
  <entry>
    <title>UE Delegate</title>
    <link href="https://hakuya.me/learning/unreal/UE%20Delegate/"/>
    <id>https://hakuya.me/learning/unreal/UE%20Delegate/</id>
    <published>2022-11-24T08:19:00.000Z</published>
    <updated>2022-12-29T01:36:04.580Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本篇内容和源码均参考 UE5。</p></div><h1 id="delegate-委托"><a class="anchor" href="#delegate-委托">#</a> Delegate 委托</h1><p>委托是 Unreal 对于 C++ 函数的一种封装。在 Unreal 中，委托也被分成以下几种类型：</p><ul><li>Delegate：简单委托，支持绑定单个执行函数。</li><li>MulticaseDelegate：多播委托，支持绑定一个或多个执行函数。</li><li>Event：事件，带有访问权限控制的多播委托，需要设置可以触发该多播委托的友元类。</li><li>DynamicDelegate：动态委托，支持动态绑定单个执行函数。</li><li>DynamicMulticaseDelegate：动态多播委托，支持动态绑定一个或多个执行函数。</li><li>SparseDynamicDelegate：稀疏动态委托，可以理解为另一种存储形式的 DynamicMulticaseDelegate。</li></ul><h2 id="delegate-简单委托"><a class="anchor" href="#delegate-简单委托">#</a> Delegate 简单委托</h2><p>Delegate 通过宏定义进行声明： <code>DECLARE_DELEGATE_XXXParams</code> ，宏展开后内容如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FOnQuaternionCommitted<span class="token punctuation">,</span> FQuat<span class="token punctuation">,</span> ETextCommit<span class="token operator">::</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> TDelegate<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>FQuat<span class="token punctuation">,</span> ETextCommit<span class="token operator">::</span>Type<span class="token punctuation">)</span><span class="token operator">></span> FOnQuaternionCommitted<span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tdelegate"><a class="anchor" href="#tdelegate">#</a> TDelegate</h3><p>Delegate 声明实际上是对 <strong>TDelegate</strong> 模板类的声明。<strong>TDelegate</strong> 最终会继承 <strong>UserPolicy</strong> 中的 <strong>FDelegateExtras</strong>。</p><p>而 <strong>UserPolicy</strong> 是外部定义的模板类，默认为 <strong>FDefaultDelegateUserPolicy</strong>，<strong>FDelegateExtras</strong> 默认为 <strong>FDelegateBase</strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// TDelegate 本身的定义:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">DelegateSignature</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span> <span class="token operator">=</span> FDefaultDelegateUserPolicy<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TDelegate</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">InRetValType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TDelegate</span><span class="token operator">&lt;</span><span class="token function">InRetValType</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token operator">:</span> <span class="token keyword">public</span> TDelegateBase<span class="token operator">&lt;</span>UserPolicy<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// ...  </span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TDelegateBase</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> UserPolicy<span class="token operator">::</span><span class="token class-name">FDelegateExtras</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FDefaultDelegateUserPolicy</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">using</span> FDelegateInstanceExtras  <span class="token operator">=</span> IDelegateInstance<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">using</span> FDelegateExtras          <span class="token operator">=</span> FDelegateBase<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">using</span> FMulticastDelegateExtras <span class="token operator">=</span> TMulticastDelegateBase<span class="token operator">&lt;</span>FDefaultDelegateUserPolicy<span class="token operator">></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>FDelegateBase</strong> 提供了对 Delegate 的内存管理，所有 <strong>TDelegate</strong> 的创建销毁底层都是基于 <strong>FDelegateBase</strong>。</p><h3 id="delegate-instance"><a class="anchor" href="#delegate-instance">#</a> Delegate Instance</h3><p>Unreal 基于成员函数的类型及函数特性对 Delegate 又划分出了多个不同的实例：</p><ul><li><strong>TBaseRawMethodDelegateInstance</strong>：任意 C++ 类型的<strong>成员函数</strong>委托，对象通过指针进行存储，如果对象被销毁，执行不安全。</li><li><strong>TBaseSPMethodDelegateInstance</strong>：任意 C++ 类型的<strong>成员函数</strong>委托，通过一个线程安全的共享指针来存储委托所绑定的对象，执行是安全的。</li><li><strong>TBaseUFunctionDelegateInstance</strong>：<strong>UObject 对象类型</strong>的<strong> UFunction 函数</strong>委托，基于反射进行查找因此必须是 UFunction 函数，构造时可以只提供<strong>函数名</strong>，提供弱引用指针绑定 UObject 因此也是安全的。</li><li><strong>TBaseUObjectMethodDelegateInstance</strong>：<strong>UObject 对象类型</strong>的<strong>成员函数</strong>委托，构造时需要提供函数指针，对 UObject 也是弱引用，因此执行是安全的。</li><li><strong>TBaseFunctorDelegateInstance</strong>：任意类型的<strong>函数</strong>委托，存储函数指针，执行是安全的。</li><li><strong>TWeakBaseFunctorDelegateInstance</strong>：任意类型的<strong>成员函数</strong>委托，保存的是对象的弱引用，执行是安全的。</li><li><strong>TBaseStaticDelegateInstance</strong>：静态 C++ 函数指针，存储函数指针，执行是安全的。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221029100815344.png" alt="image-20221029100815344" /></p><p>所有 <strong>Delegate Instance</strong> 最终都继承自 <strong>UserPolicy</strong> 中的 <strong>FDelegateInstanceExtras</strong>，并各自实现了函数绑定规则。</p><h4 id="delegate-instance-实例化"><a class="anchor" href="#delegate-instance-实例化">#</a> Delegate Instance 实例化</h4><p>TDelegate 为所有类型的 <strong>Delegate Instance</strong> 提供了实例化的接口：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>* Static: Creates a raw C++ pointer global function delegate</pre></td></tr><tr><td data-num="3"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> VarTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>UE_NODISCARD <span class="token keyword">inline</span> <span class="token keyword">static</span> TDelegate<span class="token operator">&lt;</span><span class="token function">RetValType</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token function">CreateStatic</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">TIdentity</span><span class="token operator">&lt;</span><span class="token function">RetValType</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">::</span>Type InFunc<span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Vars<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>TDelegate<span class="token operator">&lt;</span><span class="token function">RetValType</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name">TBaseStaticDelegateInstance</span><span class="token operator">&lt;</span>FuncType<span class="token punctuation">,</span> UserPolicy<span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span>Result<span class="token punctuation">,</span> InFunc<span class="token punctuation">,</span> Vars<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">return</span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// ...</span></pre></td></tr></table></figure><p>所有类型的 <strong>Delegate Instance</strong> 都在自己的 Create 接口中通过 <strong>FDelegateBase</strong> 提供的 <strong>new</strong> 函数实现内存分配和实例化（自己创建自己了属于是😃</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FORCEINLINE <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span>FDelegateBase<span class="token operator">&amp;</span> Base<span class="token punctuation">,</span> FFuncPtr InFunc<span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Vars<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">new</span> <span class="token punctuation">(</span>Base<span class="token punctuation">)</span> <span class="token function">UnwrappedThisType</span><span class="token punctuation">(</span>InFunc<span class="token punctuation">,</span> Vars<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FDelegateBase</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">private</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    FDelegateAllocatorType<span class="token operator">::</span>ForElementType<span class="token operator">&lt;</span>FAlignedInlineDelegateType<span class="token operator">></span> DelegateAllocator<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>int32 DelegateSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">friend</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t Size<span class="token punctuation">,</span> FDelegateBase<span class="token operator">&amp;</span> Base<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Allocate</span><span class="token punctuation">(</span>int32 Size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>IDelegateInstance<span class="token operator">*</span> CurrentInstance <span class="token operator">=</span> <span class="token function">GetDelegateInstanceProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>CurrentInstance<span class="token operator">-></span><span class="token operator">~</span><span class="token function">IDelegateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>int32 NewDelegateSize <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token operator">::</span><span class="token function">DivideAndRoundUp</span><span class="token punctuation">(</span>Size<span class="token punctuation">,</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>FAlignedInlineDelegateType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>DelegateSize <span class="token operator">!=</span> NewDelegateSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>DelegateAllocator<span class="token punctuation">.</span><span class="token function">ResizeAllocation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> NewDelegateSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FAlignedInlineDelegateType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>DelegateSize <span class="token operator">=</span> NewDelegateSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">return</span> DelegateAllocator<span class="token punctuation">.</span><span class="token function">GetAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t Size<span class="token punctuation">,</span> FDelegateBase<span class="token operator">&amp;</span> Base<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">return</span> Base<span class="token punctuation">.</span><span class="token function">Allocate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int32<span class="token punctuation">)</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>new</strong> 会调用 <strong>Base.Allocate</strong> 分配给 <strong>Delegate Instance</strong> 内存空间，并在该空间内构造 <strong>Delegate Instance</strong>，而由于该空间被 FDelegateBase 中的 <strong>DelegateAllocator</strong> 所管理，因此 Create 最终返回的是 <strong>TDelegate</strong> 模板实例。</p><p>这样，就通过 <strong>TDelegate</strong> 静态函数构造出了个新的 <strong>TDelegate</strong> 实例，TDelegate 实例中还包含了一个 <strong>Delegate Instance</strong> 并绑定了一个该类型的执行函数上。</p><h2 id="multicasedelegate-多播委托"><a class="anchor" href="#multicasedelegate-多播委托">#</a> MulticaseDelegate 多播委托</h2><p>同理，MulticaseDelegate  的宏定义为： <code>DECLARE_MULTICAST_DELEGATE_XXXParams</code> ，宏展开后内容如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_MULTICAST_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FNewItemEvent<span class="token punctuation">,</span> <span class="token keyword">const</span> FVisualLoggerDBRow<span class="token operator">&amp;</span><span class="token punctuation">,</span> int32<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> TMulticastDelegate<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVisualLoggerDBRow<span class="token operator">&amp;</span><span class="token punctuation">,</span> int32<span class="token punctuation">)</span><span class="token operator">></span> FNewItemEvent<span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tmulticastdelegate"><a class="anchor" href="#tmulticastdelegate">#</a> TMulticastDelegate</h3><p>MulticaseDelegate 声明实际上是对 <strong>TMulticastDelegate</strong> 模板类的声明。而 <strong>TMulticastDelegate</strong> 最终会继承 <strong>UserPolicy</strong> 中的 <strong>FMulticastDelegateExtras</strong>。</p><p>默认为 <strong>TMulticastDelegateBase<FDefaultDelegateUserPolicy></strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastDelegate</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token operator">:</span> <span class="token keyword">public</span> UserPolicy<span class="token operator">::</span>FMulticastDelegateExtras</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> FMulticastDelegateExtras <span class="token operator">=</span> TMulticastDelegateBase<span class="token operator">&lt;</span>FDefaultDelegateUserPolicy<span class="token operator">></span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>TMulticastDelegateBase</strong> 本质上是 <strong>TDelegateBase</strong> 的数组，多播（<strong>Broadcast</strong>）其实是对所有已注册的 TDelegateBase 的<strong>倒序</strong>执行（<strong>ExecuteIfSafe</strong>）：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastDelegateBase</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">private</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/** Holds the collection of delegate instances to invoke. */</span></pre></td></tr><tr><td data-num="5"></td><td><pre>InvocationListType InvocationList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/** Holds a lock counter for the invocation list. */</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">mutable</span> int32 InvocationListLockCount<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastDelegate</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token operator">:</span> <span class="token keyword">public</span> UserPolicy<span class="token operator">::</span>FMulticastDelegateExtras</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">bool</span> NeedsCompaction <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">LockInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> InvocationListType<span class="token operator">&amp;</span> LocalInvocationList <span class="token operator">=</span> <span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">GetInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>             <span class="token comment">// call bound functions in reverse order, so we ignore any instances that may be added by callees</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 InvocationListIndex <span class="token operator">=</span> LocalInvocationList<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> InvocationListIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>InvocationListIndex<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">const</span> FDelegate<span class="token operator">&amp;</span> DelegateBase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FDelegate<span class="token operator">&amp;</span><span class="token punctuation">)</span>LocalInvocationList<span class="token punctuation">[</span>InvocationListIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>IDelegateInstance<span class="token operator">*</span> DelegateInstanceInterface <span class="token operator">=</span> <span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">GetDelegateInstanceProtectedHelper</span><span class="token punctuation">(</span>DelegateBase<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>DelegateInstanceInterface <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DelegateInstanceInterfaceType<span class="token operator">*</span><span class="token punctuation">)</span>DelegateInstanceInterface<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">ExecuteIfSafe</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>NeedsCompaction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">UnlockInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>NeedsCompaction<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>TMulticastDelegate<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">CompactInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="event-事件"><a class="anchor" href="#event-事件">#</a> Event 事件</h2><p>Event 本质上就是一个 <strong>MulticaseDelegate</strong> 多播委托。唯一的区别在于 Event 需要指定调用的类型。通过友元类控制，并非所有对象都可以触发 Event。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_EVENT_TwoParams</span><span class="token punctuation">(</span>UEngine<span class="token punctuation">,</span> FLevelActorOuterChangedEvent<span class="token punctuation">,</span> AActor<span class="token operator">*</span><span class="token punctuation">,</span> UObject<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FLevelActorOuterChangedEvent</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TMulticastDelegate</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token class-name">AActor</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">UObject</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">UEngine</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="dynamicdelegate-动态委托"><a class="anchor" href="#dynamicdelegate-动态委托">#</a> DynamicDelegate 动态委托</h2><p>相比于简单委托，动态委托采用了另一套实现体系 ——<strong>TBaseDynamicDelegate</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DYNAMIC_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FOnItemSelected<span class="token punctuation">,</span> UUserWidget<span class="token operator">*</span><span class="token punctuation">,</span> Widget<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> Selected<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FOnItemSelected</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">UUserWidget</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token keyword">const</span> TScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> UUserWidget <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以看到 <strong>Execute</strong> 和 <strong>ExecuteIfBound</strong> 都调用了 <strong>FOnItemSelected_DelegateWrapper</strong>，但并没有 FOnItemSelected_DelegateWrapper 的声明和定义</p><p>答案其实在 <strong>FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE</strong> 中， <code>FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE</code>  本身是一个宏定义，它的定义规则通过 Unreal 的 UHT 生成在 XXX.generated.h 文件内：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">_Script_CommonUI_eventOnItemSelected_Parms</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token expression">UUserWidget<span class="token operator">*</span> Widget<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token expression"><span class="token keyword">bool</span> Selected<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FScriptDelegate<span class="token operator">&amp;</span> OnItemSelected<span class="token punctuation">,</span> UUserWidget<span class="token operator">*</span> Widget<span class="token punctuation">,</span> <span class="token keyword">bool</span> Selected<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token expression">_Script_CommonUI_eventOnItemSelected_Parms Parms<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token expression">Parms<span class="token punctuation">.</span>Widget<span class="token operator">=</span>Widget<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token expression">Parms<span class="token punctuation">.</span>Selected<span class="token operator">=</span>Selected <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token expression">OnItemSelected<span class="token punctuation">.</span>ProcessDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span></span></span></pre></td></tr></table></figure><p>因此最终展开结果应该是这样：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">_Script_CommonUI_eventOnItemSelected_Parms</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    UUserWidget <span class="token operator">*</span>Widget<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">bool</span> Selected<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FScriptDelegate <span class="token operator">&amp;</span>OnItemSelected<span class="token punctuation">,</span> UUserWidget <span class="token operator">*</span>Widget<span class="token punctuation">,</span> <span class="token keyword">bool</span> Selected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    _Script_CommonUI_eventOnItemSelected_Parms Parms<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    Parms<span class="token punctuation">.</span>Widget <span class="token operator">=</span> Widget<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    Parms<span class="token punctuation">.</span>Selected <span class="token operator">=</span> Selected <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    OnItemSelected<span class="token punctuation">.</span>ProcessDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FOnItemSelected</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">UUserWidget</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token keyword">const</span> TScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> UUserWidget <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tscriptdelegate"><a class="anchor" href="#tscriptdelegate">#</a> TScriptDelegate</h3><p><strong>TScriptDelegate</strong> 是所有 DynamicDelegate 的基类，提供绑定 / 解绑 / 执行等基础接口。相比于简单委托在绑定完成后，只能通过 <strong>Delegate Instance</strong> 销毁重建的形式来切换绑定对象；<strong>TScriptDelegate</strong> 采用了更优雅的<strong>动态</strong>绑定机制，即通过<strong>对象实例指针</strong> &amp;&amp; <strong>函数名</strong> 利用反射机制的绑定流程。然而反射机制的实现，依赖于 <strong>UObject</strong> 对象关联的 UClass 中包含的元数据，因此动态委托的绑定函数也必须是 <strong>UFunction</strong> 类型。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TWeakPtr</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">RetValType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TBaseDynamicDelegate</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TScriptDelegate</span><span class="token operator">&lt;</span><span class="token class-name">TWeakPtr</span><span class="token operator">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TWeakPtr</span> <span class="token operator">=</span> FWeakObjectPtr<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TScriptDelegate</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre> * Binds a UFunction to this delegate.</pre></td></tr><tr><td data-num="12"></td><td><pre> *</pre></td></tr><tr><td data-num="13"></td><td><pre> * @param InObject The object to call the function on.</pre></td></tr><tr><td data-num="14"></td><td><pre> * @param InFunctionName The name of the function to call.</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">void</span> <span class="token function">BindUFunction</span><span class="token punctuation">(</span> UObject<span class="token operator">*</span> InObject<span class="token punctuation">,</span> <span class="token keyword">const</span> FName<span class="token operator">&amp;</span> InFunctionName <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>Object <span class="token operator">=</span> InObject<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>FunctionName <span class="token operator">=</span> InFunctionName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    </pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="23"></td><td><pre> * Unbinds this delegate</pre></td></tr><tr><td data-num="24"></td><td><pre> */</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">void</span> <span class="token function">Unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>Object <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>FunctionName <span class="token operator">=</span> NAME_None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    </pre></td></tr><tr><td data-num="31"></td><td><pre>     <span class="token comment">/**</pre></td></tr><tr><td data-num="32"></td><td><pre> * Executes a delegate by calling the named function on the object bound to the delegate.  You should</pre></td></tr><tr><td data-num="33"></td><td><pre> * always first verify that the delegate is safe to execute by calling IsBound() before calling this function.</pre></td></tr><tr><td data-num="34"></td><td><pre> * In general, you should never call this function directly.  Instead, call Execute() on a derived class.</pre></td></tr><tr><td data-num="35"></td><td><pre> *</pre></td></tr><tr><td data-num="36"></td><td><pre> * @paramParametersParameter structure</pre></td></tr><tr><td data-num="37"></td><td><pre> */</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">//CORE_API void ProcessDelegate(void* Parameters) const;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">UObjectTemplate</span><span class="token operator">></span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">void</span> <span class="token function">ProcessDelegate</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> Parameters <span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// sure IsBound() returns true before calling ProcessDelegate()!</span></pre></td></tr><tr><td data-num="43"></td><td><pre>UObjectTemplate<span class="token operator">*</span> ObjectPtr <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span> UObjectTemplate<span class="token operator">*</span> <span class="token operator">></span><span class="token punctuation">(</span> Object<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Down-cast</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">checkSlow</span><span class="token punctuation">(</span> <span class="token function">IsValid</span><span class="token punctuation">(</span>ObjectPtr<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// Object *must* implement the specified function</span></pre></td></tr><tr><td data-num="47"></td><td><pre>UFunction<span class="token operator">*</span> Function <span class="token operator">=</span> ObjectPtr<span class="token operator">-></span><span class="token function">FindFunctionChecked</span><span class="token punctuation">(</span> FunctionName <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// Execute the delegate!</span></pre></td></tr><tr><td data-num="50"></td><td><pre>ObjectPtr<span class="token operator">-></span><span class="token function">ProcessEvent</span><span class="token punctuation">(</span>Function<span class="token punctuation">,</span> Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>UFunction<span class="token operator">*</span> <span class="token class-name">UObject</span><span class="token operator">::</span><span class="token function">FindFunctionChecked</span><span class="token punctuation">(</span> FName InName <span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>UFunction<span class="token operator">*</span> Result <span class="token operator">=</span> <span class="token function">FindFunction</span><span class="token punctuation">(</span>InName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Result <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogScriptCore<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Failed to find function %s in %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>InName<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">GetFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">return</span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>UFunction<span class="token operator">*</span> <span class="token class-name">UObject</span><span class="token operator">::</span><span class="token function">FindFunction</span><span class="token punctuation">(</span> FName InName <span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">return</span> <span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">FindFunctionByName</span><span class="token punctuation">(</span>InName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="dynamicmulticasedelegate-动态多播委托"><a class="anchor" href="#dynamicmulticasedelegate-动态多播委托">#</a> DynamicMulticaseDelegate 动态多播委托</h2><p>该委托可以动态绑定一组成员函数，对于支持编辑器形式 (需要动态增删) 的事件调用非常的有效（尤其是蓝图</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FOnBeforePopup<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> URL<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> Frame<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">WebBrowser_eventOnBeforePopup_Parms</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    FString URL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    FString Frame<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FOnBeforePopup_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FMulticastScriptDelegate <span class="token operator">&amp;</span>OnBeforePopup<span class="token punctuation">,</span> <span class="token keyword">const</span> FString <span class="token operator">&amp;</span>URL<span class="token punctuation">,</span> <span class="token keyword">const</span> FString <span class="token operator">&amp;</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    WebBrowser_eventOnBeforePopup_Parms Parms<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    Parms<span class="token punctuation">.</span>URL <span class="token operator">=</span> URL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    Parms<span class="token punctuation">.</span>Frame <span class="token operator">=</span> Frame<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    OnBeforePopup<span class="token punctuation">.</span>ProcessMulticastDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FOnBeforePopup</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicMulticastDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">FString</span><span class="token punctuation">,</span> <span class="token class-name">FString</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">FOnBeforePopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FOnBeforePopup</span><span class="token punctuation">(</span><span class="token keyword">const</span> TMulticastScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicMulticastDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> FString<span class="token punctuation">,</span> FString<span class="token operator">></span><span class="token punctuation">(</span>InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>FString InParam1<span class="token punctuation">,</span> FString InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token function">FOnBeforePopup_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tmulticastscriptdelegate"><a class="anchor" href="#tmulticastscriptdelegate">#</a> TMulticastScriptDelegate</h3><p>TMulticastScriptDelegate 是所有 DynamicMulticaseDelegate 的基类，负责管理和维护 <strong>TScriptDelegate</strong> 的数组</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221027104606040.png" alt="image-20221027104606040" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastScriptDelegate</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre> * Executes a multi-cast delegate by calling all functions on objects bound to the delegate.  Always</pre></td></tr><tr><td data-num="5"></td><td><pre> * safe to call, even if when no objects are bound, or if objects have expired.  In general, you should</pre></td></tr><tr><td data-num="6"></td><td><pre> * never call this function directly.  Instead, call Broadcast() on a derived class.</pre></td></tr><tr><td data-num="7"></td><td><pre> *</pre></td></tr><tr><td data-num="8"></td><td><pre> * @paramParamsParameter structure</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">UObjectTemplate</span><span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">ProcessMulticastDelegate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> Parameters<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> InvocationList<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// Create a copy of the invocation list, just in case the list is modified by one of the callbacks during the broadcast</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">typedef</span> TArray<span class="token operator">&lt;</span> TScriptDelegate<span class="token operator">&lt;</span>TWeakPtr<span class="token operator">></span><span class="token punctuation">,</span> TInlineAllocator<span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token operator">></span> FInlineInvocationList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>FInlineInvocationList InvocationListCopy <span class="token operator">=</span> <span class="token function">FInlineInvocationList</span><span class="token punctuation">(</span>InvocationList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// Invoke each bound function</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">typename</span> <span class="token class-name">FInlineInvocationList</span><span class="token operator">::</span>TConstIterator <span class="token function">FunctionIt</span><span class="token punctuation">(</span> InvocationListCopy <span class="token punctuation">)</span><span class="token punctuation">;</span> FunctionIt<span class="token punctuation">;</span> <span class="token operator">++</span>FunctionIt <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> FunctionIt<span class="token operator">-></span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// Invoke this delegate!</span></pre></td></tr><tr><td data-num="25"></td><td><pre>FunctionIt<span class="token operator">-></span><span class="token keyword">template</span> ProcessDelegate<span class="token operator">&lt;</span>UObjectTemplate<span class="token operator">></span><span class="token punctuation">(</span>Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> FunctionIt<span class="token operator">-></span><span class="token function">IsCompactable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// Function couldn't be executed, so remove it.  Note that because the original list could have been modified by one of the callbacks, we have to search for the function to remove here.</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">RemoveInternal</span><span class="token punctuation">(</span> <span class="token operator">*</span>FunctionIt <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    </pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">typedef</span> TArray<span class="token operator">&lt;</span> TScriptDelegate<span class="token operator">&lt;</span>TWeakPtr<span class="token operator">></span> <span class="token operator">></span> FInvocationList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">/** Ordered list functions to invoke when the Broadcast function is called */</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">mutable</span> FInvocationList InvocationList<span class="token punctuation">;</span><span class="token comment">// Mutable so that we can housekeep list even with 'const' broadcasts</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="sparsedynamicdelegate-稀疏动态委托"><a class="anchor" href="#sparsedynamicdelegate-稀疏动态委托">#</a> SparseDynamicDelegate 稀疏动态委托</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FActorOnClickedSignature<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> OnClicked<span class="token punctuation">,</span> AActor<span class="token operator">*</span><span class="token punctuation">,</span> TouchedActor<span class="token punctuation">,</span> FKey<span class="token punctuation">,</span> ButtonPressed<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">_Script_Engine_eventActorOnClickedSignature_Parms</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    AActor <span class="token operator">*</span>TouchedActor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    FKey ButtonPressed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FActorOnClickedSignature_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FMulticastScriptDelegate <span class="token operator">&amp;</span>ActorOnClickedSignature<span class="token punctuation">,</span> AActor <span class="token operator">*</span>TouchedActor<span class="token punctuation">,</span> FKey ButtonPressed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    _Script_Engine_eventActorOnClickedSignature_Parms Parms<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    Parms<span class="token punctuation">.</span>TouchedActor <span class="token operator">=</span> TouchedActor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    Parms<span class="token punctuation">.</span>ButtonPressed <span class="token operator">=</span> ButtonPressed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    ActorOnClickedSignature<span class="token punctuation">.</span>ProcessMulticastDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FActorOnClickedSignature_MCSignature</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicMulticastDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">AActor</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">FKey</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">FActorOnClickedSignature_MCSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FActorOnClickedSignature_MCSignature</span><span class="token punctuation">(</span><span class="token keyword">const</span> TMulticastScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicMulticastDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> AActor <span class="token operator">*</span><span class="token punctuation">,</span> FKey<span class="token operator">></span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>AActor <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> FKey InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token function">FActorOnClickedSignature_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FActorOnClickedSignatureInfoGetter</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">GetDelegateName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"OnClicked"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">static</span> size_t <span class="token function">GetDelegateOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">offsetof</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> OnClicked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FActorOnClickedSignature</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TSparseDynamicDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FActorOnClickedSignature_MCSignature</span><span class="token punctuation">,</span> <span class="token class-name">AActor</span><span class="token punctuation">,</span> <span class="token class-name">FActorOnClickedSignatureInfoGetter</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>SparseDynamicDelegate</strong> 宏展开相对复杂一些，主要内容可以分为两部分：</p><ul><li>继承自 <strong>TBaseDynamicMulticastDelegate</strong> 的 <strong>FActorOnClickedSignature_MCSignature</strong> 类，实现了基本的动态多播委托逻辑，但命名上做了改动，没有正常暴露给外部使用。</li><li>继承自 <strong>TSparseDynamicDelegate&lt;FActorOnClickedSignature_MCSignature...&gt;</strong> 的 <strong>FActorOnClickedSignature</strong> 类，重新实现了 TBaseDynamicMulticastDelegate 中操作委托数组的各项接口，重定向修改到了 <strong>FSparseDelegateStorage</strong>。开发者实际上是通过 FActorOnClickedSignature 间接操作 FActorOnClickedSignature_MCSignature。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221027113233720.png" alt="image-20221027113233720" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FSparseDelegate</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre>* Adds a function delegate to this multi-cast delegate's invocation list if a delegate with the same signature</pre></td></tr><tr><td data-num="5"></td><td><pre>* doesn't already exist in the invocation list</pre></td></tr><tr><td data-num="6"></td><td><pre>*</pre></td></tr><tr><td data-num="7"></td><td><pre>* @paramDelegateOwnerUObject that owns the resolved sparse delegate</pre></td></tr><tr><td data-num="8"></td><td><pre>* @paramDelegateNameName of the resolved sparse delegate</pre></td></tr><tr><td data-num="9"></td><td><pre>* @paramInDelegateDelegate to bind to the sparse delegate</pre></td></tr><tr><td data-num="10"></td><td><pre>* </pre></td></tr><tr><td data-num="11"></td><td><pre>* NOTE:  Only call this function from blueprint sparse delegate infrastructure on a resolved generic FScriptDelegate pointer.</pre></td></tr><tr><td data-num="12"></td><td><pre>*        Generally from C++ you should call AddUnique() directly.</pre></td></tr><tr><td data-num="13"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">__Internal_AddUnique</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> DelegateOwner<span class="token punctuation">,</span> FName DelegateName<span class="token punctuation">,</span> FScriptDelegate InDelegate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>bIsBound <span class="token operator">|=</span> <span class="token class-name">FSparseDelegateStorage</span><span class="token operator">::</span><span class="token function">AddUnique</span><span class="token punctuation">(</span>DelegateOwner<span class="token punctuation">,</span> DelegateName<span class="token punctuation">,</span> <span class="token function">MoveTemp</span><span class="token punctuation">(</span>InDelegate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="fsparsedelegatestorage"><a class="anchor" href="#fsparsedelegatestorage">#</a> FSparseDelegateStorage</h3><p><strong>FSparseDelegateStorage</strong> 可以理解成一个维护全局动态多播委托的单例，它的所有成员变量 / 函数都是 Static。通过一个全局 map 来记录 UObject 中所有 <strong>FMulticastScriptDelegate</strong> 的弱引用，而 <strong>FMulticastScriptDelegate</strong> 中又存储了多个 <strong>FScriptDelegate</strong>。</p><p>顺带一提 <strong>FScriptDelegate</strong> 和 <strong>FMulticastScriptDelegate</strong> 分别是 <strong>TScriptDelegate</strong> 和 <strong>TMulticastScriptDelegate</strong> 的特化版本... 这里经常容易搞混。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Typedef script delegates for convenience.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">typedef</span> TScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> FScriptDelegate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">typedef</span> TMulticastScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> FMulticastScriptDelegate<span class="token punctuation">;</span></pre></td></tr></table></figure><p>通过 <strong>TSparseDynamicDelegate</strong> 向 <strong>FMulticastScriptDelegate</strong> 添加 <strong>FScriptDelegate</strong> 时，会先把 <strong>FMulticastScriptDelegate</strong> 注册到 <strong>FSparseDelegateStorage</strong> 全局 map 中，再把 <strong>FScriptDelegate</strong> 添加到 <strong>FMulticastScriptDelegate</strong> 容器内。</p><blockquote><p>注意：<strong>DelegateOwner</strong> 只是持有<strong>操作</strong> FMulticastScriptDelegate 的 <strong>TSparseDynamicDelegate</strong> 对象，<strong>FSparseDelegateStorage</strong> 才负责存储 FMulticastScriptDelegate 和所有注册的 FScriptDelegate；<strong>DelegateOwner</strong> 通过 <strong>TSparseDynamicDelegate</strong> 对 <strong>FSparseDelegateStorage</strong> 中的数据进行修改。</p></blockquote><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 添加</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FSparseDelegateStorage</span><span class="token operator">::</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> DelegateOwner<span class="token punctuation">,</span> <span class="token keyword">const</span> FName DelegateName<span class="token punctuation">,</span> FScriptDelegate Delegate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">bool</span> bDelegateWasBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Delegate<span class="token punctuation">.</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>FScopeLock <span class="token function">SparseDelegateMapLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SparseDelegateMapCritical<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>SparseDelegates<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>SparseDelegateObjectListener<span class="token punctuation">.</span><span class="token function">EnableListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>FSparseDelegateMap<span class="token operator">&amp;</span> DelegateMap <span class="token operator">=</span> SparseDelegates<span class="token punctuation">.</span><span class="token function">FindOrAdd</span><span class="token punctuation">(</span>DelegateOwner<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span><span class="token operator">&amp;</span> MulticastDelegate <span class="token operator">=</span> DelegateMap<span class="token punctuation">.</span><span class="token function">FindOrAdd</span><span class="token punctuation">(</span>DelegateName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>MulticastDelegate<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>MulticastDelegate <span class="token operator">=</span> MakeShared<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 实际操作的是 FSparseDelegateStorage 中创建 or 已存在的 FMulticastScriptDelegate</span></pre></td></tr><tr><td data-num="21"></td><td><pre>MulticastDelegate<span class="token operator">-></span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">MoveTemp</span><span class="token punctuation">(</span>Delegate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>bDelegateWasBound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">return</span> bDelegateWasBound<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 查询</span></pre></td></tr><tr><td data-num="28"></td><td><pre>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span> <span class="token class-name">FSparseDelegateStorage</span><span class="token operator">::</span><span class="token function">GetSharedMulticastDelegate</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> DelegateOwner<span class="token punctuation">,</span> <span class="token keyword">const</span> FName DelegateName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>FScopeLock <span class="token function">SparseDelegateMapLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SparseDelegateMapCritical<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FSparseDelegateMap<span class="token operator">*</span> DelegateMap <span class="token operator">=</span> SparseDelegates<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>DelegateOwner<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span><span class="token operator">*</span> MulticastDelegatePtr <span class="token operator">=</span> DelegateMap<span class="token operator">-></span><span class="token function">Find</span><span class="token punctuation">(</span>DelegateName<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>Result <span class="token operator">=</span> <span class="token operator">*</span>MulticastDelegatePtr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">return</span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>Unreal 提供了多种委托，其中「Delegate 」用法灵活，支持各种类型的函数绑定，执行效率也较<strong>高</strong>，对于有返回值的函数调用时<strong>不太安全</strong>；「MulticaseDelegate 」在原有基础上扩充了一对多的绑定关系；「Event 」又在 MulticaseDelegate 的基础上通过  <code>friend class</code>  约束了调用者；「DynamicDelegate 」相比于 Delegate，舍弃了更多函数类型的支持，降低了执行效率，但能够动态绑定且调用更加的<strong>安全</strong>；「DynamicMulticaseDelegate 」同样在原有基础上扩充了一对多的绑定关系；「SparseDynamicDelegate」又在 DynamicMulticaseDelegate 基础上重定向了委托的存储位置，通过 FSparseDelegateStorage 全局 map 集中管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本篇内容和源码均参考 UE5。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;delegate-委托&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delegate-委托&quot;&gt;#&lt;/a&gt; Delegate 委托&lt;/h1&gt;
&lt;p&gt;委</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="Delegate" scheme="https://hakuya.me/tags/Delegate/"/>
    
  </entry>
  
  <entry>
    <title>UE VirtualMachine</title>
    <link href="https://hakuya.me/learning/unreal/UE%20VirtualMachine/"/>
    <id>https://hakuya.me/learning/unreal/UE%20VirtualMachine/</id>
    <published>2022-11-24T08:19:00.000Z</published>
    <updated>2023-01-12T01:33:35.726Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本篇内容和源码均参考 UE5。</p></div><h1 id="ue-virtualmachine"><a class="anchor" href="#ue-virtualmachine">#</a> UE  VirtualMachine</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EExprToken</span> <span class="token operator">:</span> uint8</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Variable references.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>EX_LocalVariable<span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment">// A local variable.</span></pre></td></tr><tr><td data-num="5"></td><td><pre>EX_InstanceVariable<span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">,</span><span class="token comment">// An object variable.</span></pre></td></tr><tr><td data-num="6"></td><td><pre>EX_DefaultVariable<span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token comment">// Default variable for a class context.</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//= 0x03,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>EX_Return<span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">,</span><span class="token comment">// Return from function.</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//= 0x05,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>EX_Jump<span class="token operator">=</span> <span class="token number">0x06</span><span class="token punctuation">,</span><span class="token comment">// Goto a local address in code.</span></pre></td></tr><tr><td data-num="11"></td><td><pre>EX_JumpIfNot<span class="token operator">=</span> <span class="token number">0x07</span><span class="token punctuation">,</span><span class="token comment">// Goto if not expression.</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">//= 0x08,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>EX_Assert<span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">,</span><span class="token comment">// Assertion.</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">//= 0x0A,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>EX_Nothing<span class="token operator">=</span> <span class="token number">0x0B</span><span class="token punctuation">,</span><span class="token comment">// No operation.</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//= 0x0C,</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//= 0x0D,</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//= 0x0E,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>EX_Let<span class="token operator">=</span> <span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token comment">// Assign an arbitrary size value to a variable.</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//= 0x10,</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">//= 0x11,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>EX_ClassContext<span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">,</span><span class="token comment">// Class default object context.</span></pre></td></tr><tr><td data-num="23"></td><td><pre>EX_MetaCast             <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token comment">// Metaclass cast.</span></pre></td></tr><tr><td data-num="24"></td><td><pre>EX_LetBool<span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token comment">// Let boolean variable.</span></pre></td></tr><tr><td data-num="25"></td><td><pre>EX_EndParmValue<span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">,</span><span class="token comment">// end of default value for optional function parameter</span></pre></td></tr><tr><td data-num="26"></td><td><pre>EX_EndFunctionParms<span class="token operator">=</span> <span class="token number">0x16</span><span class="token punctuation">,</span><span class="token comment">// End of function call parameters.</span></pre></td></tr><tr><td data-num="27"></td><td><pre>EX_Self<span class="token operator">=</span> <span class="token number">0x17</span><span class="token punctuation">,</span><span class="token comment">// Self object.</span></pre></td></tr><tr><td data-num="28"></td><td><pre>EX_Skip<span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">,</span><span class="token comment">// Skippable expression.</span></pre></td></tr><tr><td data-num="29"></td><td><pre>EX_Context<span class="token operator">=</span> <span class="token number">0x19</span><span class="token punctuation">,</span><span class="token comment">// Call a function through an object context.</span></pre></td></tr><tr><td data-num="30"></td><td><pre>EX_Context_FailSilent<span class="token operator">=</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token comment">// Call a function through an object context (can fail silently if the context is NULL; only generated for functions that don't have output or return values).</span></pre></td></tr><tr><td data-num="31"></td><td><pre>EX_VirtualFunction<span class="token operator">=</span> <span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token comment">// A function call with parameters.</span></pre></td></tr><tr><td data-num="32"></td><td><pre>EX_FinalFunction<span class="token operator">=</span> <span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token comment">// A prebound function call with parameters.</span></pre></td></tr><tr><td data-num="33"></td><td><pre>EX_IntConst<span class="token operator">=</span> <span class="token number">0x1D</span><span class="token punctuation">,</span><span class="token comment">// Int constant.</span></pre></td></tr><tr><td data-num="34"></td><td><pre>EX_FloatConst<span class="token operator">=</span> <span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token comment">// Floating point constant.</span></pre></td></tr><tr><td data-num="35"></td><td><pre>EX_StringConst<span class="token operator">=</span> <span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token comment">// String constant.</span></pre></td></tr><tr><td data-num="36"></td><td><pre>EX_ObjectConst    <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">,</span><span class="token comment">// An object constant.</span></pre></td></tr><tr><td data-num="37"></td><td><pre>EX_NameConst<span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">,</span><span class="token comment">// A name constant.</span></pre></td></tr><tr><td data-num="38"></td><td><pre>EX_RotationConst<span class="token operator">=</span> <span class="token number">0x22</span><span class="token punctuation">,</span><span class="token comment">// A rotation constant.</span></pre></td></tr><tr><td data-num="39"></td><td><pre>EX_VectorConst<span class="token operator">=</span> <span class="token number">0x23</span><span class="token punctuation">,</span><span class="token comment">// A vector constant.</span></pre></td></tr><tr><td data-num="40"></td><td><pre>EX_ByteConst<span class="token operator">=</span> <span class="token number">0x24</span><span class="token punctuation">,</span><span class="token comment">// A byte constant.</span></pre></td></tr><tr><td data-num="41"></td><td><pre>EX_IntZero<span class="token operator">=</span> <span class="token number">0x25</span><span class="token punctuation">,</span><span class="token comment">// Zero.</span></pre></td></tr><tr><td data-num="42"></td><td><pre>EX_IntOne<span class="token operator">=</span> <span class="token number">0x26</span><span class="token punctuation">,</span><span class="token comment">// One.</span></pre></td></tr><tr><td data-num="43"></td><td><pre>EX_True<span class="token operator">=</span> <span class="token number">0x27</span><span class="token punctuation">,</span><span class="token comment">// Bool True.</span></pre></td></tr><tr><td data-num="44"></td><td><pre>EX_False<span class="token operator">=</span> <span class="token number">0x28</span><span class="token punctuation">,</span><span class="token comment">// Bool False.</span></pre></td></tr><tr><td data-num="45"></td><td><pre>EX_TextConst<span class="token operator">=</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token comment">// FText constant</span></pre></td></tr><tr><td data-num="46"></td><td><pre>EX_NoObject<span class="token operator">=</span> <span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token comment">// NoObject.</span></pre></td></tr><tr><td data-num="47"></td><td><pre>EX_TransformConst<span class="token operator">=</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token comment">// A transform constant</span></pre></td></tr><tr><td data-num="48"></td><td><pre>EX_IntConstByte<span class="token operator">=</span> <span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token comment">// Int constant that requires 1 byte.</span></pre></td></tr><tr><td data-num="49"></td><td><pre>EX_NoInterface<span class="token operator">=</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token comment">// A null interface (similar to EX_NoObject, but for interfaces)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>EX_DynamicCast<span class="token operator">=</span> <span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token comment">// Safe dynamic class casting.</span></pre></td></tr><tr><td data-num="51"></td><td><pre>EX_StructConst<span class="token operator">=</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token comment">// An arbitrary UStruct constant</span></pre></td></tr><tr><td data-num="52"></td><td><pre>EX_EndStructConst<span class="token operator">=</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token comment">// End of UStruct constant</span></pre></td></tr><tr><td data-num="53"></td><td><pre>EX_SetArray<span class="token operator">=</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token comment">// Set the value of arbitrary array</span></pre></td></tr><tr><td data-num="54"></td><td><pre>EX_EndArray<span class="token operator">=</span> <span class="token number">0x32</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="55"></td><td><pre>EX_PropertyConst<span class="token operator">=</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token comment">// FProperty constant.</span></pre></td></tr><tr><td data-num="56"></td><td><pre>EX_UnicodeStringConst   <span class="token operator">=</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token comment">// Unicode string constant.</span></pre></td></tr><tr><td data-num="57"></td><td><pre>EX_Int64Const<span class="token operator">=</span> <span class="token number">0x35</span><span class="token punctuation">,</span><span class="token comment">// 64-bit integer constant.</span></pre></td></tr><tr><td data-num="58"></td><td><pre>EX_UInt64Const<span class="token operator">=</span> <span class="token number">0x36</span><span class="token punctuation">,</span><span class="token comment">// 64-bit unsigned integer constant.</span></pre></td></tr><tr><td data-num="59"></td><td><pre>EX_DoubleConst<span class="token operator">=</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token comment">// Double constant.</span></pre></td></tr><tr><td data-num="60"></td><td><pre>EX_Cast<span class="token operator">=</span> <span class="token number">0x38</span><span class="token punctuation">,</span><span class="token comment">// A casting operator which reads the type as the subsequent byte</span></pre></td></tr><tr><td data-num="61"></td><td><pre>EX_SetSet<span class="token operator">=</span> <span class="token number">0x39</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="62"></td><td><pre>EX_EndSet<span class="token operator">=</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="63"></td><td><pre>EX_SetMap<span class="token operator">=</span> <span class="token number">0x3B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="64"></td><td><pre>EX_EndMap<span class="token operator">=</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="65"></td><td><pre>EX_SetConst<span class="token operator">=</span> <span class="token number">0x3D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="66"></td><td><pre>EX_EndSetConst<span class="token operator">=</span> <span class="token number">0x3E</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="67"></td><td><pre>EX_MapConst<span class="token operator">=</span> <span class="token number">0x3F</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="68"></td><td><pre>EX_EndMapConst<span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="69"></td><td><pre>EX_Vector3fConst<span class="token operator">=</span> <span class="token number">0x41</span><span class="token punctuation">,</span><span class="token comment">// A float vector constant.</span></pre></td></tr><tr><td data-num="70"></td><td><pre>EX_StructMemberContext<span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token comment">// Context expression to address a property within a struct</span></pre></td></tr><tr><td data-num="71"></td><td><pre>EX_LetMulticastDelegate<span class="token operator">=</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token comment">// Assignment to a multi-cast delegate</span></pre></td></tr><tr><td data-num="72"></td><td><pre>EX_LetDelegate<span class="token operator">=</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token comment">// Assignment to a delegate</span></pre></td></tr><tr><td data-num="73"></td><td><pre>EX_LocalVirtualFunction<span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token comment">// Special instructions to quickly call a virtual function that we know is going to run only locally</span></pre></td></tr><tr><td data-num="74"></td><td><pre>EX_LocalFinalFunction<span class="token operator">=</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token comment">// Special instructions to quickly call a final function that we know is going to run only locally</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment">//= 0x47, // CST_ObjectToBool</span></pre></td></tr><tr><td data-num="76"></td><td><pre>EX_LocalOutVariable<span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token comment">// local out (pass by reference) function parameter</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token comment">//= 0x49, // CST_InterfaceToBool</span></pre></td></tr><tr><td data-num="78"></td><td><pre>EX_DeprecatedOp4A<span class="token operator">=</span> <span class="token number">0x4A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="79"></td><td><pre>EX_InstanceDelegate<span class="token operator">=</span> <span class="token number">0x4B</span><span class="token punctuation">,</span><span class="token comment">// const reference to a delegate or normal function object</span></pre></td></tr><tr><td data-num="80"></td><td><pre>EX_PushExecutionFlow<span class="token operator">=</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token comment">// push an address on to the execution flow stack for future execution when a EX_PopExecutionFlow is executed.   Execution continues on normally and doesn't change to the pushed address.</span></pre></td></tr><tr><td data-num="81"></td><td><pre>EX_PopExecutionFlow<span class="token operator">=</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token comment">// continue execution at the last address previously pushed onto the execution flow stack.</span></pre></td></tr><tr><td data-num="82"></td><td><pre>EX_ComputedJump<span class="token operator">=</span> <span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token comment">// Goto a local address in code, specified by an integer value.</span></pre></td></tr><tr><td data-num="83"></td><td><pre>EX_PopExecutionFlowIfNot <span class="token operator">=</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token comment">// continue execution at the last address previously pushed onto the execution flow stack, if the condition is not true.</span></pre></td></tr><tr><td data-num="84"></td><td><pre>EX_Breakpoint<span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token comment">// Breakpoint.  Only observed in the editor, otherwise it behaves like EX_Nothing.</span></pre></td></tr><tr><td data-num="85"></td><td><pre>EX_InterfaceContext<span class="token operator">=</span> <span class="token number">0x51</span><span class="token punctuation">,</span><span class="token comment">// Call a function through a native interface variable</span></pre></td></tr><tr><td data-num="86"></td><td><pre>EX_ObjToInterfaceCast   <span class="token operator">=</span> <span class="token number">0x52</span><span class="token punctuation">,</span><span class="token comment">// Converting an object reference to native interface variable</span></pre></td></tr><tr><td data-num="87"></td><td><pre>EX_EndOfScript<span class="token operator">=</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token comment">// Last byte in script code</span></pre></td></tr><tr><td data-num="88"></td><td><pre>EX_CrossInterfaceCast<span class="token operator">=</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token comment">// Converting an interface variable reference to native interface variable</span></pre></td></tr><tr><td data-num="89"></td><td><pre>EX_InterfaceToObjCast   <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token comment">// Converting an interface variable reference to an object</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token comment">//= 0x56,</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token comment">//= 0x57,</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment">//= 0x58,</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token comment">//= 0x59,</span></pre></td></tr><tr><td data-num="94"></td><td><pre>EX_WireTracepoint<span class="token operator">=</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token comment">// Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.</span></pre></td></tr><tr><td data-num="95"></td><td><pre>EX_SkipOffsetConst<span class="token operator">=</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token comment">// A CodeSizeSkipOffset constant</span></pre></td></tr><tr><td data-num="96"></td><td><pre>EX_AddMulticastDelegate <span class="token operator">=</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token comment">// Adds a delegate to a multicast delegate's targets</span></pre></td></tr><tr><td data-num="97"></td><td><pre>EX_ClearMulticastDelegate <span class="token operator">=</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token comment">// Clears all delegates in a multicast target</span></pre></td></tr><tr><td data-num="98"></td><td><pre>EX_Tracepoint<span class="token operator">=</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token comment">// Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.</span></pre></td></tr><tr><td data-num="99"></td><td><pre>EX_LetObj<span class="token operator">=</span> <span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token comment">// assign to any object ref pointer</span></pre></td></tr><tr><td data-num="100"></td><td><pre>EX_LetWeakObjPtr<span class="token operator">=</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token comment">// assign to a weak object pointer</span></pre></td></tr><tr><td data-num="101"></td><td><pre>EX_BindDelegate<span class="token operator">=</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token comment">// bind object and name to delegate</span></pre></td></tr><tr><td data-num="102"></td><td><pre>EX_RemoveMulticastDelegate <span class="token operator">=</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token comment">// Remove a delegate from a multicast delegate's targets</span></pre></td></tr><tr><td data-num="103"></td><td><pre>EX_CallMulticastDelegate <span class="token operator">=</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token comment">// Call multicast delegate</span></pre></td></tr><tr><td data-num="104"></td><td><pre>EX_LetValueOnPersistentFrame <span class="token operator">=</span> <span class="token number">0x64</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="105"></td><td><pre>EX_ArrayConst<span class="token operator">=</span> <span class="token number">0x65</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="106"></td><td><pre>EX_EndArrayConst<span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="107"></td><td><pre>EX_SoftObjectConst<span class="token operator">=</span> <span class="token number">0x67</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="108"></td><td><pre>EX_CallMath<span class="token operator">=</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token comment">// static pure function from on local call space</span></pre></td></tr><tr><td data-num="109"></td><td><pre>EX_SwitchValue<span class="token operator">=</span> <span class="token number">0x69</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="110"></td><td><pre>EX_InstrumentationEvent<span class="token operator">=</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token comment">// Instrumentation event</span></pre></td></tr><tr><td data-num="111"></td><td><pre>EX_ArrayGetByRef<span class="token operator">=</span> <span class="token number">0x6B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="112"></td><td><pre>EX_ClassSparseDataVariable <span class="token operator">=</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token comment">// Sparse data variable</span></pre></td></tr><tr><td data-num="113"></td><td><pre>EX_FieldPathConst<span class="token operator">=</span> <span class="token number">0x6D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="114"></td><td><pre>EX_Max<span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>虚拟机的基本操作指令集。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本篇内容和源码均参考 UE5。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;ue-virtualmachine&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ue-virtualmachine&quot;&gt;#&lt;/a&gt; UE  Virtu</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="VirtualMachine" scheme="https://hakuya.me/tags/VirtualMachine/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Task Management篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Task%20Management%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Task%20Management%E7%AF%87/</id>
    <published>2022-10-22T01:23:00.000Z</published>
    <updated>2022-12-29T01:36:04.546Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxtask-management篇"><a class="anchor" href="#physxtask-management篇">#</a> PhysX——Task Management 篇</h1><p>任务管理器是 PhysX 管理 CPU 和 GPU 计算资源的调度管理器。在保证每个 Task 按部就班执行的情况下尽可能的提高运行效率，在 Cloth 和 Simulate 等场景有广泛的应用。因此本篇也作为 Simulate 的前篇来着重介绍一下「任务管理器」的实现逻辑。由于调度逻辑被拆分成了 GPU 和 CPU 两部分，本篇主要还是介绍 CPU 的调度规则。</p><p>为了能够更好理解，文章内会使用部分 Simulate 代码作为示例，来介绍 Task Management 如何运转，一些变量和类无需太过在意，先来看看 PxTaskMgr 定义：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021170511131.png" alt="类图" /></p><p>任务管理的基本单位就是 Task，任务管理的本质就是如何指定不同的 CPU / GPU 去执行不同 Task，根据各 Task 的依赖关系来控制执行顺序，PxTaskMgr 由于历史原因，保留了两种 Task 的实现机制：<strong>PxTask</strong>（绿色）、<strong>PxLightCpuTask</strong>（蓝色）。</p><h2 id="task"><a class="anchor" href="#task">#</a> Task</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021170949427.png" alt="image-20221021170949427" class="gallery" data-height="300" /></p><p><strong>PxBaseTask</strong> 是所有 <strong>Task</strong> 的基类，在 PhysX 3.0 之前 APEX 基本上通过 PxTask 的<strong>派生类</strong>作为任务单元定制化逻辑，在 PhysX 3.0 以后，基本上所有 <strong>Task</strong> 都用 <strong>PxLightCpuTask</strong> 实现。两者都是通过「引用计数」来控制调用时机，当引用计数为 0 的情况下，Task 就会被 submit 给 CPU / GPU 执行。</p><h3 id="pxtask"><a class="anchor" href="#pxtask">#</a> PxTask</h3><p>PxTask 是早期的实现，所有 <strong>PxTask</strong> 会存储在  <code>shdfnd::Array&lt;PxTaskTableRow&gt;</code> (PxTaskMgr::mTaskTable) 中，PxTaskTableRow 会记录该 PxTask 的<strong>前置 / 后置</strong>依赖链表的首地址，以及该任务当前的引用计数和执行状态，而整个依赖关系会被存储在  <code>shdfnd::Array&lt;PxTaskDepTableRow&gt;</code> (PxTaskMgr::mDepTable) 中。</p><ul><li>PxTask 支持两种创建方式：匿名 / 命名，两者本质区在于命名任务可以通过名字进行查找。</li><li>当 PxTask 被创建时，会获得 1 个引用计数，通过调用  <code>finishBefore</code>  和  <code>startAfter</code>  添加前置 / 后置依赖的情况下，也可以增加<strong>依赖方</strong>的引用计数。</li><li>在调用  <code>startSimulation</code>  会对所有 PxTask 的引用计数减 1，如果引用计数为 0 且满足依赖的情况下 PxTask 将会被  <code>dispatchTask</code> 。</li><li>当任务执行完毕以后 ( <code>taskCompleted</code> )，会通过  <code>resolveRow</code>  清理 PxTaskTableRow 中的记录，并更新其他任务依赖信息， <code>dispatchTask</code>  满足条件的任务。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021192950414.png" alt="image-20221021192950414" class="gallery" data-height="300" /></p><p>由于是多线程，每个 PxTask 的读写操作都需要加锁，这个锁是 PxTaskMgr 级别的，因此所有访问 PxTask 的操作都将产生竞争，并依赖 PxTaskMgr 提供的锁进行各种原子操作，对于多线程同时操作 PxTask 的来说，这点非常有必要，但会带来更多的性能开销。</p><h3 id="pxlightcputask"><a class="anchor" href="#pxlightcputask">#</a> PxLightCpuTask</h3><p>PxLightCpuTask 是个更轻量级的任务，整体实现也相对比较简单。舍弃了匿名 / 命名规则，数据也不集中存储在 PxTaskMgr，而是在 PxLightCpuTask 中。</p><p>PxLightCpuTask 没有提供多依赖的特性。换句话说，每个 PxLightCpuTask 只能<strong>依赖 / 被依赖</strong>至多一个任务 (多分支变为单分支)，这个特性使得 PxLightCpuTask 所有读写操作不需要加锁 (只可能被主线程和执行线程操作，且两者是互斥的)，性能 UpMax。为此，还必须约束 PxLightCpuTask 运行过程中不能操作其他的 PxLightCpuTask。</p><p>PxLightCpuTask 由于执行不依赖 PxTaskMgr，因此调用会比较简单：</p><ul><li>通过  <code>setContinuation</code>  设置执行的前置依赖和 TaskMgr，当然也可以不设置。</li><li>通过  <code>removeReference</code>  主动减少引用计数触发任务的 submit。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021195806514.png" alt="image-20221021195806514" class="gallery" data-height="300" /></p><blockquote><p>题外话：为了支持 PxTask 的<strong>多依赖</strong>等特性还额外定义了 <strong>FanoutTask</strong>，并且调整锁的级别从 PxTaskMgr 变为了 FanoutTask，这里就不再展开。</p></blockquote><h2 id="cpudispatcher"><a class="anchor" href="#cpudispatcher">#</a> CpuDispatcher</h2><p>CpuDispatcher 负责 submit 后最终的派发工作，如果在没有设置多线程情况下，CpuDispatcher 的派发的 Task 将在主线程执行。</p><p>下面来聊聊在多线程情况下的执行流程，先看看 CpuDispatcher 的初始化：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">DefaultCpuDispatcher</span><span class="token operator">::</span><span class="token function">DefaultCpuDispatcher</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> numThreads<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> affinityMasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">:</span> <span class="token function">mQueueEntryPool</span><span class="token punctuation">(</span>TASK_QUEUE_ENTRY_POOL_SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mNumThreads</span><span class="token punctuation">(</span>numThreads<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mShuttingDown</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">uint32_t</span> defaultAffinityMask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 创建 work 线程</span></pre></td></tr><tr><td data-num="7"></td><td><pre>mWorkerThreads <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>CpuWorkerThread<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">PX_ALLOC</span><span class="token punctuation">(</span>numThreads <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CpuWorkerThread<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PX_DEBUG_EXP</span><span class="token punctuation">(</span><span class="token string">"CpuWorkerThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mWorkerThreads<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">PX_PLACEMENT_NEW</span><span class="token punctuation">(</span>mWorkerThreads <span class="token operator">+</span> i<span class="token punctuation">,</span> CpuWorkerThread<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 thread 对象</span></pre></td></tr><tr><td data-num="13"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定 thread 和 dispacther </span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>shdfnd<span class="token operator">::</span><span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">getDefaultStackSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程</span></pre></td></tr><tr><td data-num="19"></td><td><pre>             <span class="token comment">// 设置线程掩码，对于掩码的介绍：</span></pre></td></tr><tr><td data-num="20"></td><td><pre>             <span class="token comment">// On Windows, Linux, PS4, XboxOne and Switch platforms, each set mask bit represents</span></pre></td></tr><tr><td data-num="21"></td><td><pre>             <span class="token comment">// the index of a logical processor that the OS may schedule thread execution on</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>affinityMasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAffinityMask</span><span class="token punctuation">(</span>affinityMasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAffinityMask</span><span class="token punctuation">(</span>defaultAffinityMask<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">char</span> threadName<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>shdfnd<span class="token operator">::</span><span class="token function">snprintf</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">"PxWorker%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>mNumThreads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="cpuworkerthread"><a class="anchor" href="#cpuworkerthread">#</a> CpuWorkerThread</h3><p>CpuWorkerThread 继承自 Thread，但 Thread 源码看不到，官方提供了接口说明 ——ThreadImpl，感兴趣的可以了解一下。</p><p>CpuWorkerThread 有两个关键接口：<strong>tryAcceptJobToLocalQueue</strong>、<strong>execute</strong></p><h4 id="tryacceptjobtolocalqueue"><a class="anchor" href="#tryacceptjobtolocalqueue">#</a> tryAcceptJobToLocalQueue</h4><p>该接口在 Dispatcher 的 submitTask 中被调用。会把已经注册到<strong>该线程</strong>的 Task 提交到<strong>本地</strong>的工作队列 (<strong>LocalJobList</strong>)</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">DefaultCpuDispatcher</span><span class="token operator">::</span><span class="token function">submitTask</span><span class="token punctuation">(</span>PxBaseTask<span class="token operator">&amp;</span> task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>shdfnd<span class="token operator">::</span>Thread<span class="token operator">::</span>Id currentThread <span class="token operator">=</span> shdfnd<span class="token operator">::</span><span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// TODO: Could use TLS to make this more efficient</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mNumThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tryAcceptJobToLocalQueue</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> currentThread<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">return</span> mWorkReady<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 主线程中</span></pre></td></tr><tr><td data-num="13"></td><td><pre>SharedQueueEntry<span class="token operator">*</span> entry <span class="token operator">=</span> mQueueEntryPool<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>mJobList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>mWorkReady<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// CpuWorkerThread 中</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">CpuWorkerThread</span><span class="token operator">::</span><span class="token function">tryAcceptJobToLocalQueue</span><span class="token punctuation">(</span>PxBaseTask<span class="token operator">&amp;</span> task<span class="token punctuation">,</span> shdfnd<span class="token operator">::</span>Thread<span class="token operator">::</span>Id taskSubmitionThread<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">//submit task 必须在当前线程进行操作</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>taskSubmitionThread <span class="token operator">==</span> mThreadId<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>SharedQueueEntry<span class="token operator">*</span> entry <span class="token operator">=</span> mQueueEntryPool<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>mLocalJobList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里会有两种情况：</p><ul><li>当前线程是主线程情况下，没有匹配的 CpuWorkerThread，因此会直接插入到 DefaultCpuDispatcher，因为 DefaultCpuDispatcher 只会在主线程创建。</li><li>当前线程是工作线程情况下：找到对应的工作线程 ID，并添加到工作线程的本地 JobList。</li></ul><h4 id="execute"><a class="anchor" href="#execute">#</a> execute</h4><p>执行操作分为以下几个步骤：</p><ul><li>【step.1】当前工作线程如果收到退出信号则直接退出。</li><li>【step.2】线程唤醒时，先重置唤醒标记。(避免中途异常退出导致该线程一直处于唤醒</li><li>【step.3】从本地工作队列获取一个 Task，如果为空继续获取，知道工作队列为空或者取到一个可执行 Task。</li><li>【step.4】执行 Task，并调用 release，触发后续任务的 submit，可能在当前工作线程继续执行或把操作权限移交主线程。</li><li>【step.5】如果没有可执行的 Task，将挂起当前工作线程。</li></ul><p>相关线程消息及接口说明见 <strong>SyncImpl</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">getThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-></span>thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PxThreadStart<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 线程唤醒后执行 execute</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">PxThreadStart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>_ThreadImpl<span class="token operator">*</span> impl <span class="token operator">=</span> <span class="token function">getThread</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>ThreadImpl<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>impl<span class="token operator">-></span>state <span class="token operator">=</span> _PxThreadStarted<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// run setTid in thread's context</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">setTid</span><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// then run either the passed in function or execute from the derived class (Runnable).</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token operator">-></span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>arg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>Runnable<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>impl<span class="token operator">-></span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//execute 实现:</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">void</span> Ext<span class="token operator">::</span><span class="token class-name">CpuWorkerThread</span><span class="token operator">::</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>   mThreadId <span class="token operator">=</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">quitIsSignalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      mOwner<span class="token operator">-></span><span class="token function">resetWakeSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>      PxBaseTask<span class="token operator">*</span> task <span class="token operator">=</span> <span class="token class-name">TaskQueueHelper</span><span class="token operator">::</span><span class="token function">fetchTask</span><span class="token punctuation">(</span>mLocalJobList<span class="token punctuation">,</span> mQueueEntryPool<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>         task <span class="token operator">=</span> mOwner<span class="token operator">-></span><span class="token function">fetchNextTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      </pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>         mOwner<span class="token operator">-></span><span class="token function">runTask</span><span class="token punctuation">(</span><span class="token operator">*</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>         task<span class="token operator">-></span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">else</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>         mOwner<span class="token operator">-></span><span class="token function">waitForWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>   <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>本篇主要介绍了任务管理器如果进行任务调度，以及任务是如何排布执行顺序，巧妙的通过引用计数建立任务间的依赖关系。</p><p>并介绍了 CpuDispatcher 是如何调度任务的执行，以及 WorkThread 的实现细节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="UE4" scheme="https://hakuya.me/tags/UE4/"/>
    
    <category term="Task Management" scheme="https://hakuya.me/tags/Task-Management/"/>
    
  </entry>
  
  <entry>
    <title>Collision分享</title>
    <link href="https://hakuya.me/learning/physx/Collision%E5%88%86%E4%BA%AB/"/>
    <id>https://hakuya.me/learning/physx/Collision%E5%88%86%E4%BA%AB/</id>
    <published>2022-10-12T09:15:00.000Z</published>
    <updated>2022-12-29T01:36:04.545Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="collision分享"><a class="anchor" href="#collision分享">#</a> Collision 分享</h1><p>碰撞检测常常用来计算物体之间的碰撞，在动作游戏的攻击受击、射击游戏中子弹命中等有广泛的运用。常用的检测方式有以下三种：</p><ul><li>Overlaps：重叠检测。</li><li>Raycasts：射线检测。</li><li>Sweeps：扫描检测。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221101144440096.png" alt="image-20221101144440096" /></p><blockquote><p>三者在检测流程上都比较接近，因此这里以 <strong>Overlaps</strong> 的检测模式来介绍一下检测流程。</p></blockquote><h2 id="接口说明"><a class="anchor" href="#接口说明">#</a> 接口说明</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">NpSceneQueries</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> PxGeometry<span class="token operator">&amp;</span> geometry<span class="token punctuation">,</span> <span class="token keyword">const</span> PxTransform<span class="token operator">&amp;</span> pose<span class="token punctuation">,</span> PxOverlapCallback<span class="token operator">&amp;</span> hits<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> PxQueryFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> PxQueryFilterCallback<span class="token operator">*</span> filterCall<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span> multiQuery<span class="token operator">&lt;</span>PxOverlapHit<span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> hits<span class="token punctuation">,</span> <span class="token function">PxHitFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> filterCall<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中涉及到的几个参数：</p><ul><li>PxGeometry：检测物体本身的几何数据，物体形状材质等信息。</li><li>PxTransform：检测物体的坐标及朝向。</li><li>PxOverlapCallback：获取碰撞检测命中结果的容器，其中会保存命中的详细检测结果如法线、坐标、距离等。</li><li><strong>PxQueryFilterData</strong>：过滤碰撞物标记，开发者定制。</li><li><strong>PxQueryFilterCallback</strong>：过滤处理函数，用来处理过滤规则，开发。</li></ul><p>其中 PxQueryFilterData 和 PxQueryFilterCallback 共同实现了<strong>碰撞过滤</strong>，这个后面再说。</p><h2 id="场景查询"><a class="anchor" href="#场景查询">#</a> 场景查询</h2><p>要知道，一个场景下的物体少则上万多则上亿，每次对所有对象计算碰撞开销过大，而实际会发生碰撞的物体微乎其微，如何精确高效的筛选出<strong>可能</strong>发生碰撞的物体，从而减少检测次数提高运行效率尤为重要。PhysX 把查询分成了两个阶段 <strong>Broad Phase / Narrow Phase</strong></p><h3 id="broad-phase"><a class="anchor" href="#broad-phase">#</a> Broad Phase</h3><p>该阶段主要是过滤出空间中<strong>可能</strong>发生碰撞的物体，常见的方法有三种：<strong>SAP/MBP/BVH</strong>。三者都是对物体的<strong>包围盒</strong>做碰撞检测：</p><h4 id="sap"><a class="anchor" href="#sap">#</a> SAP</h4><p>Sweep And Prune 算法。简单来说就是计算对象包围盒在各个轴的投影，然后取交集：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221101154932800.png" alt="image-20221101154932800" /></p><h4 id="mbp"><a class="anchor" href="#mbp">#</a> MBP</h4><p>Multi Box Pruning 算法。把整个场景划分为若干网格，然后把对象归入不同网格内，这样就只需要对该网格内的对象做检测即可，有点类似 AOI 里的九宫格。</p><blockquote><p>另外：通常为了加速还会在每个网格内实现一次 SAP。</p></blockquote><h4 id="bvh"><a class="anchor" href="#bvh">#</a> BVH</h4><p>Bounding Volume Hierarchy 算法，也是目前 PhysX 采用的算法。本质上是把所有对象的包围盒作为树的叶节点构建出一棵查询树结构，然后对这棵树进行查询。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221101160710760.png" alt="image-20221101160710760" /></p><p>PhysX 中查询结构的实现比较复杂，为了支持动态增删、多线程访问、高性能，进行了非常多的优化调整：</p><ul><li><p>把场景中的对象拆分到了两个容器中存储，一个静态对象容器 (<strong>StaticPruner</strong>)，一个动态对象容器 (<strong>DynamicPruner</strong>)。</p><ul><li>静态容器中的对象存放常驻且不发生位移的对象，例如不可移动的场景物件。</li><li>动态对象存储会创建销毁移动的场景物件、Npc、玩家等。</li></ul></li><li><p>动态对象容器为了尽可能的节约内存又被拆解成了两个部分，RunTime &amp;&amp; BuildTime：</p><ul><li>把构建好的<strong>动态树转为静态化</strong>。因为静态结构不需要额外分配内存或者指针，存储的数据也可以尽可能压缩因此可以降低内存占用且提高查询效率。</li><li><strong>双树结构分离构建和修改</strong>。由于动态树的静态化耗时很长，为了不影响性能一般会采用分帧的方式，但是如果在构建过程中有需要进行查询和变更将变得非常麻烦，因此引入了双树结构，旧的树会记录下上个时刻的快照，并把所有构建期间的修改加入到动态树中，在构建完成后替换旧的静态树，并用新的动态树构建下一次新的静态树。</li><li>对于聚合物体的优化，支持以树为单位建树。例如一棵树有树干和叶子等内容，它们的位置高度集中，因此可以直接视作一棵 BVH，插入到其他的 BVH 中，这种提前建好树直接插入的方式可以减少建树的耗时。</li></ul></li></ul><p><strong>DynamicPruner</strong> 对于增量和非增量还划分了 <strong>IncrementalAABBTree</strong> &amp;&amp; <strong>AABBTree</strong>，增量情况下的增删改介绍：</p><ul><li>首先，每个 <strong>DynamicPruner</strong> 都是由两棵 <strong>AABBTree</strong> 和一个 <strong>ExtendedBucketPruner</strong> 组成，而 <strong>ExtendedBucketPruner</strong> 又包含两棵 <strong>IncrementalAABBTree</strong>，就像下面这样～</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227164359425.png" alt="image-20221227164359425" /></p><blockquote><p>这里值得一提的是，AABBTree 同时只会有一棵参与工作，而 <strong>IncrementalAABBTree</strong> 两颗都会<strong>同时</strong>参与工作。</p></blockquote><ul><li><p>再来聊聊增删改操作吧：</p><ul><li>由于 DynamicPruner 在初始状态下，AABBTree 和 IncrementalAABBTree 都只有一棵，而所有包围盒数据都会储存在 <strong>PruningPool</strong> 内，PruningPool 可以简单理解为一个数组，内部是连续的，对外是稀疏的，主要是因为外部对象通常会持有内部数据的下标，频繁删除会导致下标变化需要反复持有对象的数据，因此做了一层额外映射。回到正题，最初的包围盒数据会用于创建 CurTree（红色部分标注），之后新增的数据会插入到数组尾部，并追加到 TreeA 里（紫色）</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227165031724.png" alt="image-20221227165031724" /></p></li><li><p>但长此以往，TreeA 势必会越来越大，最后 CurTree 就失去价值了，因此会定时进行一次重建。但是重建非常耗时、为了保证重建过程依旧可用新增才有了 NewTree 和 TreeB。这里 TreeA 和 CurTree 的数据会被用来构建 NewTree，而构建过程中新增的数据则会存储在 TreeB，然而 NewTree 并非立刻是可用的，因此会出现 CurTree 和 TreeA &amp;&amp; TreeB 同时工作的情况，此外构建过程中如果删除或是修改了 CurTree 或是 TreeA，由于它们都和 NewTree 共享数据，所以也是基本可以体现在 NewTree 的。</p></li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227172656637.png" alt="image-20221227172656637" /></p><ul><li>带到 NewTree 构建完成后，CurTree 和 TreeA 就失去作用了，并会在下次构建开启时重新发挥作用：</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227172810234.png" alt="image-20221227172810234" /></p><h3 id="碰撞过滤"><a class="anchor" href="#碰撞过滤">#</a> 碰撞过滤</h3><p>碰撞过滤分别在 Broad Phase 和 Narrow Phase 执行完成后工作，本质是提供给业务层的上层过滤规则。PhysX 通过 <strong>PxFilterData</strong> 四个通道标记和 <strong>PxQueryFilterCallback</strong> 的过滤接口为开发者提供了自定义筛选的可能。</p><h4 id="pxfilterdata"><a class="anchor" href="#pxfilterdata">#</a> PxFilterData</h4><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">PxFilterData</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxU32 word0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PxU32 word1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>PxU32 word2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>PxU32 word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="pxqueryfiltercallback"><a class="anchor" href="#pxqueryfiltercallback">#</a> PxQueryFilterCallback</h4><p><strong>PxQueryFilterCallback</strong> 提供了两个虚函数：<strong>preFilter</strong>、<strong>postFilter</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">PxQueryFilterCallback</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">preFilter</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxShape<span class="token operator">*</span> shape<span class="token punctuation">,</span> <span class="token keyword">const</span> PxRigidActor<span class="token operator">*</span> actor<span class="token punctuation">,</span> PxHitFlags<span class="token operator">&amp;</span> queryFlags<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">postFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxQueryHit<span class="token operator">&amp;</span> hit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PxQueryFilterCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这两个接口的执行时机和参数不同，也决定了用法不同：</p><ul><li>前者负责对 <strong>Broad Phase</strong> 阶段的碰撞做筛选，由业务指定哪些碰撞「会发生」。</li><li>后者负责对 <strong>Narrow Phase</strong> 结果中的命中点做过滤。</li></ul><blockquote><p>过滤的实现还是比较简单的，但如何定制高效且易扩展的过滤模式和方法，用好 PhysX 提供的 4 个 word，压力就来到了开发者这边～🤔</p></blockquote><h4 id="ue-中的过滤"><a class="anchor" href="#ue-中的过滤">#</a> UE 中的过滤</h4><p>Unreal 中定义了两种碰撞方式：<strong>Block</strong> &amp;&amp; <strong>Touch</strong>。</p><ul><li><strong>Block</strong>：表示碰撞会被拦截：如人和墙壁之间的碰撞，相撞后就会被阻挡，如果看到一个物体，那么它后面的内容将被挡住。</li><li><strong>Touch</strong>：表示碰撞但会穿过物体：如人和水、云等碰撞，如果看到一个半透明或者透明物体，那么它后面的内容也可以被看见。</li></ul><p>这是一张碰撞关系表，只有当两个物体都具备 <strong>Block</strong> 特性的情况下，碰撞才会被拦截。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221011171612511.png" alt="image-20221011171612511" /></p><p>通过上图的关系，就可以引申出 <strong>word1</strong> &amp;&amp; <strong>word2</strong> 的定义。</p><ul><li><strong>Word1</strong>：在 UE4 中也被称为 <strong>BlockingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Block</strong> 碰撞。</li><li><strong>Word2</strong>：在 UE4 中也被称为 <strong>TouchingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Touch</strong> 碰撞。</li></ul><p><strong>word0</strong> 和 <strong>word3</strong> 相对复杂一下：</p><ul><li><strong>word0</strong> 的含义比较复杂，在不同的查询模式下代表了不同的内容。<ul><li><strong>Query 模式</strong>下代表 Query 类型。</li><li><strong>Object 模式</strong>下用于描述物体指代的 ActorID。</li><li><strong>Simulate 模式</strong>下标识所属于 Body 中的编号。</li></ul></li><li><strong>word3</strong> 的成分比较复杂：FMaskFilter [6] + ECollisionChannel [5] + EPhysXFilterDataFlags [21]<ul><li><strong>6 位</strong>用来标记掩码，给程序定义用来屏蔽某类对象的碰撞。</li><li><strong>5 位</strong>用来标识该对象的通道类型。</li><li><strong>21 位</strong>用来标记检测的特性标志位，不同的标记会决定使用哪种检测算法和检测模式。</li></ul></li></ul><h4 id="项目组的过滤"><a class="anchor" href="#项目组的过滤">#</a> 项目组的过滤</h4><p>组内的过滤规则是基于 UE4 并进行了一些调整：</p><ul><li><strong>word0</strong>：默认都是场景掩码，应该是场景公用规则下的过滤位。</li><li><strong>word1</strong>：<strong>Object 模式</strong>和<strong> Simulate 模式</strong>下用来描述对象自身的类型通道；<strong>Query 模式</strong>下表示<strong>总通道</strong> (包括<strong>对象通道</strong>和<strong>查询通道</strong>)</li><li><strong>word2</strong>：查询通道。</li><li><strong>word3</strong>：<strong>Object 模式</strong>和<strong> Simulate 模式</strong>下用来描述对象的<strong>总通道</strong>，<strong>Query 模式</strong>表示需要查询的<strong>对象通道</strong>。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 碰撞通道</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EnmCollisionChannel</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 对象通道</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    ECC_OBJECT_CHANNEL_INVALID    <span class="token operator">=</span> <span class="token number">0x00000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    ECC_OBJECT_CHANNEL_PLAYER     <span class="token operator">=</span> <span class="token number">0x00001</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    ECC_OBJECT_CHANNEL_NPC        <span class="token operator">=</span> <span class="token number">0x00002</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    ECC_OBJECT_CHANNEL_TERRAIN    <span class="token operator">=</span> <span class="token number">0x00004</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    ECC_OBJECT_CHANNEL_COVER      <span class="token operator">=</span> <span class="token number">0x00008</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    ECC_OBJECT_CHANNEL_TRIGGER    <span class="token operator">=</span> <span class="token number">0x00010</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    ECC_OBJECT_CHANNEL_PROJECTILE <span class="token operator">=</span> <span class="token number">0x00020</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    ECC_OBJECT_CHANNEL_VEHICLE    <span class="token operator">=</span> <span class="token number">0x00040</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    ECC_OBJECT_CHANNEL_WIDGET     <span class="token operator">=</span> <span class="token number">0x00080</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 查询通道</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    ECC_QUERY_CHANNEL_MOVE     <span class="token operator">=</span> <span class="token number">0x00100000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    ECC_QUERY_CHANNEL_VISIABLE <span class="token operator">=</span> <span class="token number">0x00200000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    ECC_QUERY_CHANNEL_WEAPON   <span class="token operator">=</span> <span class="token number">0x00400000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    ECC_QUERY_CHANNEL_DAMAGE   <span class="token operator">=</span> <span class="token number">0x00800000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    ECC_OBJECT_CHANNEL_ALL <span class="token operator">=</span> ENM_OBJECT_CHANNEL_MASK<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    ECC_QUERY_CHANNEL_ALL  <span class="token operator">=</span> ENM_QUERY_CHANNEL_MASK<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    ECC_CHANNEL_ALL        <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="碰撞检测"><a class="anchor" href="#碰撞检测">#</a> 碰撞检测</h2><h3 id="narrow-phase"><a class="anchor" href="#narrow-phase">#</a> Narrow Phase</h3><p>精细检测用来进一步确认 <strong>Broad Phase</strong> 阶段的物体是否真的会发生碰撞，由于要计算出物体间的碰撞可能及碰撞点位，对于参与碰撞的对象有着严格的要求。</p><p>下面是 Overlap 操作中基于 GJK 算法可以支持检测的碰撞类型组：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>GeomOverlapTable gGeomOverlapMethodTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>GeomOverlapCallback_SphereSphere<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="6"></td><td><pre>GeomOverlapCallback_SpherePlane<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="7"></td><td><pre>GeomOverlapCallback_SphereCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="8"></td><td><pre>GeomOverlapCallback_SphereBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="9"></td><td><pre>GeomOverlapCallback_SphereConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="10"></td><td><pre>GeomOverlapCallback_SphereMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="11"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="17"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="18"></td><td><pre>GeomOverlapCallback_PlaneCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="19"></td><td><pre>GeomOverlapCallback_PlaneBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="20"></td><td><pre>GeomOverlapCallback_PlaneConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="21"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="22"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="29"></td><td><pre>GeomOverlapCallback_CapsuleCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="30"></td><td><pre>GeomOverlapCallback_CapsuleBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="31"></td><td><pre>GeomOverlapCallback_CapsuleConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="32"></td><td><pre>GeomOverlapCallback_CapsuleMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="33"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="41"></td><td><pre>GeomOverlapCallback_BoxBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="42"></td><td><pre>GeomOverlapCallback_BoxConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="43"></td><td><pre>GeomOverlapCallback_BoxMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="44"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="53"></td><td><pre>GeomOverlapCallback_ConvexConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="54"></td><td><pre>GeomOverlapCallback_ConvexMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH//not used: mesh always uses swept method for midphase.</span></pre></td></tr><tr><td data-num="55"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD//TODO: make HF midphase that will mask this</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="65"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="66"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="77"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><table><thead><tr><th></th><th>Sphere</th><th>Plane</th><th>Capsule</th><th>Box</th><th>Convex Mesh</th><th>Triangle Mesh</th><th>HeightField</th></tr></thead><tbody><tr><td>Sphere</td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Plane</td><td>√</td><td>×</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Capsule</td><td>√</td><td>√</td><td>√</td><td></td><td></td><td></td><td></td></tr><tr><td>Box</td><td>√</td><td>√</td><td>√</td><td>√</td><td></td><td></td><td></td></tr><tr><td>Convex Mesh</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>Triangle Mesh</td><td>√</td><td>×</td><td>√</td><td>√</td><td>√</td><td>×</td><td></td></tr><tr><td>HeightField</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>简单梳理下一次 Overlap 会做哪些事情：</p><ul><li>【step.1】：需要构建一个特定的过滤规则，用于 <strong>preFilter</strong>。</li><li>【step.2】：对 BVH 进行查询。<ul><li>【step.2.1】：先查询一下存放静态物体的<strong>静态树</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.2.2】：再查询一下存放动态物体的<strong>静态树</strong>和<strong>动态增量树</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>+<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.2.3】：还需要查询一下存放<strong>聚合物体</strong>的<strong>静态树</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li></ul></li><li>【step.3】：对查询结果做 <strong>preFilter</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.4】：对所有过滤结果做 <strong>Narrow Phase</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」，<strong>Narrow Phase</strong> 本身的开销可能应该远不止 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li><li>【step.5】：对所有命中做 <strong>postFilter</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.6】【可能】：更具需要对所有结果做<strong>排序</strong>，取最近的命中点「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li></ul><p>希望本文能够对理解基本的碰撞检测有所帮助，对 Raycast、Overlap、Sweep 操作的大致开销和内部所做的逻辑有个概念。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Collision" scheme="https://hakuya.me/tags/Collision/"/>
    
    <category term="UE4" scheme="https://hakuya.me/tags/UE4/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Collision篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Collision%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Collision%E7%AF%87/</id>
    <published>2022-10-12T09:15:00.000Z</published>
    <updated>2022-12-29T01:36:04.545Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxcollision篇"><a class="anchor" href="#physxcollision篇">#</a> PhysX——Collision 篇</h1><p>碰撞检测常常用来计算物体之间的碰撞，在动作游戏的攻击受击、射击游戏中子弹命中等有广泛的运用。要让游戏更加趋近真实，碰撞是其中必不可少的一环。</p><p>常规的检测方式有以下三种：</p><ul><li>raycasts：射线检测。</li><li>sweeps：扫描检测。</li><li>overlaps：重叠检测。</li></ul><p>由于 PhysX 的 Collision 实在过于复杂，因此本文主要以 <strong>overlap</strong> 检测作为入口，一步步分析其中的原理。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//--------------------- 官方用法 ---------------------</span></pre></td></tr><tr><td data-num="2"></td><td><pre>PxOverlapBuffer hit<span class="token punctuation">;</span>            <span class="token comment">// [out] Overlap results</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxGeometry overlapShape <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>  <span class="token comment">// [in] shape to test for overlaps</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PxTransform shapePose <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token comment">// [in] initial shape pose (at distance=0)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>PxOverlapBuffer hit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">bool</span> status <span class="token operator">=</span> scene<span class="token operator">-></span><span class="token function">overlap</span><span class="token punctuation">(</span>overlapShape<span class="token punctuation">,</span> shapePose<span class="token punctuation">,</span> hit<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>overlap</strong> 函数的定义如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//--------------------- overlap 函数定义 ---------------------</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">NpSceneQueries</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> PxGeometry<span class="token operator">&amp;</span> geometry<span class="token punctuation">,</span> <span class="token keyword">const</span> PxTransform<span class="token operator">&amp;</span> pose<span class="token punctuation">,</span> PxOverlapCallback<span class="token operator">&amp;</span> hits<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> PxQueryFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> PxQueryFilterCallback<span class="token operator">*</span> filterCall<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">PX_PROFILE_ZONE</span><span class="token punctuation">(</span><span class="token string">"SceneQuery.overlap"</span><span class="token punctuation">,</span> <span class="token function">getContextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">NP_READ_CHECK</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>PX_SIMD_GUARD<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>MultiQueryInput <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>geometry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pose<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// we are not supporting cache for overlaps for some reason</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">return</span> multiQuery<span class="token operator">&lt;</span>PxOverlapHit<span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> hits<span class="token punctuation">,</span> <span class="token function">PxHitFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> filterCall<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中涉及到的几个参数：</p><ul><li>PxGeometry：检测物体本身的几何数据。</li><li>PxTransform：检测物体的坐标及朝向。</li><li>PxOverlapCallback：获取碰撞检测结果的容器，其中会保存命中的详细检测结果如法线、坐标、距离等。</li><li><strong>PxQueryFilterData</strong>：过滤标记数据。</li><li><strong>PxQueryFilterCallback</strong>：过滤处理函数，用来处理过滤规则，支持开发者定制。</li></ul><h2 id="碰撞过滤filter"><a class="anchor" href="#碰撞过滤filter">#</a> 碰撞过滤（Filter）</h2><p>对于复杂场景下的碰撞检测，往往需要检测的物体数量众多，如何精确的筛选出需要被检测的物体，从而减少检测次数提高运行效率尤为重要。PhysX 通过 <strong>PxFilterData</strong> 四个通道标记来筛选出需要进行检测的物体，至于具体的筛选规则和各个通道的定义则交给用户自己。</p><p><strong>PxFilterData</strong> 定义非常简单：总共 128 bit，通过 4 个 32bit 的字段表示。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">PxFilterData</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxU32 word0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PxU32 word1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>PxU32 word2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>PxU32 word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="自定义过滤字段"><a class="anchor" href="#自定义过滤字段">#</a> 自定义过滤字段</h3><p>其中的每个 Word，PhysX 并没有给出定义，需要开发者自己定制规则。这里以 UE4 中的定义作为例子进行介绍：</p><p>UE4 中使用碰撞检测和碰撞过滤的地方有三大类：</p><ul><li>QueryFilterData：查询操作预设的过滤项。</li><li>ShapeFilterData：对象参与查询时自身具备的过滤项。</li><li>SimulateFilterData：对象参与模拟时自身具备的过滤项。</li></ul><h4 id="queryfilterdata"><a class="anchor" href="#queryfilterdata">#</a> QueryFilterData</h4><p>QueryFilterData 用来定义查询操作的过滤规则，比较常见的应用场景是计算光线命中 (LineTrace)，LineTrace 有两种查询的过滤方式：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ECollisionQuery</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ObjectQuery <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>TraceQuery <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h5 id="objectquery"><a class="anchor" href="#objectquery">#</a> ObjectQuery</h5><p>ObjectQuery 中 FilterData 中每个字段的含义：</p><ul><li>Word0：<strong>ObjectQuery</strong></li><li>Word1：<strong>ECollisionChannel</strong></li><li>Word2：无意义。</li><li>Word3：<strong>FMaskFilter</strong> [6 位] + <strong>ECollisionChannel</strong> [5 位] + <strong>EPhysXFilterDataFlags</strong> [21 位]</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> NumCollisionChannelBits <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> NumExtraFilterBits <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> NumFilterDataFlagBits <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> NumExtraFilterBits <span class="token operator">-</span> NumCollisionChannelBits <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Word3 计算：MaskFilter</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">inline</span> uint32 <span class="token function">CreateChannelAndFilter</span><span class="token punctuation">(</span>ECollisionChannel CollisionChannel<span class="token punctuation">,</span> FMaskFilter MaskFilter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>uint32 ResultMask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>MaskFilter<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> NumCollisionChannelBits<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>uint32<span class="token punctuation">)</span>CollisionChannel<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">return</span> ResultMask <span class="token operator">&lt;&lt;</span> NumFilterDataFlagBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中 <strong>FMaskFilter</strong> 提供给开发者定义的屏蔽 Mask。如果 Query 的 Mask 和对象本身的 Mask 与操作不等于 0 的情况下将被忽略。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>QuerierMaskFilter <span class="token operator">&amp;</span> ShapeMaskFilter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//If ignore mask hit something, ignore it</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> ECollisionQueryHitType<span class="token operator">::</span>None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>ECollisionChannel</strong> 可以理解为碰撞检测的通道：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">ECollisionChannel</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/** 已定义的 8 个通道 */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ECC_WorldStatic <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"WorldStatic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>ECC_WorldDynamic <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"WorldDynamic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>ECC_Pawn <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Pawn"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ECC_Visibility <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Visibility"</span> <span class="token punctuation">,</span> TraceQuery<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ECC_Camera <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Camera"</span> <span class="token punctuation">,</span> TraceQuery<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ECC_PhysicsBody <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"PhysicsBody"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ECC_Vehicle <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Vehicle"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ECC_Destructible <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Destructible"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/** 引擎预留的 6 个通道 */</span></pre></td></tr><tr><td data-num="14"></td><td><pre>ECC_EngineTraceChannel1 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="16"></td><td><pre>ECC_EngineTraceChannel6 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/** 未定义的 18 个通道 */</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ECC_GameTraceChannel1 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre>ECC_GameTraceChannel18 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>通过定义不同的通道来对不同类别的对象做筛选，例如 <strong>ECC_Visibility</strong> 通道的对象会被「看见」，会在计算光线命中的时候参与检测。</p><p><strong>EPhysXFilterDataFlags</strong> 标识本次碰撞检测需要采用的检测方法。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EPhysXFilterDataFlags</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>EPDF_SimpleCollision<span class="token operator">=</span><span class="token number">0x0001</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>EPDF_ComplexCollision<span class="token operator">=</span><span class="token number">0x0002</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>EPDF_CCD<span class="token operator">=</span><span class="token number">0x0004</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>EPDF_ContactNotify<span class="token operator">=</span><span class="token number">0x0008</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>EPDF_StaticShape<span class="token operator">=</span><span class="token number">0x0010</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>EPDF_ModifyContacts<span class="token operator">=</span>   <span class="token number">0x0020</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>EPDF_KinematicKinematicPairs <span class="token operator">=</span> <span class="token number">0x0040</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>ObjectQuery 中 <strong>Word3</strong> 的 ECollisionChannel 用来标识 MultiTrace，并不具体指代对象的碰撞通道。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> int32 MultiTrace<span class="token punctuation">;</span> <span class="token comment">/*=1 if multi. 0 otherwise*/</span></pre></td></tr><tr><td data-num="2"></td><td><pre>NewData<span class="token punctuation">.</span>Word3 <span class="token operator">|=</span> <span class="token function">CreateChannelAndFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ECollisionChannel<span class="token punctuation">)</span>MultiTrace<span class="token punctuation">,</span> ObjectParam<span class="token punctuation">.</span>IgnoreMask<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>ObjectQuery 会通过 Actor 本身的 ECollisionChannel 和自身的 QueryFilter.Word1 做 &amp; 运算来过滤出所需的对象。</p></blockquote><h5 id="tracequery"><a class="anchor" href="#tracequery">#</a> TraceQuery</h5><p>TraceQuery 中 FilterData 中每个字段的含义：</p><ul><li>Word0：<strong>TraceQuery</strong></li><li>Word1：<strong>BlockingBits</strong></li><li>Word2：<strong>TouchingBits</strong></li><li>Word3：FMaskFilter[6] + ECollisionChannel[5] + EPhysXFilterDataFlags[21]</li></ul><p>在介绍 <strong>BlockingBits &amp;&amp; TouchingBits</strong> 之前，先来了解几个概念：</p><p>UE4 中描述碰撞的类型分为两种：<strong>Block</strong> &amp;&amp; <strong>Touch</strong></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ECollisionQueryHitType</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Touch <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Block <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li><strong>Block</strong>：表示碰撞会被拦截：如人和墙壁之间的碰撞，相撞后就会被阻挡，如果看到一个物体，那么它后面的内容将被挡住。</li><li><strong>Touch</strong>：表示碰撞但会穿过物体：如人和水、云等碰撞，如果看到一个半透明或者透明物体，那么它后面的内容也可以被看见。</li></ul><p>这是一张碰撞关系表，只有当两个物体都具备 <strong>Block</strong> 特性的情况下，碰撞才会被拦截。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221011171612511.png" alt="image-20221011171612511" /></p><p>通过上图的关系，就可以引申出 <strong>word1</strong> &amp;&amp; <strong>word2</strong> 的定义。</p><ul><li><strong>Word1</strong>：在 UE4 中也被称为 <strong>BlockingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Block</strong> 碰撞。</li><li><strong>Word2</strong>：在 UE4 中也被称为 <strong>TouchingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Touch</strong> 碰撞。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">FPhysicsFilterBuilder</span><span class="token operator">::</span><span class="token function">FPhysicsFilterBuilder</span><span class="token punctuation">(</span>TEnumAsByte<span class="token operator">&lt;</span><span class="token keyword">enum</span> <span class="token class-name">ECollisionChannel</span><span class="token operator">></span> InObjectType<span class="token punctuation">,</span> FMaskFilter MaskFilter<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">FCollisionResponseContainer</span><span class="token operator">&amp;</span> ResponseToChannels<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">:</span> <span class="token function">BlockingBits</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">,</span> <span class="token function">TouchingBits</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">,</span> <span class="token function">Word3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>ResponseToChannels<span class="token punctuation">.</span>EnumArray<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ResponseToChannels<span class="token punctuation">.</span>EnumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ECR_Block<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> uint32 ChannelBit <span class="token operator">=</span> <span class="token function">CRC_TO_BITFIELD</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>BlockingBits <span class="token operator">|=</span> ChannelBit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ResponseToChannels<span class="token punctuation">.</span>EnumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ECR_Overlap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">const</span> uint32 ChannelBit <span class="token operator">=</span> <span class="token function">CRC_TO_BITFIELD</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>TouchingBits <span class="token operator">|=</span> ChannelBit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><p>TraceQuery 则相对复杂一些：需要分别用两者的 ECollisionChannel 和对方的 BlockingBits &amp;&amp; TouchingBits 做计算，得到最终的碰撞类型，然后通过上述碰撞关系表得到最终的碰撞结果，例如人和雾的碰撞是 Block 的，而雾和人的碰撞是 Touch 的，那么最终结果也是 Touch，人和雾会互相穿过。</p></blockquote><p>其实可以简单把 ObjectQuery 和 TraceQuery 理解成：一个是单向查询，一个是双向查询。单向查询相对简单适用于一些简单场景，如射线检测。双向查询则相对复杂，需要考虑查询方和被查询方两者的关系，应用于物体间碰撞的检测比较合适。</p><h4 id="shapefilterdata"><a class="anchor" href="#shapefilterdata">#</a> ShapeFilterData</h4><p>ShapeFilterData 则是用来定义对象自身的过滤规则，相比于 QueryFilterData 侧重于描述本次查询的规则信息，ShapeFilterData 更侧重描述 Shape 本身的性质：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">GetQueryData</span><span class="token punctuation">(</span>uint32 ActorID<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord0<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord1<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord2<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord3<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre> * Format for QueryData : </pre></td></tr><tr><td data-num="5"></td><td><pre> *word0 (object ID)</pre></td></tr><tr><td data-num="6"></td><td><pre> *word1 (blocking channels)</pre></td></tr><tr><td data-num="7"></td><td><pre> *word2 (touching channels)</pre></td></tr><tr><td data-num="8"></td><td><pre> *word3 (ExtraFilter (top NumExtraFilterBits) + MyChannel (next NumCollisionChannelBits) as ECollisionChannel + Flags (remaining NumFilterDataFlagBits)</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    OutWord0 <span class="token operator">=</span> ActorID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    OutWord1 <span class="token operator">=</span> BlockingBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    OutWord2 <span class="token operator">=</span> TouchingBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    OutWord3 <span class="token operator">=</span> Word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>Word0：<strong>ActorID</strong></li><li>Word1：<strong>BlockingBits</strong></li><li>Word2：<strong>TouchingBits</strong></li><li>Word3：FMaskFilter[6] + ECollisionChannel[5] + EPhysXFilterDataFlags[21]</li></ul><h4 id="simulatefilterdata"><a class="anchor" href="#simulatefilterdata">#</a> SimulateFilterData</h4><p>SimulateFilterData 是用在 simulate 物理碰撞中采用的过滤规则。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">GetSimData</span><span class="token punctuation">(</span>uint32 BodyIndex<span class="token punctuation">,</span> uint32 ComponentID<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord0<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord1<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord2<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord3<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre> * Format for SimData : </pre></td></tr><tr><td data-num="5"></td><td><pre> * word0 (body index)</pre></td></tr><tr><td data-num="6"></td><td><pre> *word1 (blocking channels)</pre></td></tr><tr><td data-num="7"></td><td><pre> *word2 (skeletal mesh component ID)</pre></td></tr><tr><td data-num="8"></td><td><pre> *word3 (ExtraFilter (top NumExtraFilterBits) + MyChannel (next NumCollisionChannelBits) as ECollisionChannel + Flags (remaining NumFilterDataFlagBits)</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    OutWord0 <span class="token operator">=</span> BodyIndex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    OutWord1 <span class="token operator">=</span> BlockingBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    OutWord2 <span class="token operator">=</span> ComponentID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    OutWord3 <span class="token operator">=</span> Word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>Word0：<strong>BodyIndex</strong>。表示 Body 编号。</li><li>Word1：<strong>BlockingBits</strong></li><li>Word2：<strong>ComponentID</strong>。表示 Body 中的 Component 编号。</li><li>Word3：FMaskFilter[6] + ECollisionChannel[5] + EPhysXFilterDataFlags[21]</li></ul><h3 id="自定义过滤规则"><a class="anchor" href="#自定义过滤规则">#</a> 自定义过滤规则</h3><p>同样就像 PhysX 没有给出 Word 的定义一样，PhysX 也没有给出使用 Word 的过滤规则，而是提供了一个过滤类 ——PxQueyFilterCallback：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">PxQueryFilterCallback</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">preFilter</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxShape<span class="token operator">*</span> shape<span class="token punctuation">,</span> <span class="token keyword">const</span> PxRigidActor<span class="token operator">*</span> actor<span class="token punctuation">,</span> PxHitFlags<span class="token operator">&amp;</span> queryFlags<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">postFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxQueryHit<span class="token operator">&amp;</span> hit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PxQueryFilterCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这个类中的函数会在调用 raycast、overlap、sweep 等操作时调用，后面会详细介绍这里不做展开。因此可以通过继承该类来实现自己的 Filter 规则。</p><ul><li><strong>preFilter</strong>：该过滤会在低精度检测命中后、高精度检测前执行。用来剔除不必要的检测，减少高精度检测开销。</li><li><strong>postFilter</strong>：该过滤会在高精度检测命中后执行。对高精度检测的命中结果做最后的筛选。</li></ul><p>上面提到的 UE4 中两种 Query 方式，便是通过重写 preFilter 来实现的：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ICollisionQueryFilterCallbackBase</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">PxQueryFilterCallback</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">virtual</span> ECollisionQueryHitType <span class="token function">PostFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> FilterData<span class="token punctuation">,</span> <span class="token keyword">const</span> physx<span class="token operator">::</span>PxQueryHit<span class="token operator">&amp;</span> Hit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">virtual</span> ECollisionQueryHitType <span class="token function">PreFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> FilterData<span class="token punctuation">,</span> <span class="token keyword">const</span> physx<span class="token operator">::</span>PxShape<span class="token operator">&amp;</span> Shape<span class="token punctuation">,</span> physx<span class="token operator">::</span>PxRigidActor<span class="token operator">&amp;</span> Actor<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// QueryFilter</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FCollisionQueryFilterCallback</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ICollisionQueryFilterCallbackBase</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">static</span> ECollisionQueryHitType <span class="token function">CalcQueryHitType</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> QueryFilter<span class="token punctuation">,</span> <span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> ShapeFilter<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPreFilter <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>ECollisionQueryHitType <span class="token function">PreFilterImp</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> FilterData<span class="token punctuation">,</span> <span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> ShapeFilterData<span class="token punctuation">,</span> uint32 ComponentID<span class="token punctuation">,</span> <span class="token keyword">const</span> FBodyInstance<span class="token operator">*</span> BodyInstance<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 过滤规则核心实现</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ECollisionQueryHitType <span class="token class-name">FCollisionQueryFilterCallback</span><span class="token operator">::</span><span class="token function">CalcQueryHitType</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> QueryFilter<span class="token punctuation">,</span> <span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> ShapeFilter<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPreFilter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ECollisionQuery QueryType <span class="token operator">=</span> <span class="token punctuation">(</span>ECollisionQuery<span class="token punctuation">)</span>QueryFilter<span class="token punctuation">.</span>Word0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>FMaskFilter QuerierMaskFilter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">const</span> ECollisionChannel QuerierChannel <span class="token operator">=</span> <span class="token function">GetCollisionChannelAndExtraFilter</span><span class="token punctuation">(</span>QueryFilter<span class="token punctuation">.</span>Word3<span class="token punctuation">,</span> QuerierMaskFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>FMaskFilter ShapeMaskFilter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">const</span> ECollisionChannel ShapeChannel <span class="token operator">=</span> <span class="token function">GetCollisionChannelAndExtraFilter</span><span class="token punctuation">(</span>ShapeFilter<span class="token punctuation">.</span>Word3<span class="token punctuation">,</span> ShapeMaskFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>QuerierMaskFilter <span class="token operator">&amp;</span> ShapeMaskFilter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//If ignore mask hit something, ignore it</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">return</span> ECollisionQueryHitType<span class="token operator">::</span>None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">const</span> uint32 ShapeBit <span class="token operator">=</span> <span class="token function">ECC_TO_BITFIELD</span><span class="token punctuation">(</span>ShapeChannel<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>QueryType <span class="token operator">==</span> ECollisionQuery<span class="token operator">::</span>ObjectQuery<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// ObjectQuery filter</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// TraceQuery filter</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">return</span> ECollisionQueryHitType<span class="token operator">::</span>None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="场景查询scenequery"><a class="anchor" href="#场景查询scenequery">#</a> 场景查询（SceneQuery）</h2><p>通过 <strong>Filter</strong> 我们可以知道哪些 Shape 的碰撞我们可以忽略，但我们仍然避免不了需要先对所有需要参与检测的 Shape 做一次低精度的碰撞检测；这显然是不必要的，有些明显就不可能发生的碰撞该如何尽可能的忽略呢？</p><p>让我们回到 <strong>overlap</strong> 的代码：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">return</span> multiQuery<span class="token operator">&lt;</span>PxOverlapHit<span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> hits<span class="token punctuation">,</span> <span class="token function">PxHitFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> filterCall<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>NpSceneQueries</strong> 里有我们想要的答案：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 只保留了和 overlap 有关的核心代码，有兴趣的可以自行翻阅源码</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">HitType</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">NpSceneQueries</span><span class="token operator">::</span><span class="token function">multiQuery</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> MultiQueryInput<span class="token operator">&amp;</span> input<span class="token punctuation">,</span> PxHitCallback<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">&amp;</span> hits<span class="token punctuation">,</span> PxHitFlags hitFlags<span class="token punctuation">,</span> <span class="token keyword">const</span> PxQueryCache<span class="token operator">*</span> cache<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxQueryFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> PxQueryFilterCallback<span class="token operator">*</span> filterCall<span class="token punctuation">,</span> BatchQueryFilterData<span class="token operator">*</span> bfd<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> Pruner<span class="token operator">*</span> staticPruner <span class="token operator">=</span> mSQManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PruningIndex<span class="token operator">::</span>eSTATIC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pruner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> Pruner<span class="token operator">*</span> dynamicPruner <span class="token operator">=</span> mSQManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PruningIndex<span class="token operator">::</span>eDYNAMIC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pruner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>HitTypeSupport<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span>IsRaycast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>HitTypeSupport<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span>IsOverlap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> ShapeData <span class="token function">sd</span><span class="token punctuation">(</span><span class="token operator">*</span>input<span class="token punctuation">.</span>geometry<span class="token punctuation">,</span> <span class="token operator">*</span>input<span class="token punctuation">.</span>pose<span class="token punctuation">,</span> input<span class="token punctuation">.</span>inflation<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>pcb<span class="token punctuation">.</span>mShapeData <span class="token operator">=</span> <span class="token operator">&amp;</span>sd<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>PxAgain again <span class="token operator">=</span> doStatics <span class="token operator">?</span> staticPruner<span class="token operator">-></span><span class="token function">overlap</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>again<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">return</span> hits<span class="token punctuation">.</span><span class="token function">hasAnyHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>doDynamics<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>again <span class="token operator">=</span> dynamicPruner<span class="token operator">-></span><span class="token function">overlap</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>cbr<span class="token punctuation">.</span>again <span class="token operator">=</span> again<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">return</span> hits<span class="token punctuation">.</span><span class="token function">hasAnyHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>核心在 <strong>staticPruner</strong> 和 <strong>dynamicPruner</strong>，它们都是 <strong>AABBPruner</strong> 的实例：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">SceneQueryManager</span><span class="token operator">::</span><span class="token function">SceneQueryManager</span><span class="token punctuation">(</span>Scb<span class="token operator">::</span>Scene<span class="token operator">&amp;</span> scene<span class="token punctuation">,</span> PxPruningStructureType<span class="token operator">::</span>Enum staticStructure<span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>                                     PxPruningStructureType<span class="token operator">::</span>Enum dynamicStructure<span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>                                     PxU32 dynamicTreeRebuildRateHint<span class="token punctuation">,</span> <span class="token keyword">const</span> PxSceneLimits<span class="token operator">&amp;</span> limits<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">mScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>mPrunerExt<span class="token punctuation">[</span>PruningIndex<span class="token operator">::</span>eSTATIC<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>staticStructure<span class="token punctuation">,</span> scene<span class="token punctuation">.</span><span class="token function">getContextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>mPrunerExt<span class="token punctuation">[</span>PruningIndex<span class="token operator">::</span>eDYNAMIC<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>dynamicStructure<span class="token punctuation">,</span> scene<span class="token punctuation">.</span><span class="token function">getContextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">PrunerExt</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>PxPruningStructureType<span class="token operator">::</span>Enum type<span class="token punctuation">,</span> PxU64 contextID<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">case</span> PxPruningStructureType<span class="token operator">::</span>eDYNAMIC_AABB_TREE<span class="token operator">:</span> <span class="token punctuation">&#123;</span> pruner <span class="token operator">=</span> <span class="token function">PX_NEW</span><span class="token punctuation">(</span>AABBPruner<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> contextID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">case</span> PxPruningStructureType<span class="token operator">::</span>eSTATIC_AABB_TREE<span class="token operator">:</span> <span class="token punctuation">&#123;</span> pruner <span class="token operator">=</span> <span class="token function">PX_NEW</span><span class="token punctuation">(</span>AABBPruner<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> contextID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>         <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>唯一的区别就是 <strong>staticPruner</strong> 不支持增量重建（<strong>mIncrementalRebuild</strong>），因此 <strong>staticPruner</strong> 内任意对象的修改都需要对整个 <strong>staticPruner</strong> 进行重建。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">AABBPruner</span><span class="token operator">::</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mAABBTree <span class="token operator">||</span> <span class="token operator">!</span>mIncrementalRebuild<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">fullRebuildAABBTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>AABBPruner 可以简单理解成一个复杂的 BVH，细节可以参考之前的文章，由于篇幅限制，这里不做更细致的介绍。</p><h2 id="碰撞检测collisiondetection"><a class="anchor" href="#碰撞检测collisiondetection">#</a> 碰撞检测（CollisionDetection）</h2><p>有了 AABBTree 提供的高效查询，接下来就可以快速定位需要检测的物体，并进行碰撞检测了。由于篇幅限制这里只简单介绍 <strong>Box</strong> 在 <strong>overlap</strong> 模式下的检测：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxAgain <span class="token class-name">AABBPruner</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShapeData<span class="token operator">&amp;</span> queryVolume<span class="token punctuation">,</span> PrunerCallback<span class="token operator">&amp;</span> pcb<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">switch</span><span class="token punctuation">(</span>queryVolume<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">case</span> PxGeometryType<span class="token operator">::</span>eBOX<span class="token operator">:</span><span class="token comment">// box（aabb） overlap</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 核心部分</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">const</span> Gu<span class="token operator">::</span>AABBAABBTest <span class="token function">test</span><span class="token punctuation">(</span>queryVolume<span class="token punctuation">.</span><span class="token function">getPrunerInflatedWorldAABB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        again <span class="token operator">=</span> AABBTreeOverlap<span class="token operator">&lt;</span>Gu<span class="token operator">::</span>AABBAABBTest<span class="token punctuation">,</span> AABBTree<span class="token punctuation">,</span> AABBTreeRuntimeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mPool<span class="token punctuation">.</span><span class="token function">getObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPool<span class="token punctuation">.</span><span class="token function">getCurrentWorldBoxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>mAABBTree<span class="token punctuation">,</span> test<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 增量的 AABBPruner 会用 mBucketPruner 存储增量节点，这部分内容也需要进行碰撞检测</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>again <span class="token operator">&amp;&amp;</span> mIncrementalRebuild <span class="token operator">&amp;&amp;</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">getNbObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            again <span class="token operator">=</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">overlap</span><span class="token punctuation">(</span>queryVolume<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> again<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中 <strong>AABBAABBTest</strong> 用来存储测试的包围盒数据，测试两个包围盒覆盖的代码如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// (box_1_extent + box_2_extent) >= dist(box_1_center, box_2_center)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 中心点 x,y,z 的距离要小于两个包围盒长宽高的和</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">V3AllGrtrOrEq</span><span class="token punctuation">(</span><span class="token function">V3Add</span><span class="token punctuation">(</span>mExtents<span class="token punctuation">,</span> extents<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">V3Abs</span><span class="token punctuation">(</span><span class="token function">V3Sub</span><span class="token punctuation">(</span>center<span class="token punctuation">,</span> mCenter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>整个查询流程大致如下：</p><p>【step.1】从根节点开始依次进行 <strong>AABBAABBTest</strong>，满足重叠条件情况下 DFS 子节点，直到遇到叶子节点。</p><p>【step.2】对叶子节点内的 Shape 做 <strong>AABBAABBTest</strong>，这里的测试是低精度检测 <strong>Broad-Phase</strong>，只是判断对象的包围盒是否和检测物发生碰撞。</p><p>【step.3】对 <strong>Broad-Phase</strong> 结果做 <strong>preFilter</strong>。<strong>preFilter</strong> 主要是剔除发生理论会碰撞，但在规则层面需要进行忽略的部分。例如子弹命中友军，正常情况下会打中，但在很多 PVE 游戏中会忽略友军的命中。</p><p>【step.4】对过滤后的结果做高精度检测 <strong>Narrow-Phase</strong>。场景查询使用的检测算法是 <strong>GJK</strong>，由于篇幅限制这里不做展开。</p><p>【step.5】对高精度检测结果再做一次 <strong>postFilter</strong>，这种过滤可以对命中的部位做过滤，应用场景还是比较少的，因为很多过滤其实都可以在 <strong>preFilter</strong> 完成。</p><p>【step.6】通过检查以后，会把命中结果存储在 <strong>PxOverlapCallback</strong> 返回给上层，根据各项条件参数来控制检查是否继续下去。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 代码大量删减，如果感兴趣请自行查阅源代码</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">virtual</span> PxAgain <span class="token function">invoke</span><span class="token punctuation">(</span>PxReal<span class="token operator">&amp;</span> aDist<span class="token punctuation">,</span> <span class="token keyword">const</span> PrunerPayload<span class="token operator">&amp;</span> aPayload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 【step.3】进行预过滤 pre-filter</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    PxHitFlags filteredHitFlags <span class="token operator">=</span> mHitFlags<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">applyAllPreFiltersSQ</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>actorShape<span class="token punctuation">,</span> shapeHitType<span class="token comment">/*in&amp;out*/</span><span class="token punctuation">,</span> filterFlags<span class="token punctuation">,</span> mFilterData<span class="token punctuation">,</span> mFilterCall<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                                 mScene<span class="token punctuation">,</span> mBfd<span class="token punctuation">,</span> filteredHitFlags<span class="token punctuation">,</span> mHitCall<span class="token punctuation">.</span>maxNbTouches<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// skip this shape from reporting if prefilter said to do so</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 【step.4】高精度检测</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    PxU32 nbSubHits <span class="token operator">=</span> <span class="token class-name">GeomQueryAny</span><span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span><span class="token function">geomHit</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        mScene<span class="token punctuation">,</span> mInput<span class="token punctuation">,</span> <span class="token operator">*</span>mShapeData<span class="token punctuation">,</span> shapeGeom<span class="token punctuation">,</span> globalPose<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        filteredHitFlags <span class="token operator">|</span> mMeshAnyHitFlags<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        maxSubHits1<span class="token punctuation">,</span> subHits1<span class="token punctuation">,</span> mShrunkDistance<span class="token punctuation">,</span> mQueryShapeBoundsValid <span class="token operator">?</span> <span class="token operator">&amp;</span>mQueryShapeBounds <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// ------------------------- iterate over geometry subhits -----------------------------------</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>PxU32 iSubHit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> iSubHit <span class="token operator">&lt;</span> nbSubHits<span class="token punctuation">;</span> iSubHit<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 【step.5】进行检测后的再过滤 post-filter</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mIsCached <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mFilterCall <span class="token operator">||</span> mBfd<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>filterFlags <span class="token operator">&amp;</span> PxQueryFlag<span class="token operator">::</span>ePOSTFILTER<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>mFilterCall<span class="token punctuation">)</span> hitType <span class="token operator">=</span> mFilterCall<span class="token operator">-></span><span class="token function">postFilter</span><span class="token punctuation">(</span>mFilterData<span class="token punctuation">.</span>data<span class="token punctuation">,</span> hit<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token comment">// for iSubHit</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>由于 <strong>preFilter</strong> 和 <strong>postFilter</strong> 都是可以定制化规则的，这里也不再展开，下面主要来看一下高精度检测的代码。还是老样子，以 <strong>overlap</strong> 为例：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">GeomQueryAny</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">static</span> PX_FORCE_INLINE PxU32 <span class="token function">geomHit</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> NpSceneQueries<span class="token operator">&amp;</span> sceneQueries<span class="token punctuation">,</span> <span class="token keyword">const</span> MultiQueryInput<span class="token operator">&amp;</span> input<span class="token punctuation">,</span> <span class="token keyword">const</span> ShapeData<span class="token operator">&amp;</span> sd<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxGeometry<span class="token operator">&amp;</span> sceneGeom<span class="token punctuation">,</span> <span class="token keyword">const</span> PxTransform<span class="token operator">&amp;</span> pose<span class="token punctuation">,</span> PxHitFlags hitFlags<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>PxU32 maxHits<span class="token punctuation">,</span> HitType<span class="token operator">*</span> hits<span class="token punctuation">,</span> <span class="token keyword">const</span> PxReal shrunkMaxDistance<span class="token punctuation">,</span> PxBounds3<span class="token operator">*</span> precomputedBounds<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>HitTypeSupport<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span>IsOverlap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> GeomOverlapTable<span class="token operator">*</span> overlapFuncs <span class="token operator">=</span> sceneQueries<span class="token punctuation">.</span>mCachedOverlapFuncs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token function">PxU32</span><span class="token punctuation">(</span><span class="token class-name">Gu</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span>geom0<span class="token punctuation">,</span> pose0<span class="token punctuation">,</span> geom1<span class="token punctuation">,</span> pose1<span class="token punctuation">,</span> overlapFuncs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">PX_ALWAYS_ASSERT_MESSAGE</span><span class="token punctuation">(</span><span class="token string">"Unexpected template expansion in GeomQueryAny::geomHit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>所有类型之间的 <strong>overlap</strong> 计算都存储在  <code>sceneQueries.mCachedOverlapFuncs</code>  函数表里：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 目前官方支持的种类如下，有兴趣可以一个个深挖的看实现</span></pre></td></tr><tr><td data-num="2"></td><td><pre>g_SweepMethodTable</pre></td></tr><tr><td data-num="3"></td><td><pre>g_ContactMethodTable</pre></td></tr><tr><td data-num="4"></td><td><pre>g_PCMContactMethodTable</pre></td></tr><tr><td data-num="5"></td><td><pre>GeomOverlapTable gGeomOverlapMethodTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>GeomOverlapCallback_SphereSphere<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="10"></td><td><pre>GeomOverlapCallback_SpherePlane<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="11"></td><td><pre>GeomOverlapCallback_SphereCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="12"></td><td><pre>GeomOverlapCallback_SphereBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="13"></td><td><pre>GeomOverlapCallback_SphereConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="14"></td><td><pre>GeomOverlapCallback_SphereMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="15"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="21"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="22"></td><td><pre>GeomOverlapCallback_PlaneCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="23"></td><td><pre>GeomOverlapCallback_PlaneBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="24"></td><td><pre>GeomOverlapCallback_PlaneConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="25"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="26"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="33"></td><td><pre>GeomOverlapCallback_CapsuleCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="34"></td><td><pre>GeomOverlapCallback_CapsuleBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="35"></td><td><pre>GeomOverlapCallback_CapsuleConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="36"></td><td><pre>GeomOverlapCallback_CapsuleMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="37"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="45"></td><td><pre>GeomOverlapCallback_BoxBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="46"></td><td><pre>GeomOverlapCallback_BoxConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="47"></td><td><pre>GeomOverlapCallback_BoxMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="48"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="57"></td><td><pre>GeomOverlapCallback_ConvexConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="58"></td><td><pre>GeomOverlapCallback_ConvexMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH//not used: mesh always uses swept method for midphase.</span></pre></td></tr><tr><td data-num="59"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD//TODO: make HF midphase that will mask this</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="69"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="70"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="81"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>试想一下，<strong>overlap</strong> 操作实际上是计算一个物体是否会和其他空间内的对象发生重叠，本质上并没有 <strong>Block</strong> 和 <strong>Touch</strong> 的概念，因为不论是 <strong>Block</strong> 还是 <strong>Touch</strong>，最终都已经重叠了。</p><p>但对于 <strong>raycast</strong> 和 <strong>sweep</strong> 却不同，它们都有一个起始位置和运动路径，换句话说物体可能运动过程中就会被挡住而停下，因此会有一些不同的逻辑：</p><ul><li>需要计算出最近的 <strong>Block</strong> 碰撞点，这部分的检测算法相对比较复杂，以后有机会单独聊聊。</li><li>需要剔除「最近 <strong>Block</strong> 点」往后的所有命中点。</li></ul><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>至此，所有关于碰撞检测的执行流程，就已经基本清晰了。剩下的无外乎其他规则下的其他检测手法问题，大体流程近乎一致。</p><p>至于未曾展开的 Simulate 中的 Filter 规则以及更为复杂的碰撞实现算法：SAT、PCM、GJK、CCD 之后有机会再来介绍。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Collision" scheme="https://hakuya.me/tags/Collision/"/>
    
    <category term="UE4" scheme="https://hakuya.me/tags/UE4/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Simulate篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Simulate%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Simulate%E7%AF%87/</id>
    <published>2022-10-12T09:15:00.000Z</published>
    <updated>2022-12-29T01:36:04.546Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxsimulate篇开坑中"><a class="anchor" href="#physxsimulate篇开坑中">#</a> PhysX——Simulate 篇（开坑中...）</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Simulate" scheme="https://hakuya.me/tags/Simulate/"/>
    
  </entry>
  
  <entry>
    <title>「Scene Queries」AABBPruner</title>
    <link href="https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBPruner/"/>
    <id>https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBPruner/</id>
    <published>2022-09-16T08:01:00.000Z</published>
    <updated>2022-12-29T01:36:04.549Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="scene-queriesaabbpruner"><a class="anchor" href="#scene-queriesaabbpruner">#</a> 「Scene Queries」AABBPruner</h1><p>本篇基于 <strong>「Scene Queries」AABBTree</strong> 的扩展，阅读之前建议先了解 AABBTree。（￣︶￣）↗</p><p>如果说 AABBTree 是场景查询中最基础的数据结构，那么 <strong>AABBPruner</strong> 则是再此基础上进行了全方位的优化 ——<strong> 交替帧渲染</strong>。该理论的核心是同时存储画面 A 和画面 B，其中一个展示给用户，另一个则在后台渲染，等到渲染完成后，对两者进行替换，从而实现流畅的观看体验。同理，为了保证 AABBTree 能够<strong>时刻</strong>提供场景查询功能、保证增删改的实时性，同时还可以兼顾执行效率和空间利用率，这种<strong>交替帧渲染</strong>无疑是一个比较好的方案。</p><p>首先要明确的一点是，这种方案并不是必须的，即使不使用<strong>交替帧渲染</strong>，依旧可以实现场景查询以及实时增删改，只不过执行效率和空间利用率会比较低。</p><p>接下来就从 AABBPruner 基础结构开始一点点介绍其中的实现细节：</p><h2 id="aabbpruner-中的数据组成"><a class="anchor" href="#aabbpruner-中的数据组成">#</a> AABBPruner 中的数据组成</h2><p class="gallery" data-height="500"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915112214887.png" alt="" /></p><ul><li><strong>mAABBTree &amp;&amp; mNewTree</strong>：两棵 AABBTree。一棵是当前正在使用的 AABBTree，另一棵是正在后台构建中的 AABBTree。</li><li><strong>mBuilder</strong>：构建 mNewTree 时临时存储的构建配置信息。</li><li><strong>mBucketPruner</strong>：ExtendedBucketPruner 结构，负责对新增节点做增量构建的 IncrementAABBTree 管理结构。</li><li><strong>mPool</strong>：维护所有对象的 bound、shape、actor 关系，同时也是构建 AABBTree 和 IncrementAABBTree 的数据来源。</li><li><strong>mTreeMap &amp;&amp; mNewTreeMap</strong>：分别记录了 mAABBTree 和 mNewTree 中 bounds 和 AABBRuntimeNode 的映射关系。</li><li><strong>mCachedBoxes &amp;&amp; mNbCachedBoxes</strong>：临时缓存某个时刻 mPool 中的 bounds 数据，用来作为构建 mNewTree 的源数据。</li><li><strong>mTimeStamp</strong>：时间戳，每次构建新的 mNewTree 都会 + 1，也可以理解为帧号，区分不同时刻的修改。</li><li><strong>mNbCalls &amp;&amp; mRebuildRateHint &amp;&amp; mTotalWorkUnits &amp;&amp; mAdaptiveRebuildTerm</strong>：四个变量实现构建工作的预估<ul><li><strong>mNbCalls</strong>：表示当前构建耗费了多少 frame。</li><li><strong>mRebuildRateHint</strong>：表示预计需要多少 frame。</li><li><strong>mTotalWorkUnits</strong>：表示本次构建预计需要多少的工作量。</li><li><strong>mAdaptiveRebuildTerm</strong>：表示之前工作预估的准确性，该值会受到 mNbCalls &amp;&amp; mRebuildRateHint 影响，并影响 mTotalWorkUnits 计算。</li></ul></li><li><strong>mNewTreeFixups</strong>：记录 mNewTree 构建过程中被移除的包围盒和会被顶替到移除位置的包围盒下标。</li><li><strong>mToRefit</strong>：记录 mNewTree 构建过程中发生变化的包围盒下标。</li><li>mContextID：上下文 ID，一个 AABBPruner 持有一个，用来唯一标识。</li><li><strong>mNeedsNewTree</strong>：标识是否需要构建 mNewTree，在包围盒发生变化且支持增量构建（mIncrementalRebuild = true）的情况下，该标志为 true。</li><li><strong>mUncommittedChanges</strong>：标识有修改需要被 commit。commit 会让修改生效在 mAABBTree 上，如果 mNewTree 构建完成情况下还会进行树替换。并且在 commit 没有执行完毕的情况下，不允许执行查询操作。</li><li><strong>mIncrementalRebuild</strong>：是否支持增量构建的标记。不支持的情况下每次 commit 都会在当前帧内重新构建一棵新的 mAABBTree，否则会分布构建 mNewTree 并在构建完成后通过 commit 对 mAABBTree 进行替换。</li></ul><p>其中有几个陌生的结构之前没有提及，这里先简单的介绍一下：</p><h3 id="pruningpool"><a class="anchor" href="#pruningpool">#</a> PruningPool</h3><p><strong>PruningPool</strong> 有如下四个主要的存储结构：</p><ul><li><code>PxBounds3* mWorldBoxes</code> ：所有对象的 <strong>Bound</strong> 数据</li><li><code>PrunerPayload* mObjects</code> ：所有对象的 <strong>Shape</strong> 及 <strong>Actor</strong> 对象地址</li><li><code>PrunerHandle* mIndexToHandle</code> ：<strong>index</strong> 和 <strong>handle</strong> 的映射列表</li><li><code>PoolIndex* mHandleToIndex</code> ：<strong>handle</strong> 和 <strong>index</strong> 的映射列表</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220720190337717.png" alt="image-20220720190337717" width="960px" /></p><p><strong>PruningPool</strong> 用来存储 <strong>PrunerPayload</strong> 和 <strong>AABBBound</strong> 关联的对象列表，<strong>PrunerPayload</strong> 中存储了两个指针，分别指向 Bound 所属的 Shape 和 Actor。之前介绍 AABBTree 构建中 <strong>AABBTreeBuildParams.mAABBArray</strong> 的数据也来源于这里的 <strong>mWorldBoxes</strong>。</p><p>前三个数组是对齐的，同一下标获取到的信息同属于一个对象。而 <strong>mHandleToIndex</strong> 和 <strong>mIndexToHandle</strong> 形成了一组映射结构。外部通过 <strong>mHandleToIndex</strong> 访问内部数据，内部数据调整也需要同步修改 <strong>mIndexToHandle</strong> 映射关系，另外还有个 <strong>mFirstRecycledHandle</strong> 用于指向第一块空闲的 <strong>mHandleToIndex</strong>。</p><h4 id="removeobject"><a class="anchor" href="#removeobject">#</a> removeObject</h4><p><strong>PruningPool</strong> 移除对象有着一些特殊规则，很大程度也影响了整个 AABBPruner、AABBTree、IncrementAABBTree 的实现。</p><p>移除对象的时候被删除节点对应的 <strong>mHandleToIndex</strong> 会头插到 <strong>mFirstRecycledHandle</strong> 指向的单链表。这时候 mObjects 、mWorldBoxes、mIndexToHandle 可能会因为删除操作而导致内存不连续。为了保证连续（连续性会影响拷贝和遍历）会把最后一个元素用于填补空缺，因此还有一个替换操作。</p><p>例如这里删除掉第 1 个包围盒，然后用第 3 个进行替换：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915154531718.png" alt="image-20220915154531718" width="960px" /></p><p>这种替换操作可以使得「空间分布比较紧凑」、「移除节点的复杂度 O (1)，不需要对所有后置数据做平移」，代价是打乱了 mWorldBoxes 内两个包围盒的位置，而 AABBTree 和 IncrementAABBTree 的构建都会记录 Box 的位置用于访问，位置变更了需要批量修改非常麻烦，因此还单独维护了一个 mHandleToIndex，这样外部只需要记录 mHandleToIndex 下标即可，无需担心内部的位置发生变化。</p><blockquote><p>风险点：可以看到 <strong>mHandleToIndex</strong> 存储的内容可能是自己的下一个空闲节点也可能是 <strong>mIndexToHandle</strong> 下标，两者的数值可能相同，然而访问 Pool 的时候是通过 <strong>Handle</strong> 下标来的，因此很可能明明是个空闲节点，但依旧可能访问到数据。例如 <strong>mHandleToIndex[2]</strong> 和 <strong>mHandleToIndex[3]</strong> 最终都会指向 <strong>mIndexToHandle[1]</strong>，这点上 PhysX 并没有增加严格的保护手段。</p></blockquote><h3 id="extendedbucketpruner"><a class="anchor" href="#extendedbucketpruner">#</a> ExtendedBucketPruner</h3><p>ExtendedBucketPruner 中比较关键的结构是 MainTree 、MergedTree，以及 PrunerCore。</p><p class="gallery" data-height="650"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915113422926.png" alt="" /></p><ul><li><p><strong>mMergedTrees</strong>：其中 mMergedTrees 是一棵棵的 AABBTree。因为 PhysX 不仅支持向场景内添加单个 Actor，还支持多个 Actor 打包成 PruningStructure 添加到场景，这里就不做过多展开，简单理解就是除了支持添加一个树节点以外，还支持添加整棵树，mMergedTrees 就是那个存储树的结构。</p></li><li><p><strong>mMainTree</strong>：mMainTree 也是一棵 AABBTree，构建的数据是基于所有 MergedTree 的根节点包围盒。由于数据量不大，因此每次新增或者删除 MergedTree 的时候都会进行全量重建。</p></li></ul><h4 id="incrementalaabbprunercoreprunercore"><a class="anchor" href="#incrementalaabbprunercoreprunercore">#</a> IncrementalAABBPrunerCore(PrunerCore)</h4><p class="gallery" data-height="260"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915120122464.png" alt="" /></p><p>简单来说 IncrementalAABBPrunerCore 存储了两棵 CoreTree，每个 CoreTree 内维护了一棵 IncrementalAABBTree 所需的全部数据，至于为什么是两棵，我们后面再说。</p><ul><li><strong>mChangedLeaves</strong>：用来记录每次变更操作导致映射关系发生改变的节点。并在变更操作执行完毕后更新 CoreTree 的 mapping 映射。</li><li>mPool：指向的是 AABBPruner.mPool。</li><li>mCurrentTree &amp;&amp; mLastTree：标识当前使用的树和上次用过的树下标。因为只有两棵树，其实理论上记录一个就可以了。</li></ul><h5 id="coretree"><a class="anchor" href="#coretree">#</a> CoreTree</h5><p class="gallery" data-height="200"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915150500991.png" alt="" /></p><p>CoreTree 比较简单，存储了一个 IncrementAABBTree、一个 bound 到 TreeNode 的映射，以及这棵树最后一次修改的时间戳。时间戳是用来评估这棵树的有效性的，这个后面交替渲染部分再做介绍。</p><h4 id="extendedbucketpruner-结构图"><a class="anchor" href="#extendedbucketpruner-结构图">#</a> ExtendedBucketPruner 结构图</h4><p>下图是一张简单版的 ExtendedBucketPruner 结构图，为方便更好的理解省去了很多细节：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915151747529.png" alt="image-20220915151747529" width="960px" /></p><p>如果新增的是整棵树，那么把该树添加到 MergedTree 并重新构建 MainTree。如果新增的是某个节点，那么就添加到 PrunerCore 中的 IncrementAABBTree 内。</p><h3 id="newtreefixup"><a class="anchor" href="#newtreefixup">#</a> NewTreeFixup</h3><p class="gallery" data-height="160"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915152038177.png" alt="" /></p><p>NewTreeFixup 用来记录删除包围盒操作所影响的两个包围盒下标。至于为什么是两个，之前在 PruningPool 中也有简单的介绍，为了保证数组连续，会用末尾的数据填充到删除位置，因此删除操作实际上是一次替换，把最后一个位置的数据替换到删除位置，所以这里需要记录两个下标。具体删除细节可以回顾一下 <strong>PruningPool.removeObject</strong>。</p><h2 id="aabbpruner-的增删改"><a class="anchor" href="#aabbpruner-的增删改">#</a> AABBPruner 的增删改</h2><p>AABBPruner 增删改操作本质是都是对 AABBTree &amp;&amp; IncrementAABBTree 的封装，具体实现细节其实已经在 AABBTree 和 IncrementAABBTree 做了详细介绍，这里主要是基于更上一层的规则进行梳理：</p><h3 id="不考虑交替帧渲染的情况"><a class="anchor" href="#不考虑交替帧渲染的情况">#</a> 不考虑交替帧渲染的情况</h3><p>为了方便讨论，先介绍一下不做交替帧渲染情况下 AABBPruner 如何增删改的，以下讨论均建立在 <strong>mIncrementalRebuild = true</strong> 的情况下。</p><p>下图是简化后的 AABBPruner 结构图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915160705507.png" alt="image-20220915160705507" width="800px" /></p><p>实际用到的结构只有 mAABBTree (AABBTree) &amp;&amp; ExtendedBucketPruner.PrunerCore.CurTree (IncrementAABBTree) 两个。</p><h4 id="新增操作"><a class="anchor" href="#新增操作">#</a> 新增操作</h4><p>由于 mAABBTree 只支持树级别的新增，<strong>并不支持节点的新增操作</strong>，因此新增逻辑的支持交给了 ExtendedBucketPruner.PrunerCore.CurTree。具体实现细节可以回顾 AABBTree 篇的 IncrementAABBTree 部分。</p><h4 id="删除操作"><a class="anchor" href="#删除操作">#</a> 删除操作</h4><p>删除操作其实分为两种情况：</p><ul><li>删除在 mAABBTree 中的节点。</li><li>删除在 ExtendedBucketPruner.PrunerCore.CurTree 中的节点。</li></ul><p>辨别方法也比较简单，AABBPruner 里面的 <strong>mTreeMap</strong> 维护了 mAABBTree 包含的全部 bound 映射，如果该映射关系内没有找到被删除的包围盒，那就一定在 ExtendedBucketPruner.PrunerCore.CurTree 里，删除细节也可以参考 AABBTree &amp;&amp; IncrementAABBTree。</p><h4 id="更新操作"><a class="anchor" href="#更新操作">#</a> 更新操作</h4><p>更新和删除比较相似，这里也不多介绍。</p><h3 id="交替帧渲染的情况"><a class="anchor" href="#交替帧渲染的情况">#</a> 交替帧渲染的情况</h3><p>引入交替帧渲染后，情况就变得复杂起来，再介绍增删改之前，先介绍一下 AABBPruner 内的 buildStep 和 commit 的构建流程。</p><h4 id="支持分布构建-buildstep"><a class="anchor" href="#支持分布构建-buildstep">#</a> 支持分布构建 buildStep</h4><p>最早提到分布构建还是在 AABBTree 的 <strong>progressiveBuild</strong> 中，这里对 AABBTree 的分布构建做了一定程度的扩展，先来看看分布构建的流程：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220916101411349.png" alt="image-20220916101411349" width="500px" /></p><ul><li>BUILD_NOT_STARTED：表示还没有构建的状态，也是 AABBPruner 的初始状态。</li><li>BUILD_INIT：该状态下，会对 mPool.mWorldBoxes 做一个深拷贝，并记录在 mCachedBoxes 中，作为新树构建的源数据。</li><li>BUILD_IN_PROGRESS：拿到源数据之后，就可以开始构建 mNewTree。AABBPruner 会通过一种启发式算法控制构建次数实现平滑。</li><li>BUILD_NEW_MAPPING：无操作。</li><li>BUILD_FULL_REFIT：构建完成，需要重新生成一次 mapping 关系，并记录在 mNewTreeMap。</li><li>BUILD_LAST_FRAME：有了映射关系，这里会再计算并更新一次树节点的包围盒信息 <strong>fullRefit</strong>。</li><li>BUILD_FINISHED：无操作。</li><li>BUILD_COMMIT：这并不是一个状态，而是 commit 函数，放在这里主要是便于理解。commit 目的是能够让构建结果应用在 mAABBTree 中，类比交替帧渲染里渲染好了，需要执行交替步骤。</li></ul><h5 id="启发式的平滑算法"><a class="anchor" href="#启发式的平滑算法">#</a> 启发式的平滑算法</h5><p>如何有效的评估构建耗时并且尽可能的平滑结果，AABBPruner 定义了一个预估次数 <strong>mRebuildRateHint</strong>，默认情况下是 100 frame，可以支持动态设置。</p><p><strong>mRebuildRateHint</strong> 仅仅是一个<strong>预估值</strong>，这也意味着很可能并非实际结果，为了趋近于预估又引入了三个系数：mNbCalls、mTotalWorkUnits、mAdaptiveRebuildTerm。</p><ul><li>mNbCalls 记录的是本次构建实际消耗了多少 frame。</li><li>mAdaptiveRebuildTerm 是一个调节参数，如果实际结果超过预期说明估少了，那么就 + 1 反之 - 1，如果和上次构建的工作单元差距过大，这个值会被重置。</li><li>mTotalWorkUnits 总工作单元可以理解为一次完整构建，需要访问的包围盒次数，例如 8 个包围盒最终构建出如下的树形结构，那么总工作单元就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mo>+</mo><mn>5</mn><mo>=</mo><mn>13</mn></mrow><annotation encoding="application/x-tex">8 + 5 = 13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>，<strong>这里并不计算叶节点层</strong>。当然计算实际总工作单元没有任何意义，我们需要的是预估值，这里的计算公式大概长这样：<ul><li>leafnb：叶节数量。</li><li>depth：预估的树深度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mi>n</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log_2(leafnb)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 。这里假设这棵树是完全平衡的。</li><li>mTotalWorkUnits：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>W</mi><mi>o</mi><mi>r</mi><mi>k</mi><mi>U</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>s</mi><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo>∗</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mi>n</mi><mi>b</mi><mo>+</mo><mi>A</mi><mi>d</mi><mi>a</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>b</mi><mi>u</mi><mi>i</mi><mi>l</mi><mi>d</mi><mi>T</mi><mi>e</mi><mi>r</mi><mi>m</mi><mo>∗</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mi>n</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TotalWorkUnits = max(0, depth * leafnb + AdaptiveRebuildTerm * leafnb)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal">n</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal">b</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 。实际会比这个复杂一些，还会参考上一次构建时的估计结果。</li></ul></li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915163943905.png" alt="image-20220915163943905" width="500px" /></p><h4 id="为什么需要构建新树"><a class="anchor" href="#为什么需要构建新树">#</a> 为什么需要构建新树🤔</h4><p>回到之前的「不交替渲染」，它也可以很好的工作，支持增删改查。为什么还要大费周章构建新的 AABBTree 呢？</p><ul><li>极端情况下，mAABBTree 的节点会全部被删除，AABBPruner 会退化成 IncrementAABBTree，在 AABBTree 章节也介绍了 IncrementAABBTree 远比 ABBTree 更加的占用内存，而且低效，唯一的优势只有支持新增节点。</li><li>删除的 mAABBTree 节点不会被回收，因此会造成内存碎片。</li><li>IncrementAABBTree 作为新增节点的<strong>暂存器</strong>，每次构建新树的时候会把 IncrementAABBTree 的节点也纳入构建，在构建完成后可以清空 IncrementAABBTree，因此频繁构建新树的情况下，IncrementAABBTree 内的节点会非常少。</li><li>构建操作虽然较为耗时，但只要能够做到很好的平滑，实际上可以减轻对于性能的开销。</li></ul><h4 id="如何保证构建新树时查询功能依旧可用"><a class="anchor" href="#如何保证构建新树时查询功能依旧可用">#</a> 如何保证构建新树时查询功能依旧可用</h4><p>可以看到构建一个新树大概需要 100 frame，这段时间里如何保证场景查询还是可靠的呢？回到之前的不交替渲染，实际上已经能够支持在运行过程中增删改了。AABBPruner 为了保证可用性的情况下为很多数据都做了副本，例如 <strong>mAABBTree &amp;&amp; mNewTree</strong>、<strong>mTreeMap &amp;&amp; mNewTreeMap</strong>、<strong>mPool.mWorldBoxes &amp;&amp; mCachedBoxes</strong>，就是为了保证构建和查询完全分离。因此在支持交替渲染情况下的 AABBPruner 可能就长这样：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220916110229854.png" alt="image-20220916110229854" width="800px" /></p><p>mAABBTree + CoreTree (Last) + CoreTree (Cur) 保证了增删改查的实时性，mNewTree 构建数据源于 mAABBTree + CoreTree (Last)。因此在每次构建完成后，mAABBTree 的内容会被替换成 mNewTree，相应的 CoreTree (Last) 将会失效，而 CoreTree (Cur) 将会在下一次 mNewTree 构建开始时切换为 CoreTree (Last)。</p><h4 id="如何保证新树的一致性"><a class="anchor" href="#如何保证新树的一致性">#</a> 如何保证新树的一致性</h4><p>思考这样一个问题，假设物体的包围盒一直更新，mNewTree 就用永远都是旧的。最直接的一个例子：BUILD_INIT 状态下会拷贝 mPool.mWorldBoxes 结果构建 mNewTree，这个构建可能持续大概 100 frame，中途新的变更例如删除、添加和更新并不会影响 mNewTree，所以它还是停留在 100 frame 之前的状态，如果这时候进行替换，将会丢失这 100 frame 的全部操作。这显然是无法接受的。</p><p>AABBPruner 做法是保存这 100 frame 的全部操作，在新树构建完成时进行应用：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915172752137.png" alt="image-20220915172752137" width="600px" /></p><h5 id="新增操作的存储"><a class="anchor" href="#新增操作的存储">#</a> 新增操作的存储</h5><p>前面提到 IncrementAABBTree 会在新树构建完成后被清理，并且节点新增都会存储在 IncrementAABBTree 内。如果把 IncrementAABBTree  作为存储新增操作的容器，则需要至少两个 IncrementAABBTree。一个是旧的 IncrementAABBTree，数据是构建开始时刻的；另一个是构建过程中新增的，也就是本次构建开始到下次构建开始的所有新增内容，旧的会在本次构建完成后清空，新的则会保留到下次构建结束。这也是为什么会有 CoreTree (Cur) 和 CoreTree (Last)。</p><h5 id="删除操作的存储"><a class="anchor" href="#删除操作的存储">#</a> 删除操作的存储</h5><p>删除操作很难对两棵树做差进行求解，最简单的办法就是存储一个操作记录，类比数据库迁移和数据恢复。AABBPruner 会把删除记录存储在 mNewTreeFixups，然后在新树构建完成后把这些删除操作再执行一次，用于保证和当前数据的一致。</p><h5 id="更新操作的存储"><a class="anchor" href="#更新操作的存储">#</a> 更新操作的存储</h5><p>更新其实类似，会记录需要更新的包围盒下标数组 mToRefit。有一点需要注意，由于 mNewTree 构建流程中本身就会执行一次全量更新 <strong>fullRefit</strong>。因此可以利用这个更新提前先把一部分的修改应用在 mNewTree 中，因此更新其实分成了两部分：</p><ul><li>在 BUILD_LAST_FRAME 下的更新：这里的更新稍微取巧了一下，没有把更新记录在 mToRefit 内，而是直接用的 mPool.mWorldBoxes 作为数据源更新的 mNewTree，好处是可以省去 mToRefit 记录的差量，直接从<strong>差值更新</strong>转为<strong>全量更新</strong>了，但是这样实际上会有一个问题。试想一下，一棵用 mCachedBoxes 构建的新树，再用 mPool.mWorldBoxes 去更新，中间差了大约 100 frame，这 100 frame 内的新增操作由于是记录在 IncrementAABBTree 里的，所以可以忽略；但删除却不行，而且删除操作会影响 bound 到 TreeNode 的映射，会导致更新的时候错乱。因此，为了解决删除时映射不一致的情况，这里会提前处理一次 mNewTreeFixups 内的删除记录，然后再做更新。</li><li>在 COMMIT 下的更新：commit 更新就不需要全量更新了，因此可以通过<strong>差值更新</strong>实现，这时候 mToRefit 才算是真真意义上的派上用场。</li></ul><h2 id="aabbpruner-的查询"><a class="anchor" href="#aabbpruner-的查询">#</a> AABBPruner 的查询</h2><p>最后让我们再看看 AABBPruner 的查询。查询接口主要有三个 raycast、sweep 和 overlap，但这里并不打算过分展开，我们仅探讨查询时需要考虑那些数据。</p><p>首先，我们已经有了足够实时的 mAABBTree，删改操作可以立马在上面得到体现；以及支持新增节点的 PrunerCore。 PrunerCore 的两棵 IncrementAABBTree 存储了不同时间段的新增节点，但即便如此它们<strong>两个都是有效的</strong>，因此所有的查询都必须<strong>查找 PrunerCore 内的两棵树以及 mAABBTree</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 先查 mAABBTree</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>mAABBTree<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>again <span class="token operator">=</span> AABBTreeRaycast<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> AABBTree<span class="token punctuation">,</span> AABBTreeRuntimeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mPool<span class="token punctuation">.</span><span class="token function">getObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPool<span class="token punctuation">.</span><span class="token function">getCurrentWorldBoxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>mAABBTree<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> <span class="token function">PxVec3</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 再查 mBucketPruner</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>again <span class="token operator">&amp;&amp;</span> mIncrementalRebuild <span class="token operator">&amp;&amp;</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">getNbObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>again <span class="token operator">=</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">raycast</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxAgain <span class="token class-name">ExtendedBucketPruner</span><span class="token operator">::</span><span class="token function">raycast</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> origin<span class="token punctuation">,</span> <span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> unitDir<span class="token punctuation">,</span> PxReal<span class="token operator">&amp;</span> inOutDistance<span class="token punctuation">,</span> PrunerCallback<span class="token operator">&amp;</span> prunerCallback<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxAgain again <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 先查 mBucketPruner.mPrunerCore</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mPrunerCore<span class="token punctuation">.</span><span class="token function">getNbObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>again <span class="token operator">=</span> mPrunerCore<span class="token punctuation">.</span><span class="token function">raycast</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> prunerCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 在查 mBucketPruner.mMergedTrees</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>again <span class="token operator">&amp;&amp;</span> mExtendedBucketPrunerMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">const</span> PxVec3 <span class="token function">extent</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// main tree callback</span></pre></td></tr><tr><td data-num="14"></td><td><pre>MainTreeRaycastPrunerCallback<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">></span> <span class="token function">pcb</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> extent<span class="token punctuation">,</span> prunerCallback<span class="token punctuation">,</span> mPruningPool<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// traverse the main tree</span></pre></td></tr><tr><td data-num="16"></td><td><pre>again <span class="token operator">=</span> AABBTreeRaycast<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> AABBTree<span class="token punctuation">,</span> AABBTreeRuntimeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> PrunerPayload<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>mMergedTrees<span class="token punctuation">)</span><span class="token punctuation">,</span> mBounds<span class="token punctuation">,</span> <span class="token operator">*</span>mMainTree<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> extent<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">return</span> again<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到 mBucketPruner.mPrunerCore 两棵树都需要进行查询：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span>PxU32 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_TREES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> CoreTree<span class="token operator">&amp;</span> tree <span class="token operator">=</span> mAABBTree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>tree <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">.</span>tree<span class="token operator">-></span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> again<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        again <span class="token operator">=</span> AABBTreeRaycast<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> IncrementalAABBTree<span class="token punctuation">,</span> IncrementalAABBTreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mPool<span class="token operator">-></span><span class="token function">getObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPool<span class="token operator">-></span><span class="token function">getCurrentWorldBoxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>tree<span class="token punctuation">.</span>tree<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> <span class="token function">PxVec3</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其实还有一个结构之前一直忽略了，那就是 mBucketPruner.mMergedTrees，不聊它是因为真的不是很重要 (bushi。</p><p>其实是应用场景比较少，不过还是简单介绍一下吧，mBucketPruner.mMergedTrees 的查询会先用 mMainTree 定位根节点，再通过对应的 mergedTree 查询。</p><p>另外和 CoreTree 类似，在 mNewTree 构建的时候，也会把 mMergedTrees 加入构建，并在构建完成后清理 mMergedTrees。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>本章节介绍了 AABBPruner 的实现细节，简单介绍了 <strong>AABBTreeUpdateMap</strong>，顺带填了一波 AABBTree &amp;&amp; IncrementAABBTree 中 <strong>AABBTreeBuildParams</strong> 由来的坑，并梳理了一下 AABBPruner 是如何协调 AABBTree &amp;&amp; IncrementAABBTree，通过分布构建的形式进行削峰。另外上述的讨论都是基于 <strong>mIncrementalRebuild=true</strong> 情况下，有兴趣的小伙伴可以自己思考一下关闭 mIncrementalRebuild 情况下，AABBPruner 又是如何呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="AABBPruner" scheme="https://hakuya.me/tags/AABBPruner/"/>
    
    <category term="Scene Queries" scheme="https://hakuya.me/tags/Scene-Queries/"/>
    
  </entry>
  
</feed>
