<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鑫酱</title>
  
  <subtitle>笔记本</subtitle>
  <link href="https://hakuya.me/atom.xml" rel="self"/>
  
  <link href="https://hakuya.me/"/>
  <updated>2023-06-08T08:39:03.579Z</updated>
  <id>https://hakuya.me/</id>
  
  <author>
    <name>鑫酱(●&#39;◡&#39;●)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://hakuya.me/learning/unreal/UE5%20%E6%9D%82%E9%A1%B9%E8%AE%B0%E5%BD%95/"/>
    <id>https://hakuya.me/learning/unreal/UE5%20%E6%9D%82%E9%A1%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2023-06-08T08:31:24.861Z</published>
    <updated>2023-06-08T08:39:03.579Z</updated>
    
    <content type="html"><![CDATA[<p>ALyraGameMode 控制游戏模式合状态</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVucmVhbGVuZ2luZS5jb20vNS4yL2VuLVVTL2dhbWUtbW9kZS1hbmQtZ2FtZS1zdGF0ZS1pbi11bnJlYWwtZW5naW5lLw==">https://docs.unrealengine.com/5.2/en-US/game-mode-and-game-state-in-unreal-engine/</span></p><p>这些规则包括：</p><ul><li>在场的玩家和观众的数量，以及允许的最大玩家和观众数量。</li><li>玩家如何进入游戏，其中可以包括选择重生位置和其他重生 / 重生行为的规则。</li><li>是否可以暂停游戏，以及如何处理暂停游戏。</li><li>关卡之间的转换，包括游戏是否应该以电影模式开始。</li></ul><p>ALyraGameMode::InitGame 用来初始化加载场景</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ALyraGameMode 控制游戏模式合状态&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLnVucmVhbGVuZ2luZS5jb20vNS4yL2VuLVVTL2dhbWUtbW9kZS1hbmQtZ2F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PhysX——GJK &amp;&amp; EPA</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94GJK%20&amp;&amp;%20EPA/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94GJK%20&amp;&amp;%20EPA/</id>
    <published>2023-04-24T09:15:00.000Z</published>
    <updated>2023-06-09T11:21:12.613Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="gjk-epa"><a class="anchor" href="#gjk-epa">#</a> GJK &amp;&amp; EPA</h1><p>GJK 用来计算物体间的最短碰撞距离，而 EPA 用于计算物体发生嵌入的最短脱离距离，通过 GJK 和 EPA 可以知道物体是否嵌入，还需要运动多久发生碰撞。</p><h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><div class="note info"><p>闵可夫斯基差（<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWlua293c2tpX2FkZGl0aW9u">Minkowski difference</span>）</p></div><p>也可以理解成「闵可夫斯基和」，简单来说就是两个集合的顶点两两做加法 (减法) 得到的新集合所组成的凸包。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423194225714.png" alt="image-20230423194225714" width="800px" /></p><div class="note info"><p>支撑面 &amp;&amp; 支撑点</p></div><p>集合物体通过和支撑面的法线方向做投影所得到的最远距离点被称为支撑点。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423194251409.png" alt="image-20230423194251409" width="600px" /></p><div class="note info"><p>支撑函数</p></div><p>每个图形都有特定的支撑函数，该函数主要用来计算不同方向上的支撑点。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230424155050506.png" alt="image-20230424155050506" width="600px" /></p><div class="note info"><p>上面两个概念整合一下，计算某个法线方向的「闵可夫斯基和」的支撑点</p></div><p>两个图形分别取法线方向和法线反向做投影，然后再做「闵可夫斯基和」：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423195215055.png" alt="image-20230423195215055" width="1000px" /></p><h2 id="gjkgilbertjohnsonkeerthi-distance-algorithm"><a class="anchor" href="#gjkgilbertjohnsonkeerthi-distance-algorithm">#</a> GJK(Gilbert–Johnson–Keerthi distance algorithm)</h2><p>由于「闵可夫斯基差」的特性，求解两个物体最近点可以简化为求解「闵可夫斯基差」点集组成的凸包中距离原点最近的点（前提是两个物体没有发生内嵌）</p><p>【step.1】取 「闵可夫斯基和点集」 上的任意点。得到的支撑点记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>【step.2】取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和到<strong>原点</strong>作为第二条法线，计算支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 组成的面<strong>支撑面</strong>记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>【step.3】通过支撑面计算新的法线（法线方向必须向着原点），法线计算公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>o</mi><msub><mi>w</mi><mn>0</mn></msub></mrow><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mrow><msub><mi>w</mi><mn>0</mn></msub><msub><mi>w</mi><mn>1</mn></msub></mrow><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mrow><msub><mi>w</mi><mn>0</mn></msub><msub><mi>w</mi><mn>1</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{ow_0} \times \vec{w_0w_1} \times \vec{w_0w_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>，并得到新的支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">w_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>【step.4】取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mn>2</mn></msub><msub><mi>w</mi><mn>0</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_2w_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mn>2</mn></msub><msub><mi>w</mi><mn>1</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_2w_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 中法线向着原点的作为新的支撑面计算新的支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">w_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230423204022468.png" alt="image-20230423204022468" width="800px" /></p><p>该迭代计算的退出条件有两个：</p><ul><li>原点在当前三个支撑点组成的三角形<strong>内部</strong>，这种情况下说明物体发生了嵌入，GJK 计算失败。</li><li>该迭代算法收敛到一定的阈值，例如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mi>n</mi></msub><msub><mi>w</mi><mn>0</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_nw_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 和原点距离近乎接近于 0 或者距离变得更大，亦或者超过最大迭代次数等。</li></ul><h2 id="epaexpanding-polytope-algorithm"><a class="anchor" href="#epaexpanding-polytope-algorithm">#</a> EPA(Expanding Polytope Algorithm)</h2><p>EPA 算法和 GJK 非常类似，GJK 是用于计算非重叠情况下两物体的最短距离，而 EPA 则是在此基础之上，计算重叠情况下的最小分离距离。</p><p>两着的思想也非常相似，计算最短距离依靠「闵可夫斯基差」求解凸包集合中距离原点最近的位置，该位置表示最短距离。</p><p>计算最小分离距离也是依靠「闵可夫斯基差」求解凸包集合中距离原点最近的位置，唯一的区别在于 GJK 求解中原点在凸包<strong>外部</strong>，而 EPA 求解时，原点在凸包<strong>内部</strong>。</p><div class="note info"><p>由于 EPA 时 GJK 算法的特例，因此该算法会继承原有 GJK 算法的结果继续迭代，算法核心是构建一个 core shape，而最短脱离点则是该 core shape 中距离原点最近的点的距离：</p></div><p>【step.1】计算 GJK 返回结果里，距离原点距离最近的边 / 面，并向外扩展，得到新的凸包和<strong>更大的</strong>最短距离，我们目的是从最大最短距离集合里面找出最小的。</p><p>【step.2】重复上诉步骤，直到下一次向外扩展没有使得最短距离变大或是外扩的距离很小几乎没有则终止循环。</p><p>【step.3】用最后得到的最近距离面（这里计算的距离不是面到原点的，因为面里的点不在凸包上，因此取顶点计算即可），计算到原点的最短距离。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230424124125996.png" alt="image-20230424124125996" width="1000px" /></p><blockquote><p>可以看到，整个算法对于点集较多的凸包 work 的不是很好，特别是圆形，算法结果收敛会变得很慢。</p></blockquote><h2 id="sweep-情况下如何计算碰撞点"><a class="anchor" href="#sweep-情况下如何计算碰撞点">#</a> Sweep 情况下如何计算碰撞点</h2><p>对于静止物体我们可以直接套用 GJK &amp;&amp; EPA 进行计算，得到最终的最短距离。那么对于运动中的对象如何获取到物体沿着某个方向运动的最长距离呢？</p><p>有一点是可以确定的，一个物体对另一个物体进行 sweep 测试的过程中，「闵可夫斯基差」形状不会改变，变化的只有「位置」。</p><ul><li>【step.1】找到任意一个支撑点 A，沿着 A 和原点方向寻找另一个支撑点 B。已知的是 B 肯定是再 OA 方向上离 O 点最近的。</li><li>【step.2】[设想一下，如果 Sweep 方向横扫，对于闵可夫斯基集合来说就意味着平移。把平移拆分成平行于 OA 反向和垂直于 OA 方向，那么垂直于 OA 方向的移动势必不会让距离变的更远（假设 B 在 OA 上有个投影 B’，B’ 一定是闵可夫斯基集合中沿着 OA 方向投影里，距离原点最近的点，又已知两点的距离表示集合图形的距离，那么垂直于 OA 移动 B’，肯定会让 B’ 变得更长，那么 OB’ 也就更长，两个物体就会更加的远离）。</li><li>【step.3】那么唯一可能缩短距离的方向就还剩下平行于 OA 方向的 Sweep 分量。那么只需要确定，如果 OB’ 的距离大于该分量，那么就不会发生碰撞，反之则<strong>可能</strong>发生碰撞，图中 vw 由于小于 vr。因此可能发生碰撞。</li><li>【step.4】接下来进行步进，由于一次移动 vr 的分量可能导致 B 发生碰撞，但是如果仅仅只移动 vw 距离，就肯定不会发生碰撞，求解出该距离对应的 Sweep 方向所能够步进的最远距离 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>v</mi><mi>r</mi><mi mathvariant="normal">/</mi><mi>v</mi><mi>w</mi><mo>∗</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">offset = vr / vw * r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></li><li>【step.5.A】接着沿着 OB 方向对偏移后的新闵可夫斯基集合再做支持点查询，得到支撑点 C。同样计算出 OC 和 Sweep 对于 OB 的投影 vr 和 vw。如果 vw 方向依旧和 OB 方向同向，且和 vr 反向，那么可以预见，不论如何沿着 OB 移动都不会缩两个图形短距离了，又已知垂直于 OB 方向的移动也不会缩短距离，因此 Sweep 方向的移动必然也不会再缩短距离，此时就视为无碰撞。</li><li>【step.5.B】如果 vr 和 vw 同向，且都和 OA 反向，说明当前的支撑点不准确，需要寻找新的支撑点 A。再次计算新的 vw 和 vr 继续依照 【step.4】步进。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230426151336237.png" alt="image-20230426151336237" width="1600px" /></p><h2 id="physx-的-gjk"><a class="anchor" href="#physx-的-gjk">#</a> PhysX 的 GJK</h2><p>PhysX 的 GJK 在查询和支撑点选取上做了一定的优化：</p><ol><li>初始的支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 挑选方式是基于两个物体中心点的方向来做的。</li><li>第二个支撑点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是基于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>w</mi><mn>0</mn></msub><mi>O</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{w_0O}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1163299999999998em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 方向作为法线求算得到。</li><li>后续支撑点的计算方向有两套规则：<ul><li>支撑点只有两个的情况下，计算原点和两支撑点组成<strong>线段</strong>的最短距离位置。并得到该位置到原点的方向作为查询方向。</li><li>支撑点有三个的情况下，计算三个支撑点组成的三角形和原点的最短距离位置（最短边 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>x</mi></msub><msub><mi>w</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">w_x w_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>）。然后用该位置到原点的方向作为查询方向得到新的支撑点用于替换 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">w_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</li></ul></li></ol><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20230424103457009.png" alt="image-20230424103457009" width="1000px" /></p><h2 id="对于球体和胶囊体如何在有限的迭代中得到最优解"><a class="anchor" href="#对于球体和胶囊体如何在有限的迭代中得到最优解">#</a> 对于球体和胶囊体，如何在有限的迭代中得到最优解</h2><p>计算中引入了一个「膨胀的概念」Unreal 中称为 「Thickness」，PhysX 中称为「Inflation」。这个概念对应求解球体和胶囊体非常有效，有了这个「膨胀值」球体就可以表示成一个「点」，而胶囊体就是一个线段，在计算碰撞的时候，只需要对点和线段做检查，并在结果中加入一个膨胀值即可。</p><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zb2xpZC5zb3VyY2Vmb3JnZS5uZXQvamd0OThjb252ZXgucGRm">A Fast and Robust GJK Implementation for Collision Detection of Convex Objects</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93aW50ZXIuZGV2L2xpbGFwcHMvZ2prLw==">可视化的 GJK 计算页面</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1hanY0NkJTcWNLNA==">A Strange But Elegant Approach to a Surprisingly Hard Problem (GJK Algorithm)</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGl2YS1wb3J0YWwub3JnL3NtYXNoL2dldC9kaXZhMjozNDM4MjAvRlVMTFRFWFQwMS5wZGY=">Real-time Collision Detection with Implicit Objects</span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5yLTUub3JnL2ZpbGVzL2Jvb2tzL2NvbXB1dGVycy9hbGdvLWxpc3QvZ2FtZS1kZXZlbG9wbWVudC9HaW5vX3Zhbl9kZW5fQmVyZ2VuLUNvbGxpc2lvbl9EZXRlY3Rpb25faW5fSW50ZXJhY3RpdmVfM0RfRW52aXJvbm1lbnRzLUVOLnBkZg==">Collision Detection in Interactive 3D Environments</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Collision" scheme="https://hakuya.me/tags/Collision/"/>
    
    <category term="GJK" scheme="https://hakuya.me/tags/GJK/"/>
    
    <category term="EPA" scheme="https://hakuya.me/tags/EPA/"/>
    
  </entry>
  
  <entry>
    <title>UE 资产导出和加载</title>
    <link href="https://hakuya.me/learning/unreal/UE%20%E8%B5%84%E4%BA%A7%E5%AF%BC%E5%87%BA%E5%92%8C%E5%8A%A0%E8%BD%BD/"/>
    <id>https://hakuya.me/learning/unreal/UE%20%E8%B5%84%E4%BA%A7%E5%AF%BC%E5%87%BA%E5%92%8C%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-12-20T02:36:00.000Z</published>
    <updated>2022-12-29T01:36:04.582Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本篇内容和源码均参考 UE5。</p></div><h1 id="ue-资产导出和加载"><a class="anchor" href="#ue-资产导出和加载">#</a> UE 资产导出和加载</h1><p>资产（Asset）是 Unreal Engine 中持久化对象的重要文件，通常以  <code>.uasset</code>  结尾，Asset 的官方定义是存储 UObject 被序列化后的二进制文件。而在 Unreal Engine Editor 中预览和修改操作，本质上就是对这些「资产」文件的读写。下面以 <strong>BlueprintStruct</strong> 为例，分成以下几个步骤，简单梳理整个流程：</p><ul><li>资产加载（Load）</li><li>反序列化（UnSerialize）</li><li>资产导出 （Export）</li><li>序列化（Serialize）</li></ul><h2 id="资产加载"><a class="anchor" href="#资产加载">#</a> 资产加载</h2><p>Unreal 对于非必须资产的加载，使用的是「懒加载」模式。编辑器会在第一次打开的时候读取文件内容并解析到内存。</p><p>通过  <code>UAssetEditorSubsystem::OpenEditorForAsset</code>  -&gt;  <code>LoadPackage</code>  -&gt;  <code>LoadPackageInternal</code></p><h3 id="beginload"><a class="anchor" href="#beginload">#</a> BeginLoad</h3><p><strong>BeginLoad</strong> 主要是用来在加载资源之前，处理好所有留存的异步任务。这个处理操作会在主线程（Game Thread）完成，并且会一直阻塞，直到所有异步任务都处理完毕，一般用于加载资源之前提前进行垃圾回收，避免加载过程中触发 GC。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">BeginLoad</span><span class="token punctuation">(</span>FUObjectSerializeContext<span class="token operator">*</span> LoadContext<span class="token punctuation">,</span> <span class="token keyword">const</span> TCHAR<span class="token operator">*</span> DebugContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LoadContext<span class="token operator">-></span><span class="token function">HasStartedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsInAsyncLoadingThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// Make sure we're finishing up all pending async loads, and trigger texture streaming next tick if necessary.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">FlushAsyncLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">FlushAsyncLoading</span><span class="token punctuation">(</span>int32 RequestId <span class="token comment">/* = INDEX_NONE */</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>GPackageLoader<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>GPackageLoader<span class="token operator">-></span><span class="token function">FlushLoading</span><span class="token punctuation">(</span>RequestId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FAsyncLoadingThread</span><span class="token operator">::</span><span class="token function">FlushLoading</span><span class="token punctuation">(</span>int32 PackageID<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsAsyncLoadingPackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 处理异步任务</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        EAsyncPackageState<span class="token operator">::</span>Type Result <span class="token operator">=</span> <span class="token function">TickAsyncLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FlushRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsMultithreaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token comment">// 维持心跳</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token class-name">FThreadHeartBeat</span><span class="token operator">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HeartBeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token class-name">FPlatformProcess</span><span class="token operator">::</span><span class="token function">SleepNoStats</span><span class="token punctuation">(</span><span class="token number">0.0001f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="getpackagelinker"><a class="anchor" href="#getpackagelinker">#</a> GetPackageLinker</h3><p>GetPackageLinker 负责初始化 UPackage 关联的 <strong>FLinkerLoad</strong> 对象。<strong>FLinkerLoad</strong> 是整个资源加载的核心，负责  <code>FStructuredArchiveFormatter</code> 、 <code>FArchive</code> 、 <code>FStructuredArchive</code> 、 <code>FStructuredArchiveRecord</code>  的管理工作。在 Window 平台下，读取二进制文件时，<strong>FLinkerLoad</strong> 中大致的关系如下图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219172720904.png" alt="image-20221219172720904" /></p><ul><li><p><strong>FArchive</strong>：通过重载  <code>&lt;&lt;</code>  运算符，实现数据的写入和读取操作。</p></li><li><p><strong>FStructuredArchiveRecord</strong> &amp;&amp; <strong>FStructuredArchiveFormatter</strong> &amp;&amp; <strong>FStructuredArchive</strong>：共同定义了读写数据的格式范式。几乎所有 UPackage 数据都可以通过 Slot、Stream、Array、Map、Record 排列组合。</p></li></ul><h4 id="farchivefilereadergenericinternalprecache"><a class="anchor" href="#farchivefilereadergenericinternalprecache">#</a> FArchiveFileReaderGeneric::InternalPrecache</h4><p>FArchiveFileReaderGeneric 是 FArchive 的派生类，负责读接口的封装和读数据的暂存。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FArchiveFileReaderGeneric</span><span class="token operator">::</span><span class="token function">InternalPrecache</span><span class="token punctuation">(</span> int64 PrecacheOffset<span class="token punctuation">,</span> int64 PrecacheSize <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    int64 WriteOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    int64 BufferCount <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token operator">::</span><span class="token function">Min</span><span class="token punctuation">(</span>BufferSize<span class="token punctuation">,</span> Size <span class="token operator">-</span> Pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    int64 ReadCount <span class="token operator">=</span> BufferCount<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    BufferArray<span class="token punctuation">.</span><span class="token function">SetNumUninitialized</span><span class="token punctuation">(</span>BufferCount<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment">/* AllowShrink */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 读取内容</span></pre></td></tr><tr><td data-num="10"></td><td><pre>int64 Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">ReadLowLevel</span><span class="token punctuation">(</span> BufferArray<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> WriteOffset<span class="token punctuation">,</span> ReadCount<span class="token punctuation">,</span> Count <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>FArchiveFileReaderGeneric 持有读取文件的句柄 ——Handle，通过 Handle 对文件进行读取。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FArchiveFileReaderGeneric</span><span class="token operator">::</span><span class="token function">ReadLowLevel</span><span class="token punctuation">(</span> uint8<span class="token operator">*</span> Dest<span class="token punctuation">,</span> int64 CountToRead<span class="token punctuation">,</span> int64<span class="token operator">&amp;</span> OutBytesRead <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> Handle<span class="token operator">-></span><span class="token function">Read</span><span class="token punctuation">(</span> Dest<span class="token punctuation">,</span> CountToRead <span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>OutBytesRead <span class="token operator">=</span> CountToRead<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>OutBytesRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Window 版本下通过 ReadFile 调用 SDK 对文件进行读取，读取的二进制内容，会保存在 FArchiveFileReaderGeneric 的 <strong>BufferArray</strong> 中，加载过程到此结束：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//window 下 IFileHandle 的实现类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FFileHandleWindows</span><span class="token operator">::</span><span class="token function">Read</span><span class="token punctuation">(</span>uint8<span class="token operator">*</span> Dest<span class="token punctuation">,</span> int64 BytesToRead<span class="token punctuation">)</span> override</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// Now kick off an async read</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">TRACE_PLATFORMFILE_BEGIN_READ</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>OverlappedIO<span class="token punctuation">,</span> FileHandle<span class="token punctuation">,</span> FilePos<span class="token punctuation">,</span> BytesToRead<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    int64 TotalNumRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">do</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        uint32 BytesToRead32 <span class="token operator">=</span> <span class="token punctuation">(</span>uint32<span class="token punctuation">)</span>FMath<span class="token operator">::</span>Min<span class="token operator">&lt;</span>int64<span class="token operator">></span><span class="token punctuation">(</span>BytesToRead<span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>UINT32_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        uint32 NumRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>FileHandle<span class="token punctuation">,</span> Destination<span class="token punctuation">,</span> BytesToRead32<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">::</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>NumRead<span class="token punctuation">,</span> <span class="token operator">&amp;</span>OverlappedIO<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//... 异常处理 ...</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        BytesToRead <span class="token operator">-=</span> BytesToRead32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        Destination <span class="token operator">+=</span> BytesToRead32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        TotalNumRead <span class="token operator">+=</span> NumRead<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">// Update where we are in the file</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        FilePos <span class="token operator">+=</span> NumRead<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token function">UpdateOverlappedPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>BytesToRead <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="反序列化"><a class="anchor" href="#反序列化">#</a> 反序列化</h2><p>加载获取到二进制文件后，下一步就是解析二进制内的内容，得到对应的 UPackage 对象。</p><h3 id="flinkerloadprocesspackagesummary"><a class="anchor" href="#flinkerloadprocesspackagesummary">#</a> FLinkerLoad::ProcessPackageSummary</h3><p>ProcessPackageSummary 会对二进制进行解析，并把结果结构化的存储在 <strong>StructuredArchiveRootRecord</strong> 中，主要分成以下几个步骤，由于该部分代码比较复杂，有兴趣的可以深入阅读，这里只简单介绍一下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FLinkerLoad<span class="token operator">::</span>ELinkerStatus <span class="token class-name">FLinkerLoad</span><span class="token operator">::</span><span class="token function">ProcessPackageSummary</span><span class="token punctuation">(</span>TMap<span class="token operator">&lt;</span>TPair<span class="token operator">&lt;</span>FName<span class="token punctuation">,</span> FPackageIndex<span class="token operator">></span><span class="token punctuation">,</span> FPackageIndex<span class="token operator">></span><span class="token operator">*</span> ObjectNameWithOuterToExportMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 解析文件概要：</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 「FPackageFileSummary Summary」 </span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializePackageFileSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 根据 Summary 信息解析 PackageTrailer，包含一些查找表信息</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 「TUniquePtr&lt;UE::FPackageTrailer> PackageTrailer」</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializePackageTrailer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 解析名称映射，序列化对象的时候，相同的字段名通常为了压缩会集中存储，然后其他地方通过名称映射的编号访问</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 「TArray&lt;FNameEntryId> NameMap」</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeNameMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 读取软链接，包括一些资产引用、子路径等</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 「TSet&lt;FSoftObjectPath> SoftObjectPathList」</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeSoftObjectPathList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 文本数据读取</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeGatherableTextDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 读取 ImportMap</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 「TArray&lt;FObjectImport> ImportMap」</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeImportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 读取 ExportMap</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 「TArray&lt;FObjectExport> ExportMap」</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeExportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">// 构造 ExportReaders</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 「TArray&lt;FStructuredArchiveChildReader*> ExportReaders」</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">ConstructExportsReaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">// 修复版本的读取 ImportMap（修复读取到的和最新的不一致问题？）</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FixupImportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">PopulateInstancingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">PopulateRelocationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 修复版本的读取 ExportMap（修复读取到的和最新的不一致问题？）</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FixupExportMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 读取 DependsMap</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 「TArray&lt;TArray&lt;FPackageIndex> > DependsMap」</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializeDependsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">// 生成 ExportMap 对象的 Hash 值并关联 Hash 和 Idx</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">CreateExportHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 通过 Export.OuterIndex 查找 Export 中是否已经有导出好的对象了，有的话直接关联上该 FLinkerLoad</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FindExistingExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">// 序列化 DependsMap</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// 「TArray&lt;FPackageIndex> PreloadDependencies」</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">SerializePreloadDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">// LinkerLoad 创建完成，添加到 FLinkerManager，并再次验证 ImportMap 合法性。</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    Status <span class="token operator">=</span> <span class="token function">FinalizeCreation</span><span class="token punctuation">(</span>ObjectNameWithOuterToExportMap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">return</span> Status<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>前面提到了，从文件中读取到的二进制内容会存储在 FArchiveFileReaderGeneric 的 <strong>BufferArray</strong> 中，在反序列化过程会使用  <code>&lt;&lt;</code>  运算符从 BufferArray 把数据解析到 <strong>StructuredArchiveRootRecord</strong> 内，这里以读取 <strong>Summary</strong> 数据为例：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 反序列化 Summary</span></pre></td></tr><tr><td data-num="2"></td><td><pre>FLinkerLoad<span class="token operator">::</span>ELinkerStatus <span class="token class-name">FLinkerLoad</span><span class="token operator">::</span><span class="token function">SerializePackageFileSummaryInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>StructuredArchiveRootRecord<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">SA_VALUE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Summary"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Summary<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> FORCEINLINE FStructuredArchiveRecord<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>UE<span class="token operator">::</span>StructuredArchive<span class="token operator">::</span>Private<span class="token operator">::</span>TNamedValue<span class="token operator">&lt;</span>T<span class="token operator">></span> Item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">EnterField</span><span class="token punctuation">(</span>Item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> Item<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token comment">// Item.Value == FPackageFileSummary</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 通过基类的 &lt;&lt; 运算符读取 Summary 内的各项数值，这里以 int32 的 Tag 为例：</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> FPackageFileSummary<span class="token operator">&amp;</span> Sum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bCanStartSerializing<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>Record <span class="token operator">&lt;&lt;</span> <span class="token function">SA_VALUE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Tag"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Sum<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里还会执行一次 EnterField 然后进到 FStructuredArchiveSlot &lt;&lt; 逻辑</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">void</span> FStructuredArchiveSlot<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>int32<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">EnterSlot</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>StructuredArchive<span class="token punctuation">.</span>Formatter<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 「FBinaryArchiveFormatter::Serialize」</span></pre></td></tr><tr><td data-num="27"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">LeaveSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">FBinaryArchiveFormatter</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>int32<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>Inner <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span><span class="token comment">// 这里会执行 FLinkerLoad &lt;&lt; 逻辑</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>FORCEINLINE <span class="token keyword">friend</span> FArchive<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FArchive<span class="token operator">&amp;</span> Ar<span class="token punctuation">,</span> int32<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    Ar<span class="token punctuation">.</span><span class="token function">ByteOrderSerialize</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>uint32<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">return</span> Ar<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="43"></td><td><pre>FArchive<span class="token operator">&amp;</span> <span class="token function">ByteOrderSerialize</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsByteSwapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Value<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 「FLinkerLoad::Serialize」</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">SerializeByteOrderSwapped</span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">using</span> FLinker<span class="token operator">::</span>Serialize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>FORCEINLINE <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length<span class="token punctuation">)</span> override</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    Loader<span class="token operator">-></span><span class="token function">Serialize</span><span class="token punctuation">(</span>V<span class="token punctuation">,</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 「FArchiveFileReaderGeneric::Serialize」</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">// 这里会从 BufferArray 把对应长度的内容读取进来</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FArchiveFileReaderGeneric</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> Length<span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token class-name">FMemory</span><span class="token operator">::</span><span class="token function">Memcpy</span><span class="token punctuation">(</span> V<span class="token punctuation">,</span> BufferArray<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>Pos<span class="token operator">-</span>BufferBase<span class="token punctuation">,</span> Copy <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>Pos       <span class="token operator">+=</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>Length    <span class="token operator">-=</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>V          <span class="token operator">=</span><span class="token punctuation">(</span> uint8<span class="token operator">*</span> <span class="token punctuation">)</span>V <span class="token operator">+</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="flinkerloadloadallobjects"><a class="anchor" href="#flinkerloadloadallobjects">#</a> FLinkerLoad::LoadAllObjects</h3><p>LoadAllObjects 主要是初始化 ExportObject。以 <strong>BlueprintStruct</strong> 为例，其组成主要分为以下几个对象：</p><ul><li><strong>UMetaData</strong>：定义了 UPackage 对象本身的特殊属性，描述一些基本信息。</li><li><strong>UUserDefinedStruct</strong>：定义了 <strong>BlueprintStruct</strong> 里的数据结构：</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219111729365.png" alt="image-20221219111729365" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219111700076.png" alt="image-20221219111700076" /></p><ul><li><strong>UUserDefinedStructEditorData</strong>：该结构负责存储 BlueprintStruct 在 Unreal Editor 中的相关信息。</li></ul><blockquote><p>到此，LoadPackageInternal 流程就算是完成了，uasset 文件也被反序列化加载到了内存中，编辑器相关的数据也初始化完成。</p></blockquote><h2 id="资产导出"><a class="anchor" href="#资产导出">#</a> 资产导出</h2><p>编辑器里对于资产的保存是通过注册的控件事件向控制台发送 CMD 实现的，具体指令如下：</p><p><code>OBJ SAVEPACKAGE PACKAGE=&quot;/Game/learn_blueprint/BP_ST_SUB_TASK_DATA&quot; FILE=&quot;../../../../programe/learn_ue/Content/learn_blueprint/BP_ST_SUB_TASK_DATA.uasset&quot; SILENT=true</code></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219114203968.png" alt="image-20221219114203968" /></p><p>先来看看 SaveAsset 的调用堆栈：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219114557034.png" alt="image-20221219114557034" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> InternalSavePackageResult <span class="token function">InternalSavePackage</span><span class="token punctuation">(</span>UPackage<span class="token operator">*</span> PackageToSave<span class="token punctuation">,</span> <span class="token keyword">bool</span> bUseDialog<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> bOutPackageLocallyWritable<span class="token punctuation">,</span> FOutputDevice <span class="token operator">&amp;</span>SaveOutput<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre>bWasSuccessful <span class="token operator">=</span> GEngine<span class="token operator">-></span><span class="token function">Exec</span><span class="token punctuation">(</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token class-name">FString</span><span class="token operator">::</span><span class="token function">Printf</span><span class="token punctuation">(</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"OBJ SAVEPACKAGE PACKAGE=\"%s\" FILE=\"%s\" SILENT=true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>PackageName<span class="token punctuation">,</span> <span class="token operator">*</span>FinalPackageSavePath <span class="token punctuation">)</span><span class="token punctuation">,</span> SaveOutput <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>CMD 的解析流程这里就不再展开了，函数最终会执行到  <code>UEditorEngine::Save</code> ：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219115129805.png" alt="image-20221219115129805" /></p><h3 id="harvestpackage"><a class="anchor" href="#harvestpackage">#</a> HarvestPackage</h3><p>在导出对象之前，Unreal 还需要系统性的收集并整理好所有需要打包的内容，打包所需的依赖，这项工作由 <strong>FPackageHarvester</strong> 来完成，其管理了若干个 <strong>FHarvestedRealm</strong>，并通过  <code>&lt;&lt;</code>  运算符，把需要导出的对象信息按照 ExportObject 为单位存储在 <strong>FHarvestedRealm</strong> 中：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219152624707.png" alt="image-20221219152624707" /></p><h4 id="fpackageharvesterprocessexport"><a class="anchor" href="#fpackageharvesterprocessexport">#</a> FPackageHarvester::ProcessExport</h4><p>ProcessExport 导出的内容主要是之前提到的 <strong>UMetaData</strong>、<strong>UUserDefinedStruct</strong>、<strong>UUserDefinedStructEditorData</strong> 三个 ExportObject：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FPackageHarvester</span><span class="token operator">::</span><span class="token function">ProcessExport</span><span class="token punctuation">(</span><span class="token keyword">const</span> FExportWithContext<span class="token operator">&amp;</span> InProcessContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>UObject<span class="token operator">*</span> Export <span class="token operator">=</span> InProcessContext<span class="token punctuation">.</span>Export<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// In the CDO case the above would serialize most of the references, including transient properties</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// but we still want to serialize the object using the normal path to collect all custom versions it might be using.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">SCOPED_SAVETIMER_TEXT</span><span class="token punctuation">(</span><span class="token operator">*</span>WriteToString<span class="token operator">&lt;</span><span class="token number">128</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">GetClassTraceScope</span><span class="token punctuation">(</span>Export<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"_SaveSerialize"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Export<span class="token operator">-></span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>每个类型都有与之对应的宏定义，这里并非真正意义上的序列化，而是获取需要序列化的数据集：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// UMetaData</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">IMPLEMENT_FARCHIVE_SERIALIZER</span><span class="token punctuation">(</span>UMetaData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">IMPLEMENT_FARCHIVE_SERIALIZER</span><span class="token punctuation">(</span> TClass <span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>FArchive<span class="token operator">&amp;</span> Ar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token function">FStructuredArchiveFromArchive</span><span class="token punctuation">(</span>Ar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">EnterRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// UUserDefinedStruct</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">IMPLEMENT_FARCHIVE_SERIALIZER</span><span class="token punctuation">(</span>UUserDefinedStruct<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// UUserDefinedStructEditorData</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">IMPLEMENT_FSTRUCTUREDARCHIVE_SERIALIZER</span><span class="token punctuation">(</span>UUserDefinedStructEditorData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">IMPLEMENT_FSTRUCTUREDARCHIVE_SERIALIZER</span><span class="token punctuation">(</span> TClass <span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FRecord Record<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> FArchiveUObjectFromStructuredArchive <span class="token function">Ar</span><span class="token punctuation">(</span>Record<span class="token punctuation">.</span><span class="token function">EnterField</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"BaseClassAutoGen"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">TClass</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>Ar<span class="token punctuation">.</span><span class="token function">GetArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Ar<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span></pre></td></tr></table></figure><p>主要来看下 <strong>UUserDefinedStruct</strong> 中的实现，该操作会把 UUserDefinedStruct 内的 Property 存储在 <strong>FHarvestedRealm</strong> 内：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219145506673.png" alt="image-20221219145506673" /></p><p>由于代码过于复杂，这里做了一定程度上的简化：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 直接执行父类序列化接口</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UUserDefinedStruct</span><span class="token operator">::</span><span class="token function">SerializeTaggedProperties</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Data<span class="token punctuation">,</span> UStruct<span class="token operator">*</span> DefaultsStruct<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Defaults<span class="token punctuation">,</span> <span class="token keyword">const</span> UObject<span class="token operator">*</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span> <span class="token keyword">const</span> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">SerializeTaggedProperties</span><span class="token punctuation">(</span>Slot<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> DefaultsStruct<span class="token punctuation">,</span> Defaults<span class="token punctuation">,</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 执行带版本控制的属性序列化 SerializeVersionedTaggedProperties</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UStruct</span><span class="token operator">::</span><span class="token function">SerializeTaggedProperties</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Data<span class="token punctuation">,</span> UStruct<span class="token operator">*</span> DefaultsStruct<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Defaults<span class="token punctuation">,</span> <span class="token keyword">const</span> UObject<span class="token operator">*</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Slot<span class="token punctuation">.</span><span class="token function">GetArchiveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseUnversionedPropertySerialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">SerializeUnversionedProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Slot<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> DefaultsStruct<span class="token punctuation">,</span> Defaults<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">SerializeVersionedTaggedProperties</span><span class="token punctuation">(</span>Slot<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> DefaultsStruct<span class="token punctuation">,</span> Defaults<span class="token punctuation">,</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 由于属性本身就是单链表结构，因此这里其实就是一个个的进行序列化，但是加了很多复杂校验因此看着代码非常庞大</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UStruct</span><span class="token operator">::</span><span class="token function">SerializeVersionedTaggedProperties</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Data<span class="token punctuation">,</span> UStruct<span class="token operator">*</span> DefaultsStruct<span class="token punctuation">,</span> uint8<span class="token operator">*</span> Defaults<span class="token punctuation">,</span> <span class="token keyword">const</span> UObject<span class="token operator">*</span> BreakRecursionIfFullyLoad<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// Iterate over properties in the order they were linked and serialize them.</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>FProperty<span class="token operator">*</span> Property <span class="token operator">=</span> UnderlyingArchive<span class="token punctuation">.</span>ArUseCustomPropertyList <span class="token operator">?</span> <span class="token punctuation">(</span>CustomPropertyNode <span class="token operator">?</span> CustomPropertyNode<span class="token operator">-></span>Property <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span> PropertyLink<span class="token punctuation">;</span> Property<span class="token punctuation">;</span> Property <span class="token operator">=</span> UnderlyingArchive<span class="token punctuation">.</span>ArUseCustomPropertyList <span class="token operator">?</span> <span class="token class-name">FCustomPropertyListNode</span><span class="token operator">::</span><span class="token function">GetNextPropertyAndAdvance</span><span class="token punctuation">(</span>CustomPropertyNode<span class="token punctuation">)</span> <span class="token operator">:</span> Property<span class="token operator">-></span>PropertyLinkNext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        FPropertyTag <span class="token function">Tag</span><span class="token punctuation">(</span> UnderlyingArchive<span class="token punctuation">,</span> Property<span class="token punctuation">,</span> Idx<span class="token punctuation">,</span> DataPtr<span class="token punctuation">,</span> DefaultValue <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        PropertySlot <span class="token operator">&lt;&lt;</span> Tag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        Tag<span class="token punctuation">.</span><span class="token function">SerializeTaggedProperty</span><span class="token punctuation">(</span>PropertySlot<span class="token punctuation">,</span> Property<span class="token punctuation">,</span> DataPtr<span class="token punctuation">,</span> DefaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 通过 &lt;&lt; 运算符存储</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FStructuredArchive<span class="token operator">::</span>FSlot Slot<span class="token punctuation">,</span> FPropertyTag<span class="token operator">&amp;</span> Tag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>Slot <span class="token operator">&lt;&lt;</span> <span class="token function">SA_ATTRIBUTE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Tag<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>Slot <span class="token operator">&lt;&lt;</span> <span class="token function">SA_ATTRIBUTE</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Type"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Tag<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里以  <code>task_id</code>  为例，说明整个存储过程：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219212010069.png" alt="image-20221219212010069" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>FORCEINLINE <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>UE<span class="token operator">::</span>StructuredArchive<span class="token operator">::</span>Private<span class="token operator">::</span>TNamedAttribute<span class="token operator">&lt;</span>T<span class="token operator">></span> Item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">EnterAttribute</span><span class="token punctuation">(</span>Item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> Item<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> FStructuredArchiveSlot<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">EnterSlot</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>StructuredArchive<span class="token punctuation">.</span>Formatter<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>StructuredArchive<span class="token punctuation">.</span><span class="token function">LeaveSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">FBinaryArchiveFormatter</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>Inner <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>FArchive<span class="token operator">&amp;</span> FArchiveFromStructuredArchiveImpl<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">FName</span><span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>InnerArchive <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 最终会调用到 FPackageHarvester 的 &lt;&lt; 函数</span></pre></td></tr><tr><td data-num="26"></td><td><pre>FArchive<span class="token operator">&amp;</span> FPackageHarvester<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">HarvestExportDataName</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// 数据最终会存储在 HarvestedRealm 的 NamesReferencedFromExportData 中以备导出时使用</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 实际上 property 里面的字段还有很多，不同字段可能存放在不同位置，这里仅仅是用变量的别名存储作为样例</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FPackageHarvester</span><span class="token operator">::</span><span class="token function">HarvestExportDataName</span><span class="token punctuation">(</span>FName Name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>SaveContext<span class="token punctuation">.</span><span class="token function">GetHarvestedRealm</span><span class="token punctuation">(</span>CurrentExportHarvestingRealm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetNamesReferencedFromExportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Name<span class="token punctuation">.</span><span class="token function">GetDisplayIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219212427302.png" alt="image-20221219212427302" /></p><p>值得一提的是，这里的三个 <strong>HarvestedRealms</strong> 分别定义了三个存储域，目前用的是 Editor 版本，因此存储在第三个 <strong>HarvestedRealms</strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="2"></td><td><pre> * Available save realm during save package harvesting </pre></td></tr><tr><td data-num="3"></td><td><pre> * A realm is the set of objects gathered and referenced for a particular domain/context</pre></td></tr><tr><td data-num="4"></td><td><pre> */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ESaveRealm</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint32</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Game<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Optional<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Editor<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>RealmCount<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>None<span class="token operator">=</span> RealmCount</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="createlinker-buildlinker"><a class="anchor" href="#createlinker-buildlinker">#</a> CreateLinker  &amp;&amp; BuildLinker</h3><p>从上面 SaveContext 的数据中可以发现，所有 HarvestedRealms 里的 <strong>Linker</strong> 对象都是 NULL，根据资产加载的经验，每个文件的导出必须依赖一个 Linker。因此还需要创建对应的 Linker 对象来关联导出文件，此外还需要关联上要导出的三个对象：<strong>UMetaData</strong>、<strong>UUserDefinedStruct</strong>、<strong>UUserDefinedStructEditorData</strong>。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219171233982.png" alt="image-20221219171233982" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 创建 Linker 关联</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ESavePackageResult <span class="token function">CreateLinker</span><span class="token punctuation">(</span>FSaveContext<span class="token operator">&amp;</span> SaveContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//...</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// Allocate the linker with a tempfile, forcing byte swapping if wanted.</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    SaveContext<span class="token punctuation">.</span><span class="token function">SetTempFilename</span><span class="token punctuation">(</span><span class="token class-name">FPaths</span><span class="token operator">::</span><span class="token function">CreateTempFilename</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">FPaths</span><span class="token operator">::</span><span class="token function">ProjectSavedDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>BaseFilename<span class="token punctuation">.</span><span class="token function">Left</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    SaveContext<span class="token punctuation">.</span><span class="token function">SetLinker</span><span class="token punctuation">(</span>MakePimpl<span class="token operator">&lt;</span>FLinkerSave<span class="token operator">></span><span class="token punctuation">(</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetTempFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SaveContext<span class="token punctuation">.</span><span class="token function">IsForceByteSwapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SaveContext<span class="token punctuation">.</span><span class="token function">IsSaveUnversionedNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">//...</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// set formatter</span></pre></td></tr><tr><td data-num="12"></td><td><pre>SaveContext<span class="token punctuation">.</span><span class="token function">SetFormatter</span><span class="token punctuation">(</span>MakeUnique<span class="token operator">&lt;</span>FBinaryArchiveFormatter<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>FArchive<span class="token operator">*</span><span class="token punctuation">)</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetLinker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>SaveContext<span class="token punctuation">.</span><span class="token function">SetStructuredArchive</span><span class="token punctuation">(</span>MakeUnique<span class="token operator">&lt;</span>FStructuredArchive<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span>SaveContext<span class="token punctuation">.</span><span class="token function">GetFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">return</span> <span class="token function">ReturnSuccessOrCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 主要是把 HarvestedRealms 里的数据解析存储到 Linker 内</span></pre></td></tr><tr><td data-num="18"></td><td><pre>ESavePackageResult <span class="token function">BuildLinker</span><span class="token punctuation">(</span>FSaveContext<span class="token operator">&amp;</span> SaveContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// Setup Linker </span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// Build Name Map</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// Build SoftObjectPathList</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// Build GatherableText</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// Build ImportMap</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// Build ExportMap &amp; Package Netplay data</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">// Build Linker Reverse Mapping</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">// Build DependsMap</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">// Build SoftPackageReference &amp; Searchable Name Map</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">// Map Export Indices</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">return</span> <span class="token function">ReturnSuccessOrCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="序列化"><a class="anchor" href="#序列化">#</a> 序列化</h2><p>序列化流程就是把对象数据打包成二进制文件，Window 环境下序列化 <strong>UUserDefinedStruct</strong> 涉及到的类图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219222221548.png" alt="image-20221219222221548" /></p><ul><li><strong>FHarvestedRealm</strong> 内部的对象非常丰富，承担了序列化数据的临时载体。</li><li><strong>FSaveContext</strong> 是整个流程的核心。负责管理 <strong>FHarvestedRealm</strong> 和各种上下文标记。</li><li><strong>FLinkerSave</strong> 则是用来关联导出文件和 <strong>FSaveContext</strong>，等于是所有功能载体的集合。</li></ul><h3 id="writepackageheader-writeexports"><a class="anchor" href="#writepackageheader-writeexports">#</a> WritePackageHeader &amp;&amp; WriteExports</h3><p>写入其实分为两个部分，一个是头文件（<strong>WritePackageHeader</strong>），包括 Summary 、NameMap 等等，可以参考之前的反序列化；另一个是 ExportObject 内容（<strong>WriteExports</strong>），整体流程比较接近，这里以 WriteExports 为例进行介绍：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219213849222.png" alt="image-20221219213849222" /></p><p>整体流程和  <code>FPackageHarvester::ProcessExport</code>  几乎一致，唯一的区别在于 <strong>FArchiveFromStructuredArchiveImpl</strong> 中的 <strong>InnerArchive</strong> 对象：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FArchive<span class="token operator">&amp;</span> FArchiveFromStructuredArchiveImpl<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">FName</span><span class="token operator">&amp;</span> Value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ProcessExport 中由于还没有初始化 Linker 对象，因此 InnerArchive 是 FPackageHarvester</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// WriteExports 中 Linker 对象已经初始化完毕，因此 InnerArchive 是 FLinkerSave</span></pre></td></tr><tr><td data-num="5"></td><td><pre>InnerArchive <span class="token operator">&lt;&lt;</span> Value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// ProcessExport</span></pre></td></tr><tr><td data-num="10"></td><td><pre>FArchive<span class="token operator">&amp;</span> FPackageHarvester<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>FName<span class="token operator">&amp;</span> Name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">HarvestExportDataName</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// WriteExports</span></pre></td></tr><tr><td data-num="17"></td><td><pre>FArchive<span class="token operator">&amp;</span> FLinkerSave<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span> FName<span class="token operator">&amp;</span> InName <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">//...</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> Ar <span class="token operator">&lt;&lt;</span> Save <span class="token operator">&lt;&lt;</span> Number<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>而 <strong>FLinkerSave</strong> 最终会调用 <strong>FArchiveFileWriterGeneric</strong> 的 <strong>Serialize</strong> 把 <strong>BufferArray</strong> 内临时存储的二进制内容，写入到  <strong>Handler</strong> 句柄所绑定的文件内。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FLinkerSave</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Saver<span class="token operator">-></span><span class="token function">Serialize</span><span class="token punctuation">(</span> V<span class="token punctuation">,</span> Length <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">FArchiveFileWriterGeneric</span><span class="token operator">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> V<span class="token punctuation">,</span> int64 Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Pos <span class="token operator">+=</span> Length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> Length <span class="token operator">>=</span> BufferSize <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">FlushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">WriteLowLevel</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>V<span class="token punctuation">,</span> Length <span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">SetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">LogWriteError</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Error writing to file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>int64 Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> Length <span class="token operator">></span><span class="token punctuation">(</span> Copy<span class="token operator">=</span>BufferSize<span class="token operator">-</span>BufferArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>BufferArray<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>V<span class="token punctuation">,</span> Copy<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>Length      <span class="token operator">-=</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>V            <span class="token operator">=</span><span class="token punctuation">(</span> uint8<span class="token operator">*</span> <span class="token punctuation">)</span>V <span class="token operator">+</span> Copy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">FlushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 回写</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> Length <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>BufferArray<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8<span class="token operator">*</span><span class="token punctuation">)</span>V<span class="token punctuation">,</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FArchiveFileWriterGeneric</span><span class="token operator">::</span><span class="token function">FlushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">bool</span> bDidWriteData <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>int64 BufferNum <span class="token operator">=</span> BufferArray<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>bDidWriteData <span class="token operator">=</span> <span class="token function">WriteLowLevel</span><span class="token punctuation">(</span>BufferArray<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BufferNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bDidWriteData<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">SetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">LogWriteError</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Error flushing file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>BufferArray<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">return</span> bDidWriteData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FArchiveFileWriterGeneric</span><span class="token operator">::</span><span class="token function">WriteLowLevel</span><span class="token punctuation">(</span> <span class="token keyword">const</span> uint8<span class="token operator">*</span> Src<span class="token punctuation">,</span> int64 CountToWrite <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">return</span> Handle<span class="token operator">-></span><span class="token function">Write</span><span class="token punctuation">(</span> Src<span class="token punctuation">,</span> CountToWrite <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="finalizetempoutputfiles"><a class="anchor" href="#finalizetempoutputfiles">#</a> FinalizeTempOutputFiles</h3><p>另外导出文件实际上是个临时文件，因为考虑到写入过程中可能出现的各种异常情况，如果写坏了原文件并且写入异常情况下，可能导致新文件不可用</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221219161435715.png" alt="image-20221219161435715" /></p><p>并且，在文件写入成功即将替换掉原文件之前，Unreal 还会对原文件进行备份，避免异常情况下替换失败导致原文件丢失：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>ESavePackageResult <span class="token function">FinalizeTempOutputFiles</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPackagePath<span class="token operator">&amp;</span> PackagePath<span class="token punctuation">,</span> <span class="token keyword">const</span> FSavePackageOutputFileArray<span class="token operator">&amp;</span> OutputFiles<span class="token punctuation">,</span> <span class="token keyword">const</span> FDateTime<span class="token operator">&amp;</span> FinalTimeStamp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 Index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Index <span class="token operator">&lt;</span> OutputFiles<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>Index<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>CanFileBeMoved<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment">// 【step.1】备份文件 .uasset -> old.temp</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FileSystem<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token operator">*</span>TempFilePath<span class="token punctuation">,</span> <span class="token operator">*</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RecordMovedFile</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">,</span> TempFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RestorePackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">return</span> ESavePackageResult<span class="token operator">::</span>Error<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FSavePackageOutputFile<span class="token operator">&amp;</span> File <span class="token operator">:</span> OutputFiles<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span>TempFilePath<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 【step.2】新文件覆盖原文件 new.temp -> .uasset</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FileSystem<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">,</span> <span class="token operator">*</span>File<span class="token punctuation">.</span>TempFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RecordNewFile</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">RestorePackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">return</span> ESavePackageResult<span class="token operator">::</span>Error<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FinalTimeStamp <span class="token operator">!=</span> <span class="token class-name">FDateTime</span><span class="token operator">::</span><span class="token function">MinValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>FileSystem<span class="token punctuation">.</span><span class="token function">SetTimeStamp</span><span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">.</span>TargetPath<span class="token punctuation">,</span> FinalTimeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// 【step.3】清理原文件的备份 remove old.temp</span></pre></td></tr><tr><td data-num="43"></td><td><pre>OriginalPackageState<span class="token punctuation">.</span><span class="token function">DiscardBackupFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">return</span> ESavePackageResult<span class="token operator">::</span>Success<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>至此，整个加载导出流程就基本上梳理完成，其中的某些对象由于依赖关系和复杂的数据结构等问题可能涉及到更为复杂的序列化 &amp;&amp; 反序列化规则，但整理流程应该大同小异，更多细节的内容还需要读者自行摸索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本篇内容和源码均参考 UE5。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;ue-资产导出和加载&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ue-资产导出和加载&quot;&gt;#&lt;/a&gt; UE 资产导出和加载&lt;/h1&gt;
&lt;p&gt;资产（A</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="Asset" scheme="https://hakuya.me/tags/Asset/"/>
    
    <category term="Serialize" scheme="https://hakuya.me/tags/Serialize/"/>
    
  </entry>
  
  <entry>
    <title>UE VirtualMachine</title>
    <link href="https://hakuya.me/learning/unreal/UE%20VirtualMachine/"/>
    <id>https://hakuya.me/learning/unreal/UE%20VirtualMachine/</id>
    <published>2022-11-24T08:19:00.000Z</published>
    <updated>2023-01-12T01:33:35.726Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本篇内容和源码均参考 UE5。</p></div><h1 id="ue-virtualmachine"><a class="anchor" href="#ue-virtualmachine">#</a> UE  VirtualMachine</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EExprToken</span> <span class="token operator">:</span> uint8</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Variable references.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>EX_LocalVariable<span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment">// A local variable.</span></pre></td></tr><tr><td data-num="5"></td><td><pre>EX_InstanceVariable<span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">,</span><span class="token comment">// An object variable.</span></pre></td></tr><tr><td data-num="6"></td><td><pre>EX_DefaultVariable<span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token comment">// Default variable for a class context.</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//= 0x03,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>EX_Return<span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">,</span><span class="token comment">// Return from function.</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//= 0x05,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>EX_Jump<span class="token operator">=</span> <span class="token number">0x06</span><span class="token punctuation">,</span><span class="token comment">// Goto a local address in code.</span></pre></td></tr><tr><td data-num="11"></td><td><pre>EX_JumpIfNot<span class="token operator">=</span> <span class="token number">0x07</span><span class="token punctuation">,</span><span class="token comment">// Goto if not expression.</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">//= 0x08,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>EX_Assert<span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">,</span><span class="token comment">// Assertion.</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">//= 0x0A,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>EX_Nothing<span class="token operator">=</span> <span class="token number">0x0B</span><span class="token punctuation">,</span><span class="token comment">// No operation.</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//= 0x0C,</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//= 0x0D,</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//= 0x0E,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>EX_Let<span class="token operator">=</span> <span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token comment">// Assign an arbitrary size value to a variable.</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//= 0x10,</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">//= 0x11,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>EX_ClassContext<span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">,</span><span class="token comment">// Class default object context.</span></pre></td></tr><tr><td data-num="23"></td><td><pre>EX_MetaCast             <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token comment">// Metaclass cast.</span></pre></td></tr><tr><td data-num="24"></td><td><pre>EX_LetBool<span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token comment">// Let boolean variable.</span></pre></td></tr><tr><td data-num="25"></td><td><pre>EX_EndParmValue<span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">,</span><span class="token comment">// end of default value for optional function parameter</span></pre></td></tr><tr><td data-num="26"></td><td><pre>EX_EndFunctionParms<span class="token operator">=</span> <span class="token number">0x16</span><span class="token punctuation">,</span><span class="token comment">// End of function call parameters.</span></pre></td></tr><tr><td data-num="27"></td><td><pre>EX_Self<span class="token operator">=</span> <span class="token number">0x17</span><span class="token punctuation">,</span><span class="token comment">// Self object.</span></pre></td></tr><tr><td data-num="28"></td><td><pre>EX_Skip<span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">,</span><span class="token comment">// Skippable expression.</span></pre></td></tr><tr><td data-num="29"></td><td><pre>EX_Context<span class="token operator">=</span> <span class="token number">0x19</span><span class="token punctuation">,</span><span class="token comment">// Call a function through an object context.</span></pre></td></tr><tr><td data-num="30"></td><td><pre>EX_Context_FailSilent<span class="token operator">=</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token comment">// Call a function through an object context (can fail silently if the context is NULL; only generated for functions that don't have output or return values).</span></pre></td></tr><tr><td data-num="31"></td><td><pre>EX_VirtualFunction<span class="token operator">=</span> <span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token comment">// A function call with parameters.</span></pre></td></tr><tr><td data-num="32"></td><td><pre>EX_FinalFunction<span class="token operator">=</span> <span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token comment">// A prebound function call with parameters.</span></pre></td></tr><tr><td data-num="33"></td><td><pre>EX_IntConst<span class="token operator">=</span> <span class="token number">0x1D</span><span class="token punctuation">,</span><span class="token comment">// Int constant.</span></pre></td></tr><tr><td data-num="34"></td><td><pre>EX_FloatConst<span class="token operator">=</span> <span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token comment">// Floating point constant.</span></pre></td></tr><tr><td data-num="35"></td><td><pre>EX_StringConst<span class="token operator">=</span> <span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token comment">// String constant.</span></pre></td></tr><tr><td data-num="36"></td><td><pre>EX_ObjectConst    <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">,</span><span class="token comment">// An object constant.</span></pre></td></tr><tr><td data-num="37"></td><td><pre>EX_NameConst<span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">,</span><span class="token comment">// A name constant.</span></pre></td></tr><tr><td data-num="38"></td><td><pre>EX_RotationConst<span class="token operator">=</span> <span class="token number">0x22</span><span class="token punctuation">,</span><span class="token comment">// A rotation constant.</span></pre></td></tr><tr><td data-num="39"></td><td><pre>EX_VectorConst<span class="token operator">=</span> <span class="token number">0x23</span><span class="token punctuation">,</span><span class="token comment">// A vector constant.</span></pre></td></tr><tr><td data-num="40"></td><td><pre>EX_ByteConst<span class="token operator">=</span> <span class="token number">0x24</span><span class="token punctuation">,</span><span class="token comment">// A byte constant.</span></pre></td></tr><tr><td data-num="41"></td><td><pre>EX_IntZero<span class="token operator">=</span> <span class="token number">0x25</span><span class="token punctuation">,</span><span class="token comment">// Zero.</span></pre></td></tr><tr><td data-num="42"></td><td><pre>EX_IntOne<span class="token operator">=</span> <span class="token number">0x26</span><span class="token punctuation">,</span><span class="token comment">// One.</span></pre></td></tr><tr><td data-num="43"></td><td><pre>EX_True<span class="token operator">=</span> <span class="token number">0x27</span><span class="token punctuation">,</span><span class="token comment">// Bool True.</span></pre></td></tr><tr><td data-num="44"></td><td><pre>EX_False<span class="token operator">=</span> <span class="token number">0x28</span><span class="token punctuation">,</span><span class="token comment">// Bool False.</span></pre></td></tr><tr><td data-num="45"></td><td><pre>EX_TextConst<span class="token operator">=</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token comment">// FText constant</span></pre></td></tr><tr><td data-num="46"></td><td><pre>EX_NoObject<span class="token operator">=</span> <span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token comment">// NoObject.</span></pre></td></tr><tr><td data-num="47"></td><td><pre>EX_TransformConst<span class="token operator">=</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token comment">// A transform constant</span></pre></td></tr><tr><td data-num="48"></td><td><pre>EX_IntConstByte<span class="token operator">=</span> <span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token comment">// Int constant that requires 1 byte.</span></pre></td></tr><tr><td data-num="49"></td><td><pre>EX_NoInterface<span class="token operator">=</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token comment">// A null interface (similar to EX_NoObject, but for interfaces)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>EX_DynamicCast<span class="token operator">=</span> <span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token comment">// Safe dynamic class casting.</span></pre></td></tr><tr><td data-num="51"></td><td><pre>EX_StructConst<span class="token operator">=</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token comment">// An arbitrary UStruct constant</span></pre></td></tr><tr><td data-num="52"></td><td><pre>EX_EndStructConst<span class="token operator">=</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token comment">// End of UStruct constant</span></pre></td></tr><tr><td data-num="53"></td><td><pre>EX_SetArray<span class="token operator">=</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token comment">// Set the value of arbitrary array</span></pre></td></tr><tr><td data-num="54"></td><td><pre>EX_EndArray<span class="token operator">=</span> <span class="token number">0x32</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="55"></td><td><pre>EX_PropertyConst<span class="token operator">=</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token comment">// FProperty constant.</span></pre></td></tr><tr><td data-num="56"></td><td><pre>EX_UnicodeStringConst   <span class="token operator">=</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token comment">// Unicode string constant.</span></pre></td></tr><tr><td data-num="57"></td><td><pre>EX_Int64Const<span class="token operator">=</span> <span class="token number">0x35</span><span class="token punctuation">,</span><span class="token comment">// 64-bit integer constant.</span></pre></td></tr><tr><td data-num="58"></td><td><pre>EX_UInt64Const<span class="token operator">=</span> <span class="token number">0x36</span><span class="token punctuation">,</span><span class="token comment">// 64-bit unsigned integer constant.</span></pre></td></tr><tr><td data-num="59"></td><td><pre>EX_DoubleConst<span class="token operator">=</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token comment">// Double constant.</span></pre></td></tr><tr><td data-num="60"></td><td><pre>EX_Cast<span class="token operator">=</span> <span class="token number">0x38</span><span class="token punctuation">,</span><span class="token comment">// A casting operator which reads the type as the subsequent byte</span></pre></td></tr><tr><td data-num="61"></td><td><pre>EX_SetSet<span class="token operator">=</span> <span class="token number">0x39</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="62"></td><td><pre>EX_EndSet<span class="token operator">=</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="63"></td><td><pre>EX_SetMap<span class="token operator">=</span> <span class="token number">0x3B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="64"></td><td><pre>EX_EndMap<span class="token operator">=</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="65"></td><td><pre>EX_SetConst<span class="token operator">=</span> <span class="token number">0x3D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="66"></td><td><pre>EX_EndSetConst<span class="token operator">=</span> <span class="token number">0x3E</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="67"></td><td><pre>EX_MapConst<span class="token operator">=</span> <span class="token number">0x3F</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="68"></td><td><pre>EX_EndMapConst<span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="69"></td><td><pre>EX_Vector3fConst<span class="token operator">=</span> <span class="token number">0x41</span><span class="token punctuation">,</span><span class="token comment">// A float vector constant.</span></pre></td></tr><tr><td data-num="70"></td><td><pre>EX_StructMemberContext<span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token comment">// Context expression to address a property within a struct</span></pre></td></tr><tr><td data-num="71"></td><td><pre>EX_LetMulticastDelegate<span class="token operator">=</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token comment">// Assignment to a multi-cast delegate</span></pre></td></tr><tr><td data-num="72"></td><td><pre>EX_LetDelegate<span class="token operator">=</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token comment">// Assignment to a delegate</span></pre></td></tr><tr><td data-num="73"></td><td><pre>EX_LocalVirtualFunction<span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token comment">// Special instructions to quickly call a virtual function that we know is going to run only locally</span></pre></td></tr><tr><td data-num="74"></td><td><pre>EX_LocalFinalFunction<span class="token operator">=</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token comment">// Special instructions to quickly call a final function that we know is going to run only locally</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment">//= 0x47, // CST_ObjectToBool</span></pre></td></tr><tr><td data-num="76"></td><td><pre>EX_LocalOutVariable<span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token comment">// local out (pass by reference) function parameter</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token comment">//= 0x49, // CST_InterfaceToBool</span></pre></td></tr><tr><td data-num="78"></td><td><pre>EX_DeprecatedOp4A<span class="token operator">=</span> <span class="token number">0x4A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="79"></td><td><pre>EX_InstanceDelegate<span class="token operator">=</span> <span class="token number">0x4B</span><span class="token punctuation">,</span><span class="token comment">// const reference to a delegate or normal function object</span></pre></td></tr><tr><td data-num="80"></td><td><pre>EX_PushExecutionFlow<span class="token operator">=</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token comment">// push an address on to the execution flow stack for future execution when a EX_PopExecutionFlow is executed.   Execution continues on normally and doesn't change to the pushed address.</span></pre></td></tr><tr><td data-num="81"></td><td><pre>EX_PopExecutionFlow<span class="token operator">=</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token comment">// continue execution at the last address previously pushed onto the execution flow stack.</span></pre></td></tr><tr><td data-num="82"></td><td><pre>EX_ComputedJump<span class="token operator">=</span> <span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token comment">// Goto a local address in code, specified by an integer value.</span></pre></td></tr><tr><td data-num="83"></td><td><pre>EX_PopExecutionFlowIfNot <span class="token operator">=</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token comment">// continue execution at the last address previously pushed onto the execution flow stack, if the condition is not true.</span></pre></td></tr><tr><td data-num="84"></td><td><pre>EX_Breakpoint<span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token comment">// Breakpoint.  Only observed in the editor, otherwise it behaves like EX_Nothing.</span></pre></td></tr><tr><td data-num="85"></td><td><pre>EX_InterfaceContext<span class="token operator">=</span> <span class="token number">0x51</span><span class="token punctuation">,</span><span class="token comment">// Call a function through a native interface variable</span></pre></td></tr><tr><td data-num="86"></td><td><pre>EX_ObjToInterfaceCast   <span class="token operator">=</span> <span class="token number">0x52</span><span class="token punctuation">,</span><span class="token comment">// Converting an object reference to native interface variable</span></pre></td></tr><tr><td data-num="87"></td><td><pre>EX_EndOfScript<span class="token operator">=</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token comment">// Last byte in script code</span></pre></td></tr><tr><td data-num="88"></td><td><pre>EX_CrossInterfaceCast<span class="token operator">=</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token comment">// Converting an interface variable reference to native interface variable</span></pre></td></tr><tr><td data-num="89"></td><td><pre>EX_InterfaceToObjCast   <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token comment">// Converting an interface variable reference to an object</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token comment">//= 0x56,</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token comment">//= 0x57,</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment">//= 0x58,</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token comment">//= 0x59,</span></pre></td></tr><tr><td data-num="94"></td><td><pre>EX_WireTracepoint<span class="token operator">=</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token comment">// Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.</span></pre></td></tr><tr><td data-num="95"></td><td><pre>EX_SkipOffsetConst<span class="token operator">=</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token comment">// A CodeSizeSkipOffset constant</span></pre></td></tr><tr><td data-num="96"></td><td><pre>EX_AddMulticastDelegate <span class="token operator">=</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token comment">// Adds a delegate to a multicast delegate's targets</span></pre></td></tr><tr><td data-num="97"></td><td><pre>EX_ClearMulticastDelegate <span class="token operator">=</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token comment">// Clears all delegates in a multicast target</span></pre></td></tr><tr><td data-num="98"></td><td><pre>EX_Tracepoint<span class="token operator">=</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token comment">// Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.</span></pre></td></tr><tr><td data-num="99"></td><td><pre>EX_LetObj<span class="token operator">=</span> <span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token comment">// assign to any object ref pointer</span></pre></td></tr><tr><td data-num="100"></td><td><pre>EX_LetWeakObjPtr<span class="token operator">=</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token comment">// assign to a weak object pointer</span></pre></td></tr><tr><td data-num="101"></td><td><pre>EX_BindDelegate<span class="token operator">=</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token comment">// bind object and name to delegate</span></pre></td></tr><tr><td data-num="102"></td><td><pre>EX_RemoveMulticastDelegate <span class="token operator">=</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token comment">// Remove a delegate from a multicast delegate's targets</span></pre></td></tr><tr><td data-num="103"></td><td><pre>EX_CallMulticastDelegate <span class="token operator">=</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token comment">// Call multicast delegate</span></pre></td></tr><tr><td data-num="104"></td><td><pre>EX_LetValueOnPersistentFrame <span class="token operator">=</span> <span class="token number">0x64</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="105"></td><td><pre>EX_ArrayConst<span class="token operator">=</span> <span class="token number">0x65</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="106"></td><td><pre>EX_EndArrayConst<span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="107"></td><td><pre>EX_SoftObjectConst<span class="token operator">=</span> <span class="token number">0x67</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="108"></td><td><pre>EX_CallMath<span class="token operator">=</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token comment">// static pure function from on local call space</span></pre></td></tr><tr><td data-num="109"></td><td><pre>EX_SwitchValue<span class="token operator">=</span> <span class="token number">0x69</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="110"></td><td><pre>EX_InstrumentationEvent<span class="token operator">=</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token comment">// Instrumentation event</span></pre></td></tr><tr><td data-num="111"></td><td><pre>EX_ArrayGetByRef<span class="token operator">=</span> <span class="token number">0x6B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="112"></td><td><pre>EX_ClassSparseDataVariable <span class="token operator">=</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token comment">// Sparse data variable</span></pre></td></tr><tr><td data-num="113"></td><td><pre>EX_FieldPathConst<span class="token operator">=</span> <span class="token number">0x6D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="114"></td><td><pre>EX_Max<span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>虚拟机的基本操作指令集。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本篇内容和源码均参考 UE5。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;ue-virtualmachine&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ue-virtualmachine&quot;&gt;#&lt;/a&gt; UE  Virtu</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="VirtualMachine" scheme="https://hakuya.me/tags/VirtualMachine/"/>
    
  </entry>
  
  <entry>
    <title>UE Delegate</title>
    <link href="https://hakuya.me/learning/unreal/UE%20Delegate/"/>
    <id>https://hakuya.me/learning/unreal/UE%20Delegate/</id>
    <published>2022-11-24T08:19:00.000Z</published>
    <updated>2022-12-29T01:36:04.580Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本篇内容和源码均参考 UE5。</p></div><h1 id="delegate-委托"><a class="anchor" href="#delegate-委托">#</a> Delegate 委托</h1><p>委托是 Unreal 对于 C++ 函数的一种封装。在 Unreal 中，委托也被分成以下几种类型：</p><ul><li>Delegate：简单委托，支持绑定单个执行函数。</li><li>MulticaseDelegate：多播委托，支持绑定一个或多个执行函数。</li><li>Event：事件，带有访问权限控制的多播委托，需要设置可以触发该多播委托的友元类。</li><li>DynamicDelegate：动态委托，支持动态绑定单个执行函数。</li><li>DynamicMulticaseDelegate：动态多播委托，支持动态绑定一个或多个执行函数。</li><li>SparseDynamicDelegate：稀疏动态委托，可以理解为另一种存储形式的 DynamicMulticaseDelegate。</li></ul><h2 id="delegate-简单委托"><a class="anchor" href="#delegate-简单委托">#</a> Delegate 简单委托</h2><p>Delegate 通过宏定义进行声明： <code>DECLARE_DELEGATE_XXXParams</code> ，宏展开后内容如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FOnQuaternionCommitted<span class="token punctuation">,</span> FQuat<span class="token punctuation">,</span> ETextCommit<span class="token operator">::</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> TDelegate<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>FQuat<span class="token punctuation">,</span> ETextCommit<span class="token operator">::</span>Type<span class="token punctuation">)</span><span class="token operator">></span> FOnQuaternionCommitted<span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tdelegate"><a class="anchor" href="#tdelegate">#</a> TDelegate</h3><p>Delegate 声明实际上是对 <strong>TDelegate</strong> 模板类的声明。<strong>TDelegate</strong> 最终会继承 <strong>UserPolicy</strong> 中的 <strong>FDelegateExtras</strong>。</p><p>而 <strong>UserPolicy</strong> 是外部定义的模板类，默认为 <strong>FDefaultDelegateUserPolicy</strong>，<strong>FDelegateExtras</strong> 默认为 <strong>FDelegateBase</strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// TDelegate 本身的定义:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">DelegateSignature</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span> <span class="token operator">=</span> FDefaultDelegateUserPolicy<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TDelegate</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">InRetValType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TDelegate</span><span class="token operator">&lt;</span><span class="token function">InRetValType</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token operator">:</span> <span class="token keyword">public</span> TDelegateBase<span class="token operator">&lt;</span>UserPolicy<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// ...  </span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TDelegateBase</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> UserPolicy<span class="token operator">::</span><span class="token class-name">FDelegateExtras</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FDefaultDelegateUserPolicy</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">using</span> FDelegateInstanceExtras  <span class="token operator">=</span> IDelegateInstance<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">using</span> FDelegateExtras          <span class="token operator">=</span> FDelegateBase<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">using</span> FMulticastDelegateExtras <span class="token operator">=</span> TMulticastDelegateBase<span class="token operator">&lt;</span>FDefaultDelegateUserPolicy<span class="token operator">></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>FDelegateBase</strong> 提供了对 Delegate 的内存管理，所有 <strong>TDelegate</strong> 的创建销毁底层都是基于 <strong>FDelegateBase</strong>。</p><h3 id="delegate-instance"><a class="anchor" href="#delegate-instance">#</a> Delegate Instance</h3><p>Unreal 基于成员函数的类型及函数特性对 Delegate 又划分出了多个不同的实例：</p><ul><li><strong>TBaseRawMethodDelegateInstance</strong>：任意 C++ 类型的<strong>成员函数</strong>委托，对象通过指针进行存储，如果对象被销毁，执行不安全。</li><li><strong>TBaseSPMethodDelegateInstance</strong>：任意 C++ 类型的<strong>成员函数</strong>委托，通过一个线程安全的共享指针来存储委托所绑定的对象，执行是安全的。</li><li><strong>TBaseUFunctionDelegateInstance</strong>：<strong>UObject 对象类型</strong>的<strong> UFunction 函数</strong>委托，基于反射进行查找因此必须是 UFunction 函数，构造时可以只提供<strong>函数名</strong>，提供弱引用指针绑定 UObject 因此也是安全的。</li><li><strong>TBaseUObjectMethodDelegateInstance</strong>：<strong>UObject 对象类型</strong>的<strong>成员函数</strong>委托，构造时需要提供函数指针，对 UObject 也是弱引用，因此执行是安全的。</li><li><strong>TBaseFunctorDelegateInstance</strong>：任意类型的<strong>函数</strong>委托，存储函数指针，执行是安全的。</li><li><strong>TWeakBaseFunctorDelegateInstance</strong>：任意类型的<strong>成员函数</strong>委托，保存的是对象的弱引用，执行是安全的。</li><li><strong>TBaseStaticDelegateInstance</strong>：静态 C++ 函数指针，存储函数指针，执行是安全的。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221029100815344.png" alt="image-20221029100815344" /></p><p>所有 <strong>Delegate Instance</strong> 最终都继承自 <strong>UserPolicy</strong> 中的 <strong>FDelegateInstanceExtras</strong>，并各自实现了函数绑定规则。</p><h4 id="delegate-instance-实例化"><a class="anchor" href="#delegate-instance-实例化">#</a> Delegate Instance 实例化</h4><p>TDelegate 为所有类型的 <strong>Delegate Instance</strong> 提供了实例化的接口：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>* Static: Creates a raw C++ pointer global function delegate</pre></td></tr><tr><td data-num="3"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> VarTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>UE_NODISCARD <span class="token keyword">inline</span> <span class="token keyword">static</span> TDelegate<span class="token operator">&lt;</span><span class="token function">RetValType</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token function">CreateStatic</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">TIdentity</span><span class="token operator">&lt;</span><span class="token function">RetValType</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">::</span>Type InFunc<span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Vars<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>TDelegate<span class="token operator">&lt;</span><span class="token function">RetValType</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name">TBaseStaticDelegateInstance</span><span class="token operator">&lt;</span>FuncType<span class="token punctuation">,</span> UserPolicy<span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span>Result<span class="token punctuation">,</span> InFunc<span class="token punctuation">,</span> Vars<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">return</span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// ...</span></pre></td></tr></table></figure><p>所有类型的 <strong>Delegate Instance</strong> 都在自己的 Create 接口中通过 <strong>FDelegateBase</strong> 提供的 <strong>new</strong> 函数实现内存分配和实例化（自己创建自己了属于是😃</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>FORCEINLINE <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span>FDelegateBase<span class="token operator">&amp;</span> Base<span class="token punctuation">,</span> FFuncPtr InFunc<span class="token punctuation">,</span> VarTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Vars<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">new</span> <span class="token punctuation">(</span>Base<span class="token punctuation">)</span> <span class="token function">UnwrappedThisType</span><span class="token punctuation">(</span>InFunc<span class="token punctuation">,</span> Vars<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FDelegateBase</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">private</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    FDelegateAllocatorType<span class="token operator">::</span>ForElementType<span class="token operator">&lt;</span>FAlignedInlineDelegateType<span class="token operator">></span> DelegateAllocator<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>int32 DelegateSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">friend</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t Size<span class="token punctuation">,</span> FDelegateBase<span class="token operator">&amp;</span> Base<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Allocate</span><span class="token punctuation">(</span>int32 Size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>IDelegateInstance<span class="token operator">*</span> CurrentInstance <span class="token operator">=</span> <span class="token function">GetDelegateInstanceProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>CurrentInstance<span class="token operator">-></span><span class="token operator">~</span><span class="token function">IDelegateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>int32 NewDelegateSize <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token operator">::</span><span class="token function">DivideAndRoundUp</span><span class="token punctuation">(</span>Size<span class="token punctuation">,</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>FAlignedInlineDelegateType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>DelegateSize <span class="token operator">!=</span> NewDelegateSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>DelegateAllocator<span class="token punctuation">.</span><span class="token function">ResizeAllocation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> NewDelegateSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FAlignedInlineDelegateType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>DelegateSize <span class="token operator">=</span> NewDelegateSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">return</span> DelegateAllocator<span class="token punctuation">.</span><span class="token function">GetAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t Size<span class="token punctuation">,</span> FDelegateBase<span class="token operator">&amp;</span> Base<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">return</span> Base<span class="token punctuation">.</span><span class="token function">Allocate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int32<span class="token punctuation">)</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>new</strong> 会调用 <strong>Base.Allocate</strong> 分配给 <strong>Delegate Instance</strong> 内存空间，并在该空间内构造 <strong>Delegate Instance</strong>，而由于该空间被 FDelegateBase 中的 <strong>DelegateAllocator</strong> 所管理，因此 Create 最终返回的是 <strong>TDelegate</strong> 模板实例。</p><p>这样，就通过 <strong>TDelegate</strong> 静态函数构造出了个新的 <strong>TDelegate</strong> 实例，TDelegate 实例中还包含了一个 <strong>Delegate Instance</strong> 并绑定了一个该类型的执行函数上。</p><h2 id="multicasedelegate-多播委托"><a class="anchor" href="#multicasedelegate-多播委托">#</a> MulticaseDelegate 多播委托</h2><p>同理，MulticaseDelegate  的宏定义为： <code>DECLARE_MULTICAST_DELEGATE_XXXParams</code> ，宏展开后内容如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_MULTICAST_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FNewItemEvent<span class="token punctuation">,</span> <span class="token keyword">const</span> FVisualLoggerDBRow<span class="token operator">&amp;</span><span class="token punctuation">,</span> int32<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> TMulticastDelegate<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVisualLoggerDBRow<span class="token operator">&amp;</span><span class="token punctuation">,</span> int32<span class="token punctuation">)</span><span class="token operator">></span> FNewItemEvent<span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tmulticastdelegate"><a class="anchor" href="#tmulticastdelegate">#</a> TMulticastDelegate</h3><p>MulticaseDelegate 声明实际上是对 <strong>TMulticastDelegate</strong> 模板类的声明。而 <strong>TMulticastDelegate</strong> 最终会继承 <strong>UserPolicy</strong> 中的 <strong>FMulticastDelegateExtras</strong>。</p><p>默认为 <strong>TMulticastDelegateBase<FDefaultDelegateUserPolicy></strong>：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastDelegate</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token operator">:</span> <span class="token keyword">public</span> UserPolicy<span class="token operator">::</span>FMulticastDelegateExtras</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> FMulticastDelegateExtras <span class="token operator">=</span> TMulticastDelegateBase<span class="token operator">&lt;</span>FDefaultDelegateUserPolicy<span class="token operator">></span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>TMulticastDelegateBase</strong> 本质上是 <strong>TDelegateBase</strong> 的数组，多播（<strong>Broadcast</strong>）其实是对所有已注册的 TDelegateBase 的<strong>倒序</strong>执行（<strong>ExecuteIfSafe</strong>）：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastDelegateBase</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">private</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/** Holds the collection of delegate instances to invoke. */</span></pre></td></tr><tr><td data-num="5"></td><td><pre>InvocationListType InvocationList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/** Holds a lock counter for the invocation list. */</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">mutable</span> int32 InvocationListLockCount<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">UserPolicy</span><span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastDelegate</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserPolicy<span class="token operator">></span> <span class="token operator">:</span> <span class="token keyword">public</span> UserPolicy<span class="token operator">::</span>FMulticastDelegateExtras</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>ParamTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Params<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">bool</span> NeedsCompaction <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">LockInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> InvocationListType<span class="token operator">&amp;</span> LocalInvocationList <span class="token operator">=</span> <span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">GetInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>             <span class="token comment">// call bound functions in reverse order, so we ignore any instances that may be added by callees</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 InvocationListIndex <span class="token operator">=</span> LocalInvocationList<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> InvocationListIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>InvocationListIndex<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">const</span> FDelegate<span class="token operator">&amp;</span> DelegateBase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FDelegate<span class="token operator">&amp;</span><span class="token punctuation">)</span>LocalInvocationList<span class="token punctuation">[</span>InvocationListIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>IDelegateInstance<span class="token operator">*</span> DelegateInstanceInterface <span class="token operator">=</span> <span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">GetDelegateInstanceProtectedHelper</span><span class="token punctuation">(</span>DelegateBase<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>DelegateInstanceInterface <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DelegateInstanceInterfaceType<span class="token operator">*</span><span class="token punctuation">)</span>DelegateInstanceInterface<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">ExecuteIfSafe</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>NeedsCompaction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token class-name">Super</span><span class="token operator">::</span><span class="token function">UnlockInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>NeedsCompaction<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>TMulticastDelegate<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">CompactInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="event-事件"><a class="anchor" href="#event-事件">#</a> Event 事件</h2><p>Event 本质上就是一个 <strong>MulticaseDelegate</strong> 多播委托。唯一的区别在于 Event 需要指定调用的类型。通过友元类控制，并非所有对象都可以触发 Event。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_EVENT_TwoParams</span><span class="token punctuation">(</span>UEngine<span class="token punctuation">,</span> FLevelActorOuterChangedEvent<span class="token punctuation">,</span> AActor<span class="token operator">*</span><span class="token punctuation">,</span> UObject<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FLevelActorOuterChangedEvent</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TMulticastDelegate</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token class-name">AActor</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">UObject</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">UEngine</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="dynamicdelegate-动态委托"><a class="anchor" href="#dynamicdelegate-动态委托">#</a> DynamicDelegate 动态委托</h2><p>相比于简单委托，动态委托采用了另一套实现体系 ——<strong>TBaseDynamicDelegate</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DYNAMIC_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FOnItemSelected<span class="token punctuation">,</span> UUserWidget<span class="token operator">*</span><span class="token punctuation">,</span> Widget<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> Selected<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FOnItemSelected</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">UUserWidget</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token keyword">const</span> TScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> UUserWidget <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以看到 <strong>Execute</strong> 和 <strong>ExecuteIfBound</strong> 都调用了 <strong>FOnItemSelected_DelegateWrapper</strong>，但并没有 FOnItemSelected_DelegateWrapper 的声明和定义</p><p>答案其实在 <strong>FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE</strong> 中， <code>FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE</code>  本身是一个宏定义，它的定义规则通过 Unreal 的 UHT 生成在 XXX.generated.h 文件内：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">FID_Engine_Plugins_Experimental_CommonUI_Source_CommonUI_Public_CommonUITypes_h_176_DELEGATE </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">_Script_CommonUI_eventOnItemSelected_Parms</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token expression">UUserWidget<span class="token operator">*</span> Widget<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token expression"><span class="token keyword">bool</span> Selected<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FScriptDelegate<span class="token operator">&amp;</span> OnItemSelected<span class="token punctuation">,</span> UUserWidget<span class="token operator">*</span> Widget<span class="token punctuation">,</span> <span class="token keyword">bool</span> Selected<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token expression">_Script_CommonUI_eventOnItemSelected_Parms Parms<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token expression">Parms<span class="token punctuation">.</span>Widget<span class="token operator">=</span>Widget<span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token expression">Parms<span class="token punctuation">.</span>Selected<span class="token operator">=</span>Selected <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token expression">OnItemSelected<span class="token punctuation">.</span>ProcessDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token expression"><span class="token punctuation">&#125;</span></span></span></pre></td></tr></table></figure><p>因此最终展开结果应该是这样：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">_Script_CommonUI_eventOnItemSelected_Parms</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    UUserWidget <span class="token operator">*</span>Widget<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">bool</span> Selected<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FScriptDelegate <span class="token operator">&amp;</span>OnItemSelected<span class="token punctuation">,</span> UUserWidget <span class="token operator">*</span>Widget<span class="token punctuation">,</span> <span class="token keyword">bool</span> Selected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    _Script_CommonUI_eventOnItemSelected_Parms Parms<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    Parms<span class="token punctuation">.</span>Widget <span class="token operator">=</span> Widget<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    Parms<span class="token punctuation">.</span>Selected <span class="token operator">=</span> Selected <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    OnItemSelected<span class="token punctuation">.</span>ProcessDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FOnItemSelected</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">UUserWidget</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FOnItemSelected</span><span class="token punctuation">(</span><span class="token keyword">const</span> TScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> UUserWidget <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>InScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">checkSlow</span><span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span>UUserWidget <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> <span class="token keyword">bool</span> InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token function">FOnItemSelected_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tscriptdelegate"><a class="anchor" href="#tscriptdelegate">#</a> TScriptDelegate</h3><p><strong>TScriptDelegate</strong> 是所有 DynamicDelegate 的基类，提供绑定 / 解绑 / 执行等基础接口。相比于简单委托在绑定完成后，只能通过 <strong>Delegate Instance</strong> 销毁重建的形式来切换绑定对象；<strong>TScriptDelegate</strong> 采用了更优雅的<strong>动态</strong>绑定机制，即通过<strong>对象实例指针</strong> &amp;&amp; <strong>函数名</strong> 利用反射机制的绑定流程。然而反射机制的实现，依赖于 <strong>UObject</strong> 对象关联的 UClass 中包含的元数据，因此动态委托的绑定函数也必须是 <strong>UFunction</strong> 类型。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TWeakPtr</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">RetValType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ParamTypes<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TBaseDynamicDelegate</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TScriptDelegate</span><span class="token operator">&lt;</span><span class="token class-name">TWeakPtr</span><span class="token operator">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TWeakPtr</span> <span class="token operator">=</span> FWeakObjectPtr<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TScriptDelegate</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre> * Binds a UFunction to this delegate.</pre></td></tr><tr><td data-num="12"></td><td><pre> *</pre></td></tr><tr><td data-num="13"></td><td><pre> * @param InObject The object to call the function on.</pre></td></tr><tr><td data-num="14"></td><td><pre> * @param InFunctionName The name of the function to call.</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">void</span> <span class="token function">BindUFunction</span><span class="token punctuation">(</span> UObject<span class="token operator">*</span> InObject<span class="token punctuation">,</span> <span class="token keyword">const</span> FName<span class="token operator">&amp;</span> InFunctionName <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>Object <span class="token operator">=</span> InObject<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>FunctionName <span class="token operator">=</span> InFunctionName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    </pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="23"></td><td><pre> * Unbinds this delegate</pre></td></tr><tr><td data-num="24"></td><td><pre> */</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">void</span> <span class="token function">Unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>Object <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>FunctionName <span class="token operator">=</span> NAME_None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    </pre></td></tr><tr><td data-num="31"></td><td><pre>     <span class="token comment">/**</pre></td></tr><tr><td data-num="32"></td><td><pre> * Executes a delegate by calling the named function on the object bound to the delegate.  You should</pre></td></tr><tr><td data-num="33"></td><td><pre> * always first verify that the delegate is safe to execute by calling IsBound() before calling this function.</pre></td></tr><tr><td data-num="34"></td><td><pre> * In general, you should never call this function directly.  Instead, call Execute() on a derived class.</pre></td></tr><tr><td data-num="35"></td><td><pre> *</pre></td></tr><tr><td data-num="36"></td><td><pre> * @paramParametersParameter structure</pre></td></tr><tr><td data-num="37"></td><td><pre> */</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">//CORE_API void ProcessDelegate(void* Parameters) const;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">UObjectTemplate</span><span class="token operator">></span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">void</span> <span class="token function">ProcessDelegate</span><span class="token punctuation">(</span> <span class="token keyword">void</span><span class="token operator">*</span> Parameters <span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// sure IsBound() returns true before calling ProcessDelegate()!</span></pre></td></tr><tr><td data-num="43"></td><td><pre>UObjectTemplate<span class="token operator">*</span> ObjectPtr <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span> UObjectTemplate<span class="token operator">*</span> <span class="token operator">></span><span class="token punctuation">(</span> Object<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Down-cast</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">checkSlow</span><span class="token punctuation">(</span> <span class="token function">IsValid</span><span class="token punctuation">(</span>ObjectPtr<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// Object *must* implement the specified function</span></pre></td></tr><tr><td data-num="47"></td><td><pre>UFunction<span class="token operator">*</span> Function <span class="token operator">=</span> ObjectPtr<span class="token operator">-></span><span class="token function">FindFunctionChecked</span><span class="token punctuation">(</span> FunctionName <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// Execute the delegate!</span></pre></td></tr><tr><td data-num="50"></td><td><pre>ObjectPtr<span class="token operator">-></span><span class="token function">ProcessEvent</span><span class="token punctuation">(</span>Function<span class="token punctuation">,</span> Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>UFunction<span class="token operator">*</span> <span class="token class-name">UObject</span><span class="token operator">::</span><span class="token function">FindFunctionChecked</span><span class="token punctuation">(</span> FName InName <span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>UFunction<span class="token operator">*</span> Result <span class="token operator">=</span> <span class="token function">FindFunction</span><span class="token punctuation">(</span>InName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Result <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogScriptCore<span class="token punctuation">,</span> Fatal<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Failed to find function %s in %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>InName<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">GetFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">return</span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>UFunction<span class="token operator">*</span> <span class="token class-name">UObject</span><span class="token operator">::</span><span class="token function">FindFunction</span><span class="token punctuation">(</span> FName InName <span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">return</span> <span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">FindFunctionByName</span><span class="token punctuation">(</span>InName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="dynamicmulticasedelegate-动态多播委托"><a class="anchor" href="#dynamicmulticasedelegate-动态多播委托">#</a> DynamicMulticaseDelegate 动态多播委托</h2><p>该委托可以动态绑定一组成员函数，对于支持编辑器形式 (需要动态增删) 的事件调用非常的有效（尤其是蓝图</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FOnBeforePopup<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> URL<span class="token punctuation">,</span> FString<span class="token punctuation">,</span> Frame<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">WebBrowser_eventOnBeforePopup_Parms</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    FString URL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    FString Frame<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FOnBeforePopup_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FMulticastScriptDelegate <span class="token operator">&amp;</span>OnBeforePopup<span class="token punctuation">,</span> <span class="token keyword">const</span> FString <span class="token operator">&amp;</span>URL<span class="token punctuation">,</span> <span class="token keyword">const</span> FString <span class="token operator">&amp;</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    WebBrowser_eventOnBeforePopup_Parms Parms<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    Parms<span class="token punctuation">.</span>URL <span class="token operator">=</span> URL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    Parms<span class="token punctuation">.</span>Frame <span class="token operator">=</span> Frame<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    OnBeforePopup<span class="token punctuation">.</span>ProcessMulticastDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FOnBeforePopup</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicMulticastDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">FString</span><span class="token punctuation">,</span> <span class="token class-name">FString</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">FOnBeforePopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FOnBeforePopup</span><span class="token punctuation">(</span><span class="token keyword">const</span> TMulticastScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicMulticastDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> FString<span class="token punctuation">,</span> FString<span class="token operator">></span><span class="token punctuation">(</span>InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>FString InParam1<span class="token punctuation">,</span> FString InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token function">FOnBeforePopup_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="tmulticastscriptdelegate"><a class="anchor" href="#tmulticastscriptdelegate">#</a> TMulticastScriptDelegate</h3><p>TMulticastScriptDelegate 是所有 DynamicMulticaseDelegate 的基类，负责管理和维护 <strong>TScriptDelegate</strong> 的数组</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221027104606040.png" alt="image-20221027104606040" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TMulticastScriptDelegate</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre> * Executes a multi-cast delegate by calling all functions on objects bound to the delegate.  Always</pre></td></tr><tr><td data-num="5"></td><td><pre> * safe to call, even if when no objects are bound, or if objects have expired.  In general, you should</pre></td></tr><tr><td data-num="6"></td><td><pre> * never call this function directly.  Instead, call Broadcast() on a derived class.</pre></td></tr><tr><td data-num="7"></td><td><pre> *</pre></td></tr><tr><td data-num="8"></td><td><pre> * @paramParamsParameter structure</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">UObjectTemplate</span><span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">ProcessMulticastDelegate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> Parameters<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> InvocationList<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// Create a copy of the invocation list, just in case the list is modified by one of the callbacks during the broadcast</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">typedef</span> TArray<span class="token operator">&lt;</span> TScriptDelegate<span class="token operator">&lt;</span>TWeakPtr<span class="token operator">></span><span class="token punctuation">,</span> TInlineAllocator<span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token operator">></span> FInlineInvocationList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>FInlineInvocationList InvocationListCopy <span class="token operator">=</span> <span class="token function">FInlineInvocationList</span><span class="token punctuation">(</span>InvocationList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// Invoke each bound function</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">typename</span> <span class="token class-name">FInlineInvocationList</span><span class="token operator">::</span>TConstIterator <span class="token function">FunctionIt</span><span class="token punctuation">(</span> InvocationListCopy <span class="token punctuation">)</span><span class="token punctuation">;</span> FunctionIt<span class="token punctuation">;</span> <span class="token operator">++</span>FunctionIt <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span> FunctionIt<span class="token operator">-></span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// Invoke this delegate!</span></pre></td></tr><tr><td data-num="25"></td><td><pre>FunctionIt<span class="token operator">-></span><span class="token keyword">template</span> ProcessDelegate<span class="token operator">&lt;</span>UObjectTemplate<span class="token operator">></span><span class="token punctuation">(</span>Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> FunctionIt<span class="token operator">-></span><span class="token function">IsCompactable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// Function couldn't be executed, so remove it.  Note that because the original list could have been modified by one of the callbacks, we have to search for the function to remove here.</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">RemoveInternal</span><span class="token punctuation">(</span> <span class="token operator">*</span>FunctionIt <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    </pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">typedef</span> TArray<span class="token operator">&lt;</span> TScriptDelegate<span class="token operator">&lt;</span>TWeakPtr<span class="token operator">></span> <span class="token operator">></span> FInvocationList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">/** Ordered list functions to invoke when the Broadcast function is called */</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">mutable</span> FInvocationList InvocationList<span class="token punctuation">;</span><span class="token comment">// Mutable so that we can housekeep list even with 'const' broadcasts</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="sparsedynamicdelegate-稀疏动态委托"><a class="anchor" href="#sparsedynamicdelegate-稀疏动态委托">#</a> SparseDynamicDelegate 稀疏动态委托</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// example:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams</span><span class="token punctuation">(</span>FActorOnClickedSignature<span class="token punctuation">,</span> AActor<span class="token punctuation">,</span> OnClicked<span class="token punctuation">,</span> AActor<span class="token operator">*</span><span class="token punctuation">,</span> TouchedActor<span class="token punctuation">,</span> FKey<span class="token punctuation">,</span> ButtonPressed<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 展开结果:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">_Script_Engine_eventActorOnClickedSignature_Parms</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    AActor <span class="token operator">*</span>TouchedActor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    FKey ButtonPressed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">FActorOnClickedSignature_DelegateWrapper</span><span class="token punctuation">(</span><span class="token keyword">const</span> FMulticastScriptDelegate <span class="token operator">&amp;</span>ActorOnClickedSignature<span class="token punctuation">,</span> AActor <span class="token operator">*</span>TouchedActor<span class="token punctuation">,</span> FKey ButtonPressed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    _Script_Engine_eventActorOnClickedSignature_Parms Parms<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    Parms<span class="token punctuation">.</span>TouchedActor <span class="token operator">=</span> TouchedActor<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    Parms<span class="token punctuation">.</span>ButtonPressed <span class="token operator">=</span> ButtonPressed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    ActorOnClickedSignature<span class="token punctuation">.</span>ProcessMulticastDelegate<span class="token operator">&lt;</span>UObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Parms<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FActorOnClickedSignature_MCSignature</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TBaseDynamicMulticastDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FWeakObjectPtr</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token class-name">AActor</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">FKey</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">FActorOnClickedSignature_MCSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">explicit</span> <span class="token function">FActorOnClickedSignature_MCSignature</span><span class="token punctuation">(</span><span class="token keyword">const</span> TMulticastScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span>InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token operator">:</span> TBaseDynamicMulticastDelegate<span class="token operator">&lt;</span>FWeakObjectPtr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> AActor <span class="token operator">*</span><span class="token punctuation">,</span> FKey<span class="token operator">></span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            InMulticastScriptDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">Broadcast</span><span class="token punctuation">(</span>AActor <span class="token operator">*</span>InParam1<span class="token punctuation">,</span> FKey InParam2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token function">FActorOnClickedSignature_DelegateWrapper</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> InParam1<span class="token punctuation">,</span> InParam2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FActorOnClickedSignatureInfoGetter</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">GetDelegateName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"OnClicked"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">static</span> size_t <span class="token function">GetDelegateOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">offsetof</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> OnClicked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FActorOnClickedSignature</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TSparseDynamicDelegate</span><span class="token operator">&lt;</span><span class="token class-name">FActorOnClickedSignature_MCSignature</span><span class="token punctuation">,</span> <span class="token class-name">AActor</span><span class="token punctuation">,</span> <span class="token class-name">FActorOnClickedSignatureInfoGetter</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>SparseDynamicDelegate</strong> 宏展开相对复杂一些，主要内容可以分为两部分：</p><ul><li>继承自 <strong>TBaseDynamicMulticastDelegate</strong> 的 <strong>FActorOnClickedSignature_MCSignature</strong> 类，实现了基本的动态多播委托逻辑，但命名上做了改动，没有正常暴露给外部使用。</li><li>继承自 <strong>TSparseDynamicDelegate&lt;FActorOnClickedSignature_MCSignature...&gt;</strong> 的 <strong>FActorOnClickedSignature</strong> 类，重新实现了 TBaseDynamicMulticastDelegate 中操作委托数组的各项接口，重定向修改到了 <strong>FSparseDelegateStorage</strong>。开发者实际上是通过 FActorOnClickedSignature 间接操作 FActorOnClickedSignature_MCSignature。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221027113233720.png" alt="image-20221027113233720" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FSparseDelegate</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre>* Adds a function delegate to this multi-cast delegate's invocation list if a delegate with the same signature</pre></td></tr><tr><td data-num="5"></td><td><pre>* doesn't already exist in the invocation list</pre></td></tr><tr><td data-num="6"></td><td><pre>*</pre></td></tr><tr><td data-num="7"></td><td><pre>* @paramDelegateOwnerUObject that owns the resolved sparse delegate</pre></td></tr><tr><td data-num="8"></td><td><pre>* @paramDelegateNameName of the resolved sparse delegate</pre></td></tr><tr><td data-num="9"></td><td><pre>* @paramInDelegateDelegate to bind to the sparse delegate</pre></td></tr><tr><td data-num="10"></td><td><pre>* </pre></td></tr><tr><td data-num="11"></td><td><pre>* NOTE:  Only call this function from blueprint sparse delegate infrastructure on a resolved generic FScriptDelegate pointer.</pre></td></tr><tr><td data-num="12"></td><td><pre>*        Generally from C++ you should call AddUnique() directly.</pre></td></tr><tr><td data-num="13"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">__Internal_AddUnique</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> DelegateOwner<span class="token punctuation">,</span> FName DelegateName<span class="token punctuation">,</span> FScriptDelegate InDelegate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>bIsBound <span class="token operator">|=</span> <span class="token class-name">FSparseDelegateStorage</span><span class="token operator">::</span><span class="token function">AddUnique</span><span class="token punctuation">(</span>DelegateOwner<span class="token punctuation">,</span> DelegateName<span class="token punctuation">,</span> <span class="token function">MoveTemp</span><span class="token punctuation">(</span>InDelegate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="fsparsedelegatestorage"><a class="anchor" href="#fsparsedelegatestorage">#</a> FSparseDelegateStorage</h3><p><strong>FSparseDelegateStorage</strong> 可以理解成一个维护全局动态多播委托的单例，它的所有成员变量 / 函数都是 Static。通过一个全局 map 来记录 UObject 中所有 <strong>FMulticastScriptDelegate</strong> 的弱引用，而 <strong>FMulticastScriptDelegate</strong> 中又存储了多个 <strong>FScriptDelegate</strong>。</p><p>顺带一提 <strong>FScriptDelegate</strong> 和 <strong>FMulticastScriptDelegate</strong> 分别是 <strong>TScriptDelegate</strong> 和 <strong>TMulticastScriptDelegate</strong> 的特化版本... 这里经常容易搞混。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Typedef script delegates for convenience.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">typedef</span> TScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> FScriptDelegate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">typedef</span> TMulticastScriptDelegate<span class="token operator">&lt;</span><span class="token operator">></span> FMulticastScriptDelegate<span class="token punctuation">;</span></pre></td></tr></table></figure><p>通过 <strong>TSparseDynamicDelegate</strong> 向 <strong>FMulticastScriptDelegate</strong> 添加 <strong>FScriptDelegate</strong> 时，会先把 <strong>FMulticastScriptDelegate</strong> 注册到 <strong>FSparseDelegateStorage</strong> 全局 map 中，再把 <strong>FScriptDelegate</strong> 添加到 <strong>FMulticastScriptDelegate</strong> 容器内。</p><blockquote><p>注意：<strong>DelegateOwner</strong> 只是持有<strong>操作</strong> FMulticastScriptDelegate 的 <strong>TSparseDynamicDelegate</strong> 对象，<strong>FSparseDelegateStorage</strong> 才负责存储 FMulticastScriptDelegate 和所有注册的 FScriptDelegate；<strong>DelegateOwner</strong> 通过 <strong>TSparseDynamicDelegate</strong> 对 <strong>FSparseDelegateStorage</strong> 中的数据进行修改。</p></blockquote><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 添加</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">FSparseDelegateStorage</span><span class="token operator">::</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> DelegateOwner<span class="token punctuation">,</span> <span class="token keyword">const</span> FName DelegateName<span class="token punctuation">,</span> FScriptDelegate Delegate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">bool</span> bDelegateWasBound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Delegate<span class="token punctuation">.</span><span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>FScopeLock <span class="token function">SparseDelegateMapLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SparseDelegateMapCritical<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>SparseDelegates<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>SparseDelegateObjectListener<span class="token punctuation">.</span><span class="token function">EnableListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>FSparseDelegateMap<span class="token operator">&amp;</span> DelegateMap <span class="token operator">=</span> SparseDelegates<span class="token punctuation">.</span><span class="token function">FindOrAdd</span><span class="token punctuation">(</span>DelegateOwner<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span><span class="token operator">&amp;</span> MulticastDelegate <span class="token operator">=</span> DelegateMap<span class="token punctuation">.</span><span class="token function">FindOrAdd</span><span class="token punctuation">(</span>DelegateName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>MulticastDelegate<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>MulticastDelegate <span class="token operator">=</span> MakeShared<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 实际操作的是 FSparseDelegateStorage 中创建 or 已存在的 FMulticastScriptDelegate</span></pre></td></tr><tr><td data-num="21"></td><td><pre>MulticastDelegate<span class="token operator">-></span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">MoveTemp</span><span class="token punctuation">(</span>Delegate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>bDelegateWasBound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">return</span> bDelegateWasBound<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 查询</span></pre></td></tr><tr><td data-num="28"></td><td><pre>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span> <span class="token class-name">FSparseDelegateStorage</span><span class="token operator">::</span><span class="token function">GetSharedMulticastDelegate</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> DelegateOwner<span class="token punctuation">,</span> <span class="token keyword">const</span> FName DelegateName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>FScopeLock <span class="token function">SparseDelegateMapLock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SparseDelegateMapCritical<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>FSparseDelegateMap<span class="token operator">*</span> DelegateMap <span class="token operator">=</span> SparseDelegates<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>DelegateOwner<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>TSharedPtr<span class="token operator">&lt;</span>FMulticastScriptDelegate<span class="token operator">></span><span class="token operator">*</span> MulticastDelegatePtr <span class="token operator">=</span> DelegateMap<span class="token operator">-></span><span class="token function">Find</span><span class="token punctuation">(</span>DelegateName<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>Result <span class="token operator">=</span> <span class="token operator">*</span>MulticastDelegatePtr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">return</span> Result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>Unreal 提供了多种委托，其中「Delegate 」用法灵活，支持各种类型的函数绑定，执行效率也较<strong>高</strong>，对于有返回值的函数调用时<strong>不太安全</strong>；「MulticaseDelegate 」在原有基础上扩充了一对多的绑定关系；「Event 」又在 MulticaseDelegate 的基础上通过  <code>friend class</code>  约束了调用者；「DynamicDelegate 」相比于 Delegate，舍弃了更多函数类型的支持，降低了执行效率，但能够动态绑定且调用更加的<strong>安全</strong>；「DynamicMulticaseDelegate 」同样在原有基础上扩充了一对多的绑定关系；「SparseDynamicDelegate」又在 DynamicMulticaseDelegate 基础上重定向了委托的存储位置，通过 FSparseDelegateStorage 全局 map 集中管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本篇内容和源码均参考 UE5。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;delegate-委托&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delegate-委托&quot;&gt;#&lt;/a&gt; Delegate 委托&lt;/h1&gt;
&lt;p&gt;委</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="Delegate" scheme="https://hakuya.me/tags/Delegate/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Task Management篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Task%20Management%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Task%20Management%E7%AF%87/</id>
    <published>2022-10-22T01:23:00.000Z</published>
    <updated>2022-12-29T01:36:04.546Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxtask-management篇"><a class="anchor" href="#physxtask-management篇">#</a> PhysX——Task Management 篇</h1><p>任务管理器是 PhysX 管理 CPU 和 GPU 计算资源的调度管理器。在保证每个 Task 按部就班执行的情况下尽可能的提高运行效率，在 Cloth 和 Simulate 等场景有广泛的应用。因此本篇也作为 Simulate 的前篇来着重介绍一下「任务管理器」的实现逻辑。由于调度逻辑被拆分成了 GPU 和 CPU 两部分，本篇主要还是介绍 CPU 的调度规则。</p><p>为了能够更好理解，文章内会使用部分 Simulate 代码作为示例，来介绍 Task Management 如何运转，一些变量和类无需太过在意，先来看看 PxTaskMgr 定义：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021170511131.png" alt="类图" /></p><p>任务管理的基本单位就是 Task，任务管理的本质就是如何指定不同的 CPU / GPU 去执行不同 Task，根据各 Task 的依赖关系来控制执行顺序，PxTaskMgr 由于历史原因，保留了两种 Task 的实现机制：<strong>PxTask</strong>（绿色）、<strong>PxLightCpuTask</strong>（蓝色）。</p><h2 id="task"><a class="anchor" href="#task">#</a> Task</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021170949427.png" alt="image-20221021170949427" class="gallery" data-height="300" /></p><p><strong>PxBaseTask</strong> 是所有 <strong>Task</strong> 的基类，在 PhysX 3.0 之前 APEX 基本上通过 PxTask 的<strong>派生类</strong>作为任务单元定制化逻辑，在 PhysX 3.0 以后，基本上所有 <strong>Task</strong> 都用 <strong>PxLightCpuTask</strong> 实现。两者都是通过「引用计数」来控制调用时机，当引用计数为 0 的情况下，Task 就会被 submit 给 CPU / GPU 执行。</p><h3 id="pxtask"><a class="anchor" href="#pxtask">#</a> PxTask</h3><p>PxTask 是早期的实现，所有 <strong>PxTask</strong> 会存储在  <code>shdfnd::Array&lt;PxTaskTableRow&gt;</code> (PxTaskMgr::mTaskTable) 中，PxTaskTableRow 会记录该 PxTask 的<strong>前置 / 后置</strong>依赖链表的首地址，以及该任务当前的引用计数和执行状态，而整个依赖关系会被存储在  <code>shdfnd::Array&lt;PxTaskDepTableRow&gt;</code> (PxTaskMgr::mDepTable) 中。</p><ul><li>PxTask 支持两种创建方式：匿名 / 命名，两者本质区在于命名任务可以通过名字进行查找。</li><li>当 PxTask 被创建时，会获得 1 个引用计数，通过调用  <code>finishBefore</code>  和  <code>startAfter</code>  添加前置 / 后置依赖的情况下，也可以增加<strong>依赖方</strong>的引用计数。</li><li>在调用  <code>startSimulation</code>  会对所有 PxTask 的引用计数减 1，如果引用计数为 0 且满足依赖的情况下 PxTask 将会被  <code>dispatchTask</code> 。</li><li>当任务执行完毕以后 ( <code>taskCompleted</code> )，会通过  <code>resolveRow</code>  清理 PxTaskTableRow 中的记录，并更新其他任务依赖信息， <code>dispatchTask</code>  满足条件的任务。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021192950414.png" alt="image-20221021192950414" class="gallery" data-height="300" /></p><p>由于是多线程，每个 PxTask 的读写操作都需要加锁，这个锁是 PxTaskMgr 级别的，因此所有访问 PxTask 的操作都将产生竞争，并依赖 PxTaskMgr 提供的锁进行各种原子操作，对于多线程同时操作 PxTask 的来说，这点非常有必要，但会带来更多的性能开销。</p><h3 id="pxlightcputask"><a class="anchor" href="#pxlightcputask">#</a> PxLightCpuTask</h3><p>PxLightCpuTask 是个更轻量级的任务，整体实现也相对比较简单。舍弃了匿名 / 命名规则，数据也不集中存储在 PxTaskMgr，而是在 PxLightCpuTask 中。</p><p>PxLightCpuTask 没有提供多依赖的特性。换句话说，每个 PxLightCpuTask 只能<strong>依赖 / 被依赖</strong>至多一个任务 (多分支变为单分支)，这个特性使得 PxLightCpuTask 所有读写操作不需要加锁 (只可能被主线程和执行线程操作，且两者是互斥的)，性能 UpMax。为此，还必须约束 PxLightCpuTask 运行过程中不能操作其他的 PxLightCpuTask。</p><p>PxLightCpuTask 由于执行不依赖 PxTaskMgr，因此调用会比较简单：</p><ul><li>通过  <code>setContinuation</code>  设置执行的前置依赖和 TaskMgr，当然也可以不设置。</li><li>通过  <code>removeReference</code>  主动减少引用计数触发任务的 submit。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221021195806514.png" alt="image-20221021195806514" class="gallery" data-height="300" /></p><blockquote><p>题外话：为了支持 PxTask 的<strong>多依赖</strong>等特性还额外定义了 <strong>FanoutTask</strong>，并且调整锁的级别从 PxTaskMgr 变为了 FanoutTask，这里就不再展开。</p></blockquote><h2 id="cpudispatcher"><a class="anchor" href="#cpudispatcher">#</a> CpuDispatcher</h2><p>CpuDispatcher 负责 submit 后最终的派发工作，如果在没有设置多线程情况下，CpuDispatcher 的派发的 Task 将在主线程执行。</p><p>下面来聊聊在多线程情况下的执行流程，先看看 CpuDispatcher 的初始化：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">DefaultCpuDispatcher</span><span class="token operator">::</span><span class="token function">DefaultCpuDispatcher</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> numThreads<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> affinityMasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">:</span> <span class="token function">mQueueEntryPool</span><span class="token punctuation">(</span>TASK_QUEUE_ENTRY_POOL_SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mNumThreads</span><span class="token punctuation">(</span>numThreads<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mShuttingDown</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">uint32_t</span> defaultAffinityMask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 创建 work 线程</span></pre></td></tr><tr><td data-num="7"></td><td><pre>mWorkerThreads <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>CpuWorkerThread<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">PX_ALLOC</span><span class="token punctuation">(</span>numThreads <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CpuWorkerThread<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PX_DEBUG_EXP</span><span class="token punctuation">(</span><span class="token string">"CpuWorkerThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mWorkerThreads<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">PX_PLACEMENT_NEW</span><span class="token punctuation">(</span>mWorkerThreads <span class="token operator">+</span> i<span class="token punctuation">,</span> CpuWorkerThread<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 thread 对象</span></pre></td></tr><tr><td data-num="13"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定 thread 和 dispacther </span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>shdfnd<span class="token operator">::</span><span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">getDefaultStackSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程</span></pre></td></tr><tr><td data-num="19"></td><td><pre>             <span class="token comment">// 设置线程掩码，对于掩码的介绍：</span></pre></td></tr><tr><td data-num="20"></td><td><pre>             <span class="token comment">// On Windows, Linux, PS4, XboxOne and Switch platforms, each set mask bit represents</span></pre></td></tr><tr><td data-num="21"></td><td><pre>             <span class="token comment">// the index of a logical processor that the OS may schedule thread execution on</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>affinityMasks<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAffinityMask</span><span class="token punctuation">(</span>affinityMasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAffinityMask</span><span class="token punctuation">(</span>defaultAffinityMask<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">char</span> threadName<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>shdfnd<span class="token operator">::</span><span class="token function">snprintf</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">"PxWorker%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>mNumThreads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="cpuworkerthread"><a class="anchor" href="#cpuworkerthread">#</a> CpuWorkerThread</h3><p>CpuWorkerThread 继承自 Thread，但 Thread 源码看不到，官方提供了接口说明 ——ThreadImpl，感兴趣的可以了解一下。</p><p>CpuWorkerThread 有两个关键接口：<strong>tryAcceptJobToLocalQueue</strong>、<strong>execute</strong></p><h4 id="tryacceptjobtolocalqueue"><a class="anchor" href="#tryacceptjobtolocalqueue">#</a> tryAcceptJobToLocalQueue</h4><p>该接口在 Dispatcher 的 submitTask 中被调用。会把已经注册到<strong>该线程</strong>的 Task 提交到<strong>本地</strong>的工作队列 (<strong>LocalJobList</strong>)</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">DefaultCpuDispatcher</span><span class="token operator">::</span><span class="token function">submitTask</span><span class="token punctuation">(</span>PxBaseTask<span class="token operator">&amp;</span> task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>shdfnd<span class="token operator">::</span>Thread<span class="token operator">::</span>Id currentThread <span class="token operator">=</span> shdfnd<span class="token operator">::</span><span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// TODO: Could use TLS to make this more efficient</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mNumThreads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mWorkerThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tryAcceptJobToLocalQueue</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> currentThread<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">return</span> mWorkReady<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 主线程中</span></pre></td></tr><tr><td data-num="13"></td><td><pre>SharedQueueEntry<span class="token operator">*</span> entry <span class="token operator">=</span> mQueueEntryPool<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>mJobList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>mWorkReady<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// CpuWorkerThread 中</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">CpuWorkerThread</span><span class="token operator">::</span><span class="token function">tryAcceptJobToLocalQueue</span><span class="token punctuation">(</span>PxBaseTask<span class="token operator">&amp;</span> task<span class="token punctuation">,</span> shdfnd<span class="token operator">::</span>Thread<span class="token operator">::</span>Id taskSubmitionThread<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">//submit task 必须在当前线程进行操作</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>taskSubmitionThread <span class="token operator">==</span> mThreadId<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>SharedQueueEntry<span class="token operator">*</span> entry <span class="token operator">=</span> mQueueEntryPool<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>mLocalJobList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里会有两种情况：</p><ul><li>当前线程是主线程情况下，没有匹配的 CpuWorkerThread，因此会直接插入到 DefaultCpuDispatcher，因为 DefaultCpuDispatcher 只会在主线程创建。</li><li>当前线程是工作线程情况下：找到对应的工作线程 ID，并添加到工作线程的本地 JobList。</li></ul><h4 id="execute"><a class="anchor" href="#execute">#</a> execute</h4><p>执行操作分为以下几个步骤：</p><ul><li>【step.1】当前工作线程如果收到退出信号则直接退出。</li><li>【step.2】线程唤醒时，先重置唤醒标记。(避免中途异常退出导致该线程一直处于唤醒</li><li>【step.3】从本地工作队列获取一个 Task，如果为空继续获取，知道工作队列为空或者取到一个可执行 Task。</li><li>【step.4】执行 Task，并调用 release，触发后续任务的 submit，可能在当前工作线程继续执行或把操作权限移交主线程。</li><li>【step.5】如果没有可执行的 Task，将挂起当前工作线程。</li></ul><p>相关线程消息及接口说明见 <strong>SyncImpl</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">getThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-></span>thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PxThreadStart<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 线程唤醒后执行 execute</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">PxThreadStart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>_ThreadImpl<span class="token operator">*</span> impl <span class="token operator">=</span> <span class="token function">getThread</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>ThreadImpl<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>impl<span class="token operator">-></span>state <span class="token operator">=</span> _PxThreadStarted<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// run setTid in thread's context</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">setTid</span><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// then run either the passed in function or execute from the derived class (Runnable).</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token operator">-></span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>arg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>Runnable<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>impl<span class="token operator">-></span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//execute 实现:</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">void</span> Ext<span class="token operator">::</span><span class="token class-name">CpuWorkerThread</span><span class="token operator">::</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>   mThreadId <span class="token operator">=</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">quitIsSignalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      mOwner<span class="token operator">-></span><span class="token function">resetWakeSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>      PxBaseTask<span class="token operator">*</span> task <span class="token operator">=</span> <span class="token class-name">TaskQueueHelper</span><span class="token operator">::</span><span class="token function">fetchTask</span><span class="token punctuation">(</span>mLocalJobList<span class="token punctuation">,</span> mQueueEntryPool<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>         task <span class="token operator">=</span> mOwner<span class="token operator">-></span><span class="token function">fetchNextTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      </pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>         mOwner<span class="token operator">-></span><span class="token function">runTask</span><span class="token punctuation">(</span><span class="token operator">*</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>         task<span class="token operator">-></span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">else</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>         mOwner<span class="token operator">-></span><span class="token function">waitForWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>   <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>本篇主要介绍了任务管理器如果进行任务调度，以及任务是如何排布执行顺序，巧妙的通过引用计数建立任务间的依赖关系。</p><p>并介绍了 CpuDispatcher 是如何调度任务的执行，以及 WorkThread 的实现细节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="UE4" scheme="https://hakuya.me/tags/UE4/"/>
    
    <category term="Task Management" scheme="https://hakuya.me/tags/Task-Management/"/>
    
  </entry>
  
  <entry>
    <title>Collision分享</title>
    <link href="https://hakuya.me/learning/physx/Collision%E5%88%86%E4%BA%AB/"/>
    <id>https://hakuya.me/learning/physx/Collision%E5%88%86%E4%BA%AB/</id>
    <published>2022-10-12T09:15:00.000Z</published>
    <updated>2022-12-29T01:36:04.545Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="collision分享"><a class="anchor" href="#collision分享">#</a> Collision 分享</h1><p>碰撞检测常常用来计算物体之间的碰撞，在动作游戏的攻击受击、射击游戏中子弹命中等有广泛的运用。常用的检测方式有以下三种：</p><ul><li>Overlaps：重叠检测。</li><li>Raycasts：射线检测。</li><li>Sweeps：扫描检测。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221101144440096.png" alt="image-20221101144440096" /></p><blockquote><p>三者在检测流程上都比较接近，因此这里以 <strong>Overlaps</strong> 的检测模式来介绍一下检测流程。</p></blockquote><h2 id="接口说明"><a class="anchor" href="#接口说明">#</a> 接口说明</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">NpSceneQueries</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> PxGeometry<span class="token operator">&amp;</span> geometry<span class="token punctuation">,</span> <span class="token keyword">const</span> PxTransform<span class="token operator">&amp;</span> pose<span class="token punctuation">,</span> PxOverlapCallback<span class="token operator">&amp;</span> hits<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> PxQueryFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> PxQueryFilterCallback<span class="token operator">*</span> filterCall<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span> multiQuery<span class="token operator">&lt;</span>PxOverlapHit<span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> hits<span class="token punctuation">,</span> <span class="token function">PxHitFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> filterCall<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中涉及到的几个参数：</p><ul><li>PxGeometry：检测物体本身的几何数据，物体形状材质等信息。</li><li>PxTransform：检测物体的坐标及朝向。</li><li>PxOverlapCallback：获取碰撞检测命中结果的容器，其中会保存命中的详细检测结果如法线、坐标、距离等。</li><li><strong>PxQueryFilterData</strong>：过滤碰撞物标记，开发者定制。</li><li><strong>PxQueryFilterCallback</strong>：过滤处理函数，用来处理过滤规则，开发。</li></ul><p>其中 PxQueryFilterData 和 PxQueryFilterCallback 共同实现了<strong>碰撞过滤</strong>，这个后面再说。</p><h2 id="场景查询"><a class="anchor" href="#场景查询">#</a> 场景查询</h2><p>要知道，一个场景下的物体少则上万多则上亿，每次对所有对象计算碰撞开销过大，而实际会发生碰撞的物体微乎其微，如何精确高效的筛选出<strong>可能</strong>发生碰撞的物体，从而减少检测次数提高运行效率尤为重要。PhysX 把查询分成了两个阶段 <strong>Broad Phase / Narrow Phase</strong></p><h3 id="broad-phase"><a class="anchor" href="#broad-phase">#</a> Broad Phase</h3><p>该阶段主要是过滤出空间中<strong>可能</strong>发生碰撞的物体，常见的方法有三种：<strong>SAP/MBP/BVH</strong>。三者都是对物体的<strong>包围盒</strong>做碰撞检测：</p><h4 id="sap"><a class="anchor" href="#sap">#</a> SAP</h4><p>Sweep And Prune 算法。简单来说就是计算对象包围盒在各个轴的投影，然后取交集：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221101154932800.png" alt="image-20221101154932800" /></p><h4 id="mbp"><a class="anchor" href="#mbp">#</a> MBP</h4><p>Multi Box Pruning 算法。把整个场景划分为若干网格，然后把对象归入不同网格内，这样就只需要对该网格内的对象做检测即可，有点类似 AOI 里的九宫格。</p><blockquote><p>另外：通常为了加速还会在每个网格内实现一次 SAP。</p></blockquote><h4 id="bvh"><a class="anchor" href="#bvh">#</a> BVH</h4><p>Bounding Volume Hierarchy 算法，也是目前 PhysX 采用的算法。本质上是把所有对象的包围盒作为树的叶节点构建出一棵查询树结构，然后对这棵树进行查询。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221101160710760.png" alt="image-20221101160710760" /></p><p>PhysX 中查询结构的实现比较复杂，为了支持动态增删、多线程访问、高性能，进行了非常多的优化调整：</p><ul><li><p>把场景中的对象拆分到了两个容器中存储，一个静态对象容器 (<strong>StaticPruner</strong>)，一个动态对象容器 (<strong>DynamicPruner</strong>)。</p><ul><li>静态容器中的对象存放常驻且不发生位移的对象，例如不可移动的场景物件。</li><li>动态对象存储会创建销毁移动的场景物件、Npc、玩家等。</li></ul></li><li><p>动态对象容器为了尽可能的节约内存又被拆解成了两个部分，RunTime &amp;&amp; BuildTime：</p><ul><li>把构建好的<strong>动态树转为静态化</strong>。因为静态结构不需要额外分配内存或者指针，存储的数据也可以尽可能压缩因此可以降低内存占用且提高查询效率。</li><li><strong>双树结构分离构建和修改</strong>。由于动态树的静态化耗时很长，为了不影响性能一般会采用分帧的方式，但是如果在构建过程中有需要进行查询和变更将变得非常麻烦，因此引入了双树结构，旧的树会记录下上个时刻的快照，并把所有构建期间的修改加入到动态树中，在构建完成后替换旧的静态树，并用新的动态树构建下一次新的静态树。</li><li>对于聚合物体的优化，支持以树为单位建树。例如一棵树有树干和叶子等内容，它们的位置高度集中，因此可以直接视作一棵 BVH，插入到其他的 BVH 中，这种提前建好树直接插入的方式可以减少建树的耗时。</li></ul></li></ul><p><strong>DynamicPruner</strong> 对于增量和非增量还划分了 <strong>IncrementalAABBTree</strong> &amp;&amp; <strong>AABBTree</strong>，增量情况下的增删改介绍：</p><ul><li>首先，每个 <strong>DynamicPruner</strong> 都是由两棵 <strong>AABBTree</strong> 和一个 <strong>ExtendedBucketPruner</strong> 组成，而 <strong>ExtendedBucketPruner</strong> 又包含两棵 <strong>IncrementalAABBTree</strong>，就像下面这样～</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227164359425.png" alt="image-20221227164359425" /></p><blockquote><p>这里值得一提的是，AABBTree 同时只会有一棵参与工作，而 <strong>IncrementalAABBTree</strong> 两颗都会<strong>同时</strong>参与工作。</p></blockquote><ul><li><p>再来聊聊增删改操作吧：</p><ul><li>由于 DynamicPruner 在初始状态下，AABBTree 和 IncrementalAABBTree 都只有一棵，而所有包围盒数据都会储存在 <strong>PruningPool</strong> 内，PruningPool 可以简单理解为一个数组，内部是连续的，对外是稀疏的，主要是因为外部对象通常会持有内部数据的下标，频繁删除会导致下标变化需要反复持有对象的数据，因此做了一层额外映射。回到正题，最初的包围盒数据会用于创建 CurTree（红色部分标注），之后新增的数据会插入到数组尾部，并追加到 TreeA 里（紫色）</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227165031724.png" alt="image-20221227165031724" /></p></li><li><p>但长此以往，TreeA 势必会越来越大，最后 CurTree 就失去价值了，因此会定时进行一次重建。但是重建非常耗时、为了保证重建过程依旧可用新增才有了 NewTree 和 TreeB。这里 TreeA 和 CurTree 的数据会被用来构建 NewTree，而构建过程中新增的数据则会存储在 TreeB，然而 NewTree 并非立刻是可用的，因此会出现 CurTree 和 TreeA &amp;&amp; TreeB 同时工作的情况，此外构建过程中如果删除或是修改了 CurTree 或是 TreeA，由于它们都和 NewTree 共享数据，所以也是基本可以体现在 NewTree 的。</p></li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227172656637.png" alt="image-20221227172656637" /></p><ul><li>带到 NewTree 构建完成后，CurTree 和 TreeA 就失去作用了，并会在下次构建开启时重新发挥作用：</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221227172810234.png" alt="image-20221227172810234" /></p><h3 id="碰撞过滤"><a class="anchor" href="#碰撞过滤">#</a> 碰撞过滤</h3><p>碰撞过滤分别在 Broad Phase 和 Narrow Phase 执行完成后工作，本质是提供给业务层的上层过滤规则。PhysX 通过 <strong>PxFilterData</strong> 四个通道标记和 <strong>PxQueryFilterCallback</strong> 的过滤接口为开发者提供了自定义筛选的可能。</p><h4 id="pxfilterdata"><a class="anchor" href="#pxfilterdata">#</a> PxFilterData</h4><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">PxFilterData</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxU32 word0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PxU32 word1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>PxU32 word2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>PxU32 word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="pxqueryfiltercallback"><a class="anchor" href="#pxqueryfiltercallback">#</a> PxQueryFilterCallback</h4><p><strong>PxQueryFilterCallback</strong> 提供了两个虚函数：<strong>preFilter</strong>、<strong>postFilter</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">PxQueryFilterCallback</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">preFilter</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxShape<span class="token operator">*</span> shape<span class="token punctuation">,</span> <span class="token keyword">const</span> PxRigidActor<span class="token operator">*</span> actor<span class="token punctuation">,</span> PxHitFlags<span class="token operator">&amp;</span> queryFlags<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">postFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxQueryHit<span class="token operator">&amp;</span> hit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PxQueryFilterCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这两个接口的执行时机和参数不同，也决定了用法不同：</p><ul><li>前者负责对 <strong>Broad Phase</strong> 阶段的碰撞做筛选，由业务指定哪些碰撞「会发生」。</li><li>后者负责对 <strong>Narrow Phase</strong> 结果中的命中点做过滤。</li></ul><blockquote><p>过滤的实现还是比较简单的，但如何定制高效且易扩展的过滤模式和方法，用好 PhysX 提供的 4 个 word，压力就来到了开发者这边～🤔</p></blockquote><h4 id="ue-中的过滤"><a class="anchor" href="#ue-中的过滤">#</a> UE 中的过滤</h4><p>Unreal 中定义了两种碰撞方式：<strong>Block</strong> &amp;&amp; <strong>Touch</strong>。</p><ul><li><strong>Block</strong>：表示碰撞会被拦截：如人和墙壁之间的碰撞，相撞后就会被阻挡，如果看到一个物体，那么它后面的内容将被挡住。</li><li><strong>Touch</strong>：表示碰撞但会穿过物体：如人和水、云等碰撞，如果看到一个半透明或者透明物体，那么它后面的内容也可以被看见。</li></ul><p>这是一张碰撞关系表，只有当两个物体都具备 <strong>Block</strong> 特性的情况下，碰撞才会被拦截。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221011171612511.png" alt="image-20221011171612511" /></p><p>通过上图的关系，就可以引申出 <strong>word1</strong> &amp;&amp; <strong>word2</strong> 的定义。</p><ul><li><strong>Word1</strong>：在 UE4 中也被称为 <strong>BlockingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Block</strong> 碰撞。</li><li><strong>Word2</strong>：在 UE4 中也被称为 <strong>TouchingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Touch</strong> 碰撞。</li></ul><p><strong>word0</strong> 和 <strong>word3</strong> 相对复杂一下：</p><ul><li><strong>word0</strong> 的含义比较复杂，在不同的查询模式下代表了不同的内容。<ul><li><strong>Query 模式</strong>下代表 Query 类型。</li><li><strong>Object 模式</strong>下用于描述物体指代的 ActorID。</li><li><strong>Simulate 模式</strong>下标识所属于 Body 中的编号。</li></ul></li><li><strong>word3</strong> 的成分比较复杂：FMaskFilter [6] + ECollisionChannel [5] + EPhysXFilterDataFlags [21]<ul><li><strong>6 位</strong>用来标记掩码，给程序定义用来屏蔽某类对象的碰撞。</li><li><strong>5 位</strong>用来标识该对象的通道类型。</li><li><strong>21 位</strong>用来标记检测的特性标志位，不同的标记会决定使用哪种检测算法和检测模式。</li></ul></li></ul><h4 id="项目组的过滤"><a class="anchor" href="#项目组的过滤">#</a> 项目组的过滤</h4><p>组内的过滤规则是基于 UE4 并进行了一些调整：</p><ul><li><strong>word0</strong>：默认都是场景掩码，应该是场景公用规则下的过滤位。</li><li><strong>word1</strong>：<strong>Object 模式</strong>和<strong> Simulate 模式</strong>下用来描述对象自身的类型通道；<strong>Query 模式</strong>下表示<strong>总通道</strong> (包括<strong>对象通道</strong>和<strong>查询通道</strong>)</li><li><strong>word2</strong>：查询通道。</li><li><strong>word3</strong>：<strong>Object 模式</strong>和<strong> Simulate 模式</strong>下用来描述对象的<strong>总通道</strong>，<strong>Query 模式</strong>表示需要查询的<strong>对象通道</strong>。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 碰撞通道</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EnmCollisionChannel</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 对象通道</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    ECC_OBJECT_CHANNEL_INVALID    <span class="token operator">=</span> <span class="token number">0x00000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    ECC_OBJECT_CHANNEL_PLAYER     <span class="token operator">=</span> <span class="token number">0x00001</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    ECC_OBJECT_CHANNEL_NPC        <span class="token operator">=</span> <span class="token number">0x00002</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    ECC_OBJECT_CHANNEL_TERRAIN    <span class="token operator">=</span> <span class="token number">0x00004</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    ECC_OBJECT_CHANNEL_COVER      <span class="token operator">=</span> <span class="token number">0x00008</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    ECC_OBJECT_CHANNEL_TRIGGER    <span class="token operator">=</span> <span class="token number">0x00010</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    ECC_OBJECT_CHANNEL_PROJECTILE <span class="token operator">=</span> <span class="token number">0x00020</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    ECC_OBJECT_CHANNEL_VEHICLE    <span class="token operator">=</span> <span class="token number">0x00040</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    ECC_OBJECT_CHANNEL_WIDGET     <span class="token operator">=</span> <span class="token number">0x00080</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 查询通道</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    ECC_QUERY_CHANNEL_MOVE     <span class="token operator">=</span> <span class="token number">0x00100000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    ECC_QUERY_CHANNEL_VISIABLE <span class="token operator">=</span> <span class="token number">0x00200000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    ECC_QUERY_CHANNEL_WEAPON   <span class="token operator">=</span> <span class="token number">0x00400000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    ECC_QUERY_CHANNEL_DAMAGE   <span class="token operator">=</span> <span class="token number">0x00800000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    ECC_OBJECT_CHANNEL_ALL <span class="token operator">=</span> ENM_OBJECT_CHANNEL_MASK<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    ECC_QUERY_CHANNEL_ALL  <span class="token operator">=</span> ENM_QUERY_CHANNEL_MASK<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    ECC_CHANNEL_ALL        <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="碰撞检测"><a class="anchor" href="#碰撞检测">#</a> 碰撞检测</h2><h3 id="narrow-phase"><a class="anchor" href="#narrow-phase">#</a> Narrow Phase</h3><p>精细检测用来进一步确认 <strong>Broad Phase</strong> 阶段的物体是否真的会发生碰撞，由于要计算出物体间的碰撞可能及碰撞点位，对于参与碰撞的对象有着严格的要求。</p><p>下面是 Overlap 操作中基于 GJK 算法可以支持检测的碰撞类型组：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>GeomOverlapTable gGeomOverlapMethodTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>GeomOverlapCallback_SphereSphere<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="6"></td><td><pre>GeomOverlapCallback_SpherePlane<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="7"></td><td><pre>GeomOverlapCallback_SphereCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="8"></td><td><pre>GeomOverlapCallback_SphereBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="9"></td><td><pre>GeomOverlapCallback_SphereConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="10"></td><td><pre>GeomOverlapCallback_SphereMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="11"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="17"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="18"></td><td><pre>GeomOverlapCallback_PlaneCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="19"></td><td><pre>GeomOverlapCallback_PlaneBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="20"></td><td><pre>GeomOverlapCallback_PlaneConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="21"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="22"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="29"></td><td><pre>GeomOverlapCallback_CapsuleCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="30"></td><td><pre>GeomOverlapCallback_CapsuleBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="31"></td><td><pre>GeomOverlapCallback_CapsuleConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="32"></td><td><pre>GeomOverlapCallback_CapsuleMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="33"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="41"></td><td><pre>GeomOverlapCallback_BoxBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="42"></td><td><pre>GeomOverlapCallback_BoxConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="43"></td><td><pre>GeomOverlapCallback_BoxMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="44"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="53"></td><td><pre>GeomOverlapCallback_ConvexConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="54"></td><td><pre>GeomOverlapCallback_ConvexMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH//not used: mesh always uses swept method for midphase.</span></pre></td></tr><tr><td data-num="55"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD//TODO: make HF midphase that will mask this</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="65"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="66"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="77"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><table><thead><tr><th></th><th>Sphere</th><th>Plane</th><th>Capsule</th><th>Box</th><th>Convex Mesh</th><th>Triangle Mesh</th><th>HeightField</th></tr></thead><tbody><tr><td>Sphere</td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Plane</td><td>√</td><td>×</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Capsule</td><td>√</td><td>√</td><td>√</td><td></td><td></td><td></td><td></td></tr><tr><td>Box</td><td>√</td><td>√</td><td>√</td><td>√</td><td></td><td></td><td></td></tr><tr><td>Convex Mesh</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>Triangle Mesh</td><td>√</td><td>×</td><td>√</td><td>√</td><td>√</td><td>×</td><td></td></tr><tr><td>HeightField</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>简单梳理下一次 Overlap 会做哪些事情：</p><ul><li>【step.1】：需要构建一个特定的过滤规则，用于 <strong>preFilter</strong>。</li><li>【step.2】：对 BVH 进行查询。<ul><li>【step.2.1】：先查询一下存放静态物体的<strong>静态树</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.2.2】：再查询一下存放动态物体的<strong>静态树</strong>和<strong>动态增量树</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>+<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.2.3】：还需要查询一下存放<strong>聚合物体</strong>的<strong>静态树</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li></ul></li><li>【step.3】：对查询结果做 <strong>preFilter</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.4】：对所有过滤结果做 <strong>Narrow Phase</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」，<strong>Narrow Phase</strong> 本身的开销可能应该远不止 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li><li>【step.5】：对所有命中做 <strong>postFilter</strong>「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li><li>【step.6】【可能】：更具需要对所有结果做<strong>排序</strong>，取最近的命中点「<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>」。</li></ul><p>希望本文能够对理解基本的碰撞检测有所帮助，对 Raycast、Overlap、Sweep 操作的大致开销和内部所做的逻辑有个概念。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Collision" scheme="https://hakuya.me/tags/Collision/"/>
    
    <category term="UE4" scheme="https://hakuya.me/tags/UE4/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Collision篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Collision%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Collision%E7%AF%87/</id>
    <published>2022-10-12T09:15:00.000Z</published>
    <updated>2022-12-29T01:36:04.545Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxcollision篇"><a class="anchor" href="#physxcollision篇">#</a> PhysX——Collision 篇</h1><p>碰撞检测常常用来计算物体之间的碰撞，在动作游戏的攻击受击、射击游戏中子弹命中等有广泛的运用。要让游戏更加趋近真实，碰撞是其中必不可少的一环。</p><p>常规的检测方式有以下三种：</p><ul><li>raycasts：射线检测。</li><li>sweeps：扫描检测。</li><li>overlaps：重叠检测。</li></ul><p>由于 PhysX 的 Collision 实在过于复杂，因此本文主要以 <strong>overlap</strong> 检测作为入口，一步步分析其中的原理。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//--------------------- 官方用法 ---------------------</span></pre></td></tr><tr><td data-num="2"></td><td><pre>PxOverlapBuffer hit<span class="token punctuation">;</span>            <span class="token comment">// [out] Overlap results</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxGeometry overlapShape <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>  <span class="token comment">// [in] shape to test for overlaps</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PxTransform shapePose <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token comment">// [in] initial shape pose (at distance=0)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>PxOverlapBuffer hit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">bool</span> status <span class="token operator">=</span> scene<span class="token operator">-></span><span class="token function">overlap</span><span class="token punctuation">(</span>overlapShape<span class="token punctuation">,</span> shapePose<span class="token punctuation">,</span> hit<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>overlap</strong> 函数的定义如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//--------------------- overlap 函数定义 ---------------------</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">NpSceneQueries</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> PxGeometry<span class="token operator">&amp;</span> geometry<span class="token punctuation">,</span> <span class="token keyword">const</span> PxTransform<span class="token operator">&amp;</span> pose<span class="token punctuation">,</span> PxOverlapCallback<span class="token operator">&amp;</span> hits<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> PxQueryFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> PxQueryFilterCallback<span class="token operator">*</span> filterCall<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">PX_PROFILE_ZONE</span><span class="token punctuation">(</span><span class="token string">"SceneQuery.overlap"</span><span class="token punctuation">,</span> <span class="token function">getContextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">NP_READ_CHECK</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>PX_SIMD_GUARD<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>MultiQueryInput <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>geometry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pose<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// we are not supporting cache for overlaps for some reason</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">return</span> multiQuery<span class="token operator">&lt;</span>PxOverlapHit<span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> hits<span class="token punctuation">,</span> <span class="token function">PxHitFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> filterCall<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中涉及到的几个参数：</p><ul><li>PxGeometry：检测物体本身的几何数据。</li><li>PxTransform：检测物体的坐标及朝向。</li><li>PxOverlapCallback：获取碰撞检测结果的容器，其中会保存命中的详细检测结果如法线、坐标、距离等。</li><li><strong>PxQueryFilterData</strong>：过滤标记数据。</li><li><strong>PxQueryFilterCallback</strong>：过滤处理函数，用来处理过滤规则，支持开发者定制。</li></ul><h2 id="碰撞过滤filter"><a class="anchor" href="#碰撞过滤filter">#</a> 碰撞过滤（Filter）</h2><p>对于复杂场景下的碰撞检测，往往需要检测的物体数量众多，如何精确的筛选出需要被检测的物体，从而减少检测次数提高运行效率尤为重要。PhysX 通过 <strong>PxFilterData</strong> 四个通道标记来筛选出需要进行检测的物体，至于具体的筛选规则和各个通道的定义则交给用户自己。</p><p><strong>PxFilterData</strong> 定义非常简单：总共 128 bit，通过 4 个 32bit 的字段表示。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">PxFilterData</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxU32 word0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PxU32 word1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>PxU32 word2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>PxU32 word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="自定义过滤字段"><a class="anchor" href="#自定义过滤字段">#</a> 自定义过滤字段</h3><p>其中的每个 Word，PhysX 并没有给出定义，需要开发者自己定制规则。这里以 UE4 中的定义作为例子进行介绍：</p><p>UE4 中使用碰撞检测和碰撞过滤的地方有三大类：</p><ul><li>QueryFilterData：查询操作预设的过滤项。</li><li>ShapeFilterData：对象参与查询时自身具备的过滤项。</li><li>SimulateFilterData：对象参与模拟时自身具备的过滤项。</li></ul><h4 id="queryfilterdata"><a class="anchor" href="#queryfilterdata">#</a> QueryFilterData</h4><p>QueryFilterData 用来定义查询操作的过滤规则，比较常见的应用场景是计算光线命中 (LineTrace)，LineTrace 有两种查询的过滤方式：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ECollisionQuery</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ObjectQuery <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>TraceQuery <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h5 id="objectquery"><a class="anchor" href="#objectquery">#</a> ObjectQuery</h5><p>ObjectQuery 中 FilterData 中每个字段的含义：</p><ul><li>Word0：<strong>ObjectQuery</strong></li><li>Word1：<strong>ECollisionChannel</strong></li><li>Word2：无意义。</li><li>Word3：<strong>FMaskFilter</strong> [6 位] + <strong>ECollisionChannel</strong> [5 位] + <strong>EPhysXFilterDataFlags</strong> [21 位]</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> NumCollisionChannelBits <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> NumExtraFilterBits <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> NumFilterDataFlagBits <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> NumExtraFilterBits <span class="token operator">-</span> NumCollisionChannelBits <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Word3 计算：MaskFilter</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">inline</span> uint32 <span class="token function">CreateChannelAndFilter</span><span class="token punctuation">(</span>ECollisionChannel CollisionChannel<span class="token punctuation">,</span> FMaskFilter MaskFilter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>uint32 ResultMask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>MaskFilter<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> NumCollisionChannelBits<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>uint32<span class="token punctuation">)</span>CollisionChannel<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">return</span> ResultMask <span class="token operator">&lt;&lt;</span> NumFilterDataFlagBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中 <strong>FMaskFilter</strong> 提供给开发者定义的屏蔽 Mask。如果 Query 的 Mask 和对象本身的 Mask 与操作不等于 0 的情况下将被忽略。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>QuerierMaskFilter <span class="token operator">&amp;</span> ShapeMaskFilter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//If ignore mask hit something, ignore it</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> ECollisionQueryHitType<span class="token operator">::</span>None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>ECollisionChannel</strong> 可以理解为碰撞检测的通道：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">ECollisionChannel</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/** 已定义的 8 个通道 */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ECC_WorldStatic <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"WorldStatic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>ECC_WorldDynamic <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"WorldDynamic"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>ECC_Pawn <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Pawn"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ECC_Visibility <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Visibility"</span> <span class="token punctuation">,</span> TraceQuery<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ECC_Camera <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Camera"</span> <span class="token punctuation">,</span> TraceQuery<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ECC_PhysicsBody <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"PhysicsBody"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ECC_Vehicle <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Vehicle"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ECC_Destructible <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Destructible"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/** 引擎预留的 6 个通道 */</span></pre></td></tr><tr><td data-num="14"></td><td><pre>ECC_EngineTraceChannel1 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="16"></td><td><pre>ECC_EngineTraceChannel6 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/** 未定义的 18 个通道 */</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ECC_GameTraceChannel1 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre>ECC_GameTraceChannel18 <span class="token function">UMETA</span><span class="token punctuation">(</span>Hidden<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>通过定义不同的通道来对不同类别的对象做筛选，例如 <strong>ECC_Visibility</strong> 通道的对象会被「看见」，会在计算光线命中的时候参与检测。</p><p><strong>EPhysXFilterDataFlags</strong> 标识本次碰撞检测需要采用的检测方法。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EPhysXFilterDataFlags</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>EPDF_SimpleCollision<span class="token operator">=</span><span class="token number">0x0001</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>EPDF_ComplexCollision<span class="token operator">=</span><span class="token number">0x0002</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>EPDF_CCD<span class="token operator">=</span><span class="token number">0x0004</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>EPDF_ContactNotify<span class="token operator">=</span><span class="token number">0x0008</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>EPDF_StaticShape<span class="token operator">=</span><span class="token number">0x0010</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>EPDF_ModifyContacts<span class="token operator">=</span>   <span class="token number">0x0020</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>EPDF_KinematicKinematicPairs <span class="token operator">=</span> <span class="token number">0x0040</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>ObjectQuery 中 <strong>Word3</strong> 的 ECollisionChannel 用来标识 MultiTrace，并不具体指代对象的碰撞通道。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> int32 MultiTrace<span class="token punctuation">;</span> <span class="token comment">/*=1 if multi. 0 otherwise*/</span></pre></td></tr><tr><td data-num="2"></td><td><pre>NewData<span class="token punctuation">.</span>Word3 <span class="token operator">|=</span> <span class="token function">CreateChannelAndFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ECollisionChannel<span class="token punctuation">)</span>MultiTrace<span class="token punctuation">,</span> ObjectParam<span class="token punctuation">.</span>IgnoreMask<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>ObjectQuery 会通过 Actor 本身的 ECollisionChannel 和自身的 QueryFilter.Word1 做 &amp; 运算来过滤出所需的对象。</p></blockquote><h5 id="tracequery"><a class="anchor" href="#tracequery">#</a> TraceQuery</h5><p>TraceQuery 中 FilterData 中每个字段的含义：</p><ul><li>Word0：<strong>TraceQuery</strong></li><li>Word1：<strong>BlockingBits</strong></li><li>Word2：<strong>TouchingBits</strong></li><li>Word3：FMaskFilter[6] + ECollisionChannel[5] + EPhysXFilterDataFlags[21]</li></ul><p>在介绍 <strong>BlockingBits &amp;&amp; TouchingBits</strong> 之前，先来了解几个概念：</p><p>UE4 中描述碰撞的类型分为两种：<strong>Block</strong> &amp;&amp; <strong>Touch</strong></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">ECollisionQueryHitType</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Touch <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Block <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li><strong>Block</strong>：表示碰撞会被拦截：如人和墙壁之间的碰撞，相撞后就会被阻挡，如果看到一个物体，那么它后面的内容将被挡住。</li><li><strong>Touch</strong>：表示碰撞但会穿过物体：如人和水、云等碰撞，如果看到一个半透明或者透明物体，那么它后面的内容也可以被看见。</li></ul><p>这是一张碰撞关系表，只有当两个物体都具备 <strong>Block</strong> 特性的情况下，碰撞才会被拦截。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221011171612511.png" alt="image-20221011171612511" /></p><p>通过上图的关系，就可以引申出 <strong>word1</strong> &amp;&amp; <strong>word2</strong> 的定义。</p><ul><li><strong>Word1</strong>：在 UE4 中也被称为 <strong>BlockingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Block</strong> 碰撞。</li><li><strong>Word2</strong>：在 UE4 中也被称为 <strong>TouchingBits</strong>。代表该对象会和哪些 <strong>ECollisionChannel</strong> 发生 <strong>Touch</strong> 碰撞。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">FPhysicsFilterBuilder</span><span class="token operator">::</span><span class="token function">FPhysicsFilterBuilder</span><span class="token punctuation">(</span>TEnumAsByte<span class="token operator">&lt;</span><span class="token keyword">enum</span> <span class="token class-name">ECollisionChannel</span><span class="token operator">></span> InObjectType<span class="token punctuation">,</span> FMaskFilter MaskFilter<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">FCollisionResponseContainer</span><span class="token operator">&amp;</span> ResponseToChannels<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">:</span> <span class="token function">BlockingBits</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">,</span> <span class="token function">TouchingBits</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">,</span> <span class="token function">Word3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>int32 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>ResponseToChannels<span class="token punctuation">.</span>EnumArray<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ResponseToChannels<span class="token punctuation">.</span>EnumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ECR_Block<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> uint32 ChannelBit <span class="token operator">=</span> <span class="token function">CRC_TO_BITFIELD</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>BlockingBits <span class="token operator">|=</span> ChannelBit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ResponseToChannels<span class="token punctuation">.</span>EnumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ECR_Overlap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">const</span> uint32 ChannelBit <span class="token operator">=</span> <span class="token function">CRC_TO_BITFIELD</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>TouchingBits <span class="token operator">|=</span> ChannelBit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><p>TraceQuery 则相对复杂一些：需要分别用两者的 ECollisionChannel 和对方的 BlockingBits &amp;&amp; TouchingBits 做计算，得到最终的碰撞类型，然后通过上述碰撞关系表得到最终的碰撞结果，例如人和雾的碰撞是 Block 的，而雾和人的碰撞是 Touch 的，那么最终结果也是 Touch，人和雾会互相穿过。</p></blockquote><p>其实可以简单把 ObjectQuery 和 TraceQuery 理解成：一个是单向查询，一个是双向查询。单向查询相对简单适用于一些简单场景，如射线检测。双向查询则相对复杂，需要考虑查询方和被查询方两者的关系，应用于物体间碰撞的检测比较合适。</p><h4 id="shapefilterdata"><a class="anchor" href="#shapefilterdata">#</a> ShapeFilterData</h4><p>ShapeFilterData 则是用来定义对象自身的过滤规则，相比于 QueryFilterData 侧重于描述本次查询的规则信息，ShapeFilterData 更侧重描述 Shape 本身的性质：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">GetQueryData</span><span class="token punctuation">(</span>uint32 ActorID<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord0<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord1<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord2<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord3<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre> * Format for QueryData : </pre></td></tr><tr><td data-num="5"></td><td><pre> *word0 (object ID)</pre></td></tr><tr><td data-num="6"></td><td><pre> *word1 (blocking channels)</pre></td></tr><tr><td data-num="7"></td><td><pre> *word2 (touching channels)</pre></td></tr><tr><td data-num="8"></td><td><pre> *word3 (ExtraFilter (top NumExtraFilterBits) + MyChannel (next NumCollisionChannelBits) as ECollisionChannel + Flags (remaining NumFilterDataFlagBits)</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    OutWord0 <span class="token operator">=</span> ActorID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    OutWord1 <span class="token operator">=</span> BlockingBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    OutWord2 <span class="token operator">=</span> TouchingBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    OutWord3 <span class="token operator">=</span> Word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>Word0：<strong>ActorID</strong></li><li>Word1：<strong>BlockingBits</strong></li><li>Word2：<strong>TouchingBits</strong></li><li>Word3：FMaskFilter[6] + ECollisionChannel[5] + EPhysXFilterDataFlags[21]</li></ul><h4 id="simulatefilterdata"><a class="anchor" href="#simulatefilterdata">#</a> SimulateFilterData</h4><p>SimulateFilterData 是用在 simulate 物理碰撞中采用的过滤规则。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">GetSimData</span><span class="token punctuation">(</span>uint32 BodyIndex<span class="token punctuation">,</span> uint32 ComponentID<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord0<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord1<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord2<span class="token punctuation">,</span> uint32<span class="token operator">&amp;</span> OutWord3<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre> * Format for SimData : </pre></td></tr><tr><td data-num="5"></td><td><pre> * word0 (body index)</pre></td></tr><tr><td data-num="6"></td><td><pre> *word1 (blocking channels)</pre></td></tr><tr><td data-num="7"></td><td><pre> *word2 (skeletal mesh component ID)</pre></td></tr><tr><td data-num="8"></td><td><pre> *word3 (ExtraFilter (top NumExtraFilterBits) + MyChannel (next NumCollisionChannelBits) as ECollisionChannel + Flags (remaining NumFilterDataFlagBits)</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    OutWord0 <span class="token operator">=</span> BodyIndex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    OutWord1 <span class="token operator">=</span> BlockingBits<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    OutWord2 <span class="token operator">=</span> ComponentID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    OutWord3 <span class="token operator">=</span> Word3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>Word0：<strong>BodyIndex</strong>。表示 Body 编号。</li><li>Word1：<strong>BlockingBits</strong></li><li>Word2：<strong>ComponentID</strong>。表示 Body 中的 Component 编号。</li><li>Word3：FMaskFilter[6] + ECollisionChannel[5] + EPhysXFilterDataFlags[21]</li></ul><h3 id="自定义过滤规则"><a class="anchor" href="#自定义过滤规则">#</a> 自定义过滤规则</h3><p>同样就像 PhysX 没有给出 Word 的定义一样，PhysX 也没有给出使用 Word 的过滤规则，而是提供了一个过滤类 ——PxQueyFilterCallback：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">PxQueryFilterCallback</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">preFilter</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxShape<span class="token operator">*</span> shape<span class="token punctuation">,</span> <span class="token keyword">const</span> PxRigidActor<span class="token operator">*</span> actor<span class="token punctuation">,</span> PxHitFlags<span class="token operator">&amp;</span> queryFlags<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">virtual</span> PxQueryHitType<span class="token operator">::</span>Enum <span class="token function">postFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> <span class="token keyword">const</span> PxQueryHit<span class="token operator">&amp;</span> hit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PxQueryFilterCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这个类中的函数会在调用 raycast、overlap、sweep 等操作时调用，后面会详细介绍这里不做展开。因此可以通过继承该类来实现自己的 Filter 规则。</p><ul><li><strong>preFilter</strong>：该过滤会在低精度检测命中后、高精度检测前执行。用来剔除不必要的检测，减少高精度检测开销。</li><li><strong>postFilter</strong>：该过滤会在高精度检测命中后执行。对高精度检测的命中结果做最后的筛选。</li></ul><p>上面提到的 UE4 中两种 Query 方式，便是通过重写 preFilter 来实现的：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ICollisionQueryFilterCallbackBase</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">PxQueryFilterCallback</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">virtual</span> ECollisionQueryHitType <span class="token function">PostFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> FilterData<span class="token punctuation">,</span> <span class="token keyword">const</span> physx<span class="token operator">::</span>PxQueryHit<span class="token operator">&amp;</span> Hit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">virtual</span> ECollisionQueryHitType <span class="token function">PreFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> FilterData<span class="token punctuation">,</span> <span class="token keyword">const</span> physx<span class="token operator">::</span>PxShape<span class="token operator">&amp;</span> Shape<span class="token punctuation">,</span> physx<span class="token operator">::</span>PxRigidActor<span class="token operator">&amp;</span> Actor<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// QueryFilter</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">FCollisionQueryFilterCallback</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ICollisionQueryFilterCallbackBase</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">static</span> ECollisionQueryHitType <span class="token function">CalcQueryHitType</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> QueryFilter<span class="token punctuation">,</span> <span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> ShapeFilter<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPreFilter <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>ECollisionQueryHitType <span class="token function">PreFilterImp</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> FilterData<span class="token punctuation">,</span> <span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> ShapeFilterData<span class="token punctuation">,</span> uint32 ComponentID<span class="token punctuation">,</span> <span class="token keyword">const</span> FBodyInstance<span class="token operator">*</span> BodyInstance<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 过滤规则核心实现</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ECollisionQueryHitType <span class="token class-name">FCollisionQueryFilterCallback</span><span class="token operator">::</span><span class="token function">CalcQueryHitType</span><span class="token punctuation">(</span><span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> QueryFilter<span class="token punctuation">,</span> <span class="token keyword">const</span> FCollisionFilterData<span class="token operator">&amp;</span> ShapeFilter<span class="token punctuation">,</span> <span class="token keyword">bool</span> bPreFilter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ECollisionQuery QueryType <span class="token operator">=</span> <span class="token punctuation">(</span>ECollisionQuery<span class="token punctuation">)</span>QueryFilter<span class="token punctuation">.</span>Word0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>FMaskFilter QuerierMaskFilter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">const</span> ECollisionChannel QuerierChannel <span class="token operator">=</span> <span class="token function">GetCollisionChannelAndExtraFilter</span><span class="token punctuation">(</span>QueryFilter<span class="token punctuation">.</span>Word3<span class="token punctuation">,</span> QuerierMaskFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>FMaskFilter ShapeMaskFilter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">const</span> ECollisionChannel ShapeChannel <span class="token operator">=</span> <span class="token function">GetCollisionChannelAndExtraFilter</span><span class="token punctuation">(</span>ShapeFilter<span class="token punctuation">.</span>Word3<span class="token punctuation">,</span> ShapeMaskFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>QuerierMaskFilter <span class="token operator">&amp;</span> ShapeMaskFilter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//If ignore mask hit something, ignore it</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">return</span> ECollisionQueryHitType<span class="token operator">::</span>None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">const</span> uint32 ShapeBit <span class="token operator">=</span> <span class="token function">ECC_TO_BITFIELD</span><span class="token punctuation">(</span>ShapeChannel<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>QueryType <span class="token operator">==</span> ECollisionQuery<span class="token operator">::</span>ObjectQuery<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// ObjectQuery filter</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// TraceQuery filter</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">return</span> ECollisionQueryHitType<span class="token operator">::</span>None<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="场景查询scenequery"><a class="anchor" href="#场景查询scenequery">#</a> 场景查询（SceneQuery）</h2><p>通过 <strong>Filter</strong> 我们可以知道哪些 Shape 的碰撞我们可以忽略，但我们仍然避免不了需要先对所有需要参与检测的 Shape 做一次低精度的碰撞检测；这显然是不必要的，有些明显就不可能发生的碰撞该如何尽可能的忽略呢？</p><p>让我们回到 <strong>overlap</strong> 的代码：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">return</span> multiQuery<span class="token operator">&lt;</span>PxOverlapHit<span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> hits<span class="token punctuation">,</span> <span class="token function">PxHitFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> filterCall<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>NpSceneQueries</strong> 里有我们想要的答案：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 只保留了和 overlap 有关的核心代码，有兴趣的可以自行翻阅源码</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">HitType</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">NpSceneQueries</span><span class="token operator">::</span><span class="token function">multiQuery</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> MultiQueryInput<span class="token operator">&amp;</span> input<span class="token punctuation">,</span> PxHitCallback<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">&amp;</span> hits<span class="token punctuation">,</span> PxHitFlags hitFlags<span class="token punctuation">,</span> <span class="token keyword">const</span> PxQueryCache<span class="token operator">*</span> cache<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxQueryFilterData<span class="token operator">&amp;</span> filterData<span class="token punctuation">,</span> PxQueryFilterCallback<span class="token operator">*</span> filterCall<span class="token punctuation">,</span> BatchQueryFilterData<span class="token operator">*</span> bfd<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> Pruner<span class="token operator">*</span> staticPruner <span class="token operator">=</span> mSQManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PruningIndex<span class="token operator">::</span>eSTATIC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pruner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> Pruner<span class="token operator">*</span> dynamicPruner <span class="token operator">=</span> mSQManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PruningIndex<span class="token operator">::</span>eDYNAMIC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pruner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>HitTypeSupport<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span>IsRaycast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>HitTypeSupport<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span>IsOverlap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> ShapeData <span class="token function">sd</span><span class="token punctuation">(</span><span class="token operator">*</span>input<span class="token punctuation">.</span>geometry<span class="token punctuation">,</span> <span class="token operator">*</span>input<span class="token punctuation">.</span>pose<span class="token punctuation">,</span> input<span class="token punctuation">.</span>inflation<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>pcb<span class="token punctuation">.</span>mShapeData <span class="token operator">=</span> <span class="token operator">&amp;</span>sd<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>PxAgain again <span class="token operator">=</span> doStatics <span class="token operator">?</span> staticPruner<span class="token operator">-></span><span class="token function">overlap</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>again<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">return</span> hits<span class="token punctuation">.</span><span class="token function">hasAnyHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>doDynamics<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>again <span class="token operator">=</span> dynamicPruner<span class="token operator">-></span><span class="token function">overlap</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>cbr<span class="token punctuation">.</span>again <span class="token operator">=</span> again<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">return</span> hits<span class="token punctuation">.</span><span class="token function">hasAnyHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>核心在 <strong>staticPruner</strong> 和 <strong>dynamicPruner</strong>，它们都是 <strong>AABBPruner</strong> 的实例：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">SceneQueryManager</span><span class="token operator">::</span><span class="token function">SceneQueryManager</span><span class="token punctuation">(</span>Scb<span class="token operator">::</span>Scene<span class="token operator">&amp;</span> scene<span class="token punctuation">,</span> PxPruningStructureType<span class="token operator">::</span>Enum staticStructure<span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>                                     PxPruningStructureType<span class="token operator">::</span>Enum dynamicStructure<span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>                                     PxU32 dynamicTreeRebuildRateHint<span class="token punctuation">,</span> <span class="token keyword">const</span> PxSceneLimits<span class="token operator">&amp;</span> limits<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">mScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>mPrunerExt<span class="token punctuation">[</span>PruningIndex<span class="token operator">::</span>eSTATIC<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>staticStructure<span class="token punctuation">,</span> scene<span class="token punctuation">.</span><span class="token function">getContextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>mPrunerExt<span class="token punctuation">[</span>PruningIndex<span class="token operator">::</span>eDYNAMIC<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>dynamicStructure<span class="token punctuation">,</span> scene<span class="token punctuation">.</span><span class="token function">getContextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">PrunerExt</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>PxPruningStructureType<span class="token operator">::</span>Enum type<span class="token punctuation">,</span> PxU64 contextID<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">case</span> PxPruningStructureType<span class="token operator">::</span>eDYNAMIC_AABB_TREE<span class="token operator">:</span> <span class="token punctuation">&#123;</span> pruner <span class="token operator">=</span> <span class="token function">PX_NEW</span><span class="token punctuation">(</span>AABBPruner<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> contextID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">case</span> PxPruningStructureType<span class="token operator">::</span>eSTATIC_AABB_TREE<span class="token operator">:</span> <span class="token punctuation">&#123;</span> pruner <span class="token operator">=</span> <span class="token function">PX_NEW</span><span class="token punctuation">(</span>AABBPruner<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> contextID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>         <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>唯一的区别就是 <strong>staticPruner</strong> 不支持增量重建（<strong>mIncrementalRebuild</strong>），因此 <strong>staticPruner</strong> 内任意对象的修改都需要对整个 <strong>staticPruner</strong> 进行重建。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">AABBPruner</span><span class="token operator">::</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mAABBTree <span class="token operator">||</span> <span class="token operator">!</span>mIncrementalRebuild<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">fullRebuildAABBTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>AABBPruner 可以简单理解成一个复杂的 BVH，细节可以参考之前的文章，由于篇幅限制，这里不做更细致的介绍。</p><h2 id="碰撞检测collisiondetection"><a class="anchor" href="#碰撞检测collisiondetection">#</a> 碰撞检测（CollisionDetection）</h2><p>有了 AABBTree 提供的高效查询，接下来就可以快速定位需要检测的物体，并进行碰撞检测了。由于篇幅限制这里只简单介绍 <strong>Box</strong> 在 <strong>overlap</strong> 模式下的检测：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxAgain <span class="token class-name">AABBPruner</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShapeData<span class="token operator">&amp;</span> queryVolume<span class="token punctuation">,</span> PrunerCallback<span class="token operator">&amp;</span> pcb<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">switch</span><span class="token punctuation">(</span>queryVolume<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">case</span> PxGeometryType<span class="token operator">::</span>eBOX<span class="token operator">:</span><span class="token comment">// box（aabb） overlap</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 核心部分</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">const</span> Gu<span class="token operator">::</span>AABBAABBTest <span class="token function">test</span><span class="token punctuation">(</span>queryVolume<span class="token punctuation">.</span><span class="token function">getPrunerInflatedWorldAABB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        again <span class="token operator">=</span> AABBTreeOverlap<span class="token operator">&lt;</span>Gu<span class="token operator">::</span>AABBAABBTest<span class="token punctuation">,</span> AABBTree<span class="token punctuation">,</span> AABBTreeRuntimeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mPool<span class="token punctuation">.</span><span class="token function">getObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPool<span class="token punctuation">.</span><span class="token function">getCurrentWorldBoxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>mAABBTree<span class="token punctuation">,</span> test<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 增量的 AABBPruner 会用 mBucketPruner 存储增量节点，这部分内容也需要进行碰撞检测</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>again <span class="token operator">&amp;&amp;</span> mIncrementalRebuild <span class="token operator">&amp;&amp;</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">getNbObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            again <span class="token operator">=</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">overlap</span><span class="token punctuation">(</span>queryVolume<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> again<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中 <strong>AABBAABBTest</strong> 用来存储测试的包围盒数据，测试两个包围盒覆盖的代码如下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// (box_1_extent + box_2_extent) >= dist(box_1_center, box_2_center)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 中心点 x,y,z 的距离要小于两个包围盒长宽高的和</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">V3AllGrtrOrEq</span><span class="token punctuation">(</span><span class="token function">V3Add</span><span class="token punctuation">(</span>mExtents<span class="token punctuation">,</span> extents<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">V3Abs</span><span class="token punctuation">(</span><span class="token function">V3Sub</span><span class="token punctuation">(</span>center<span class="token punctuation">,</span> mCenter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>整个查询流程大致如下：</p><p>【step.1】从根节点开始依次进行 <strong>AABBAABBTest</strong>，满足重叠条件情况下 DFS 子节点，直到遇到叶子节点。</p><p>【step.2】对叶子节点内的 Shape 做 <strong>AABBAABBTest</strong>，这里的测试是低精度检测 <strong>Broad-Phase</strong>，只是判断对象的包围盒是否和检测物发生碰撞。</p><p>【step.3】对 <strong>Broad-Phase</strong> 结果做 <strong>preFilter</strong>。<strong>preFilter</strong> 主要是剔除发生理论会碰撞，但在规则层面需要进行忽略的部分。例如子弹命中友军，正常情况下会打中，但在很多 PVE 游戏中会忽略友军的命中。</p><p>【step.4】对过滤后的结果做高精度检测 <strong>Narrow-Phase</strong>。场景查询使用的检测算法是 <strong>GJK</strong>，由于篇幅限制这里不做展开。</p><p>【step.5】对高精度检测结果再做一次 <strong>postFilter</strong>，这种过滤可以对命中的部位做过滤，应用场景还是比较少的，因为很多过滤其实都可以在 <strong>preFilter</strong> 完成。</p><p>【step.6】通过检查以后，会把命中结果存储在 <strong>PxOverlapCallback</strong> 返回给上层，根据各项条件参数来控制检查是否继续下去。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 代码大量删减，如果感兴趣请自行查阅源代码</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">virtual</span> PxAgain <span class="token function">invoke</span><span class="token punctuation">(</span>PxReal<span class="token operator">&amp;</span> aDist<span class="token punctuation">,</span> <span class="token keyword">const</span> PrunerPayload<span class="token operator">&amp;</span> aPayload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 【step.3】进行预过滤 pre-filter</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    PxHitFlags filteredHitFlags <span class="token operator">=</span> mHitFlags<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">applyAllPreFiltersSQ</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>actorShape<span class="token punctuation">,</span> shapeHitType<span class="token comment">/*in&amp;out*/</span><span class="token punctuation">,</span> filterFlags<span class="token punctuation">,</span> mFilterData<span class="token punctuation">,</span> mFilterCall<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                                 mScene<span class="token punctuation">,</span> mBfd<span class="token punctuation">,</span> filteredHitFlags<span class="token punctuation">,</span> mHitCall<span class="token punctuation">.</span>maxNbTouches<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// skip this shape from reporting if prefilter said to do so</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 【step.4】高精度检测</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    PxU32 nbSubHits <span class="token operator">=</span> <span class="token class-name">GeomQueryAny</span><span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span><span class="token function">geomHit</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        mScene<span class="token punctuation">,</span> mInput<span class="token punctuation">,</span> <span class="token operator">*</span>mShapeData<span class="token punctuation">,</span> shapeGeom<span class="token punctuation">,</span> globalPose<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        filteredHitFlags <span class="token operator">|</span> mMeshAnyHitFlags<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        maxSubHits1<span class="token punctuation">,</span> subHits1<span class="token punctuation">,</span> mShrunkDistance<span class="token punctuation">,</span> mQueryShapeBoundsValid <span class="token operator">?</span> <span class="token operator">&amp;</span>mQueryShapeBounds <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// ------------------------- iterate over geometry subhits -----------------------------------</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>PxU32 iSubHit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> iSubHit <span class="token operator">&lt;</span> nbSubHits<span class="token punctuation">;</span> iSubHit<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 【step.5】进行检测后的再过滤 post-filter</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mIsCached <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mFilterCall <span class="token operator">||</span> mBfd<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>filterFlags <span class="token operator">&amp;</span> PxQueryFlag<span class="token operator">::</span>ePOSTFILTER<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>mFilterCall<span class="token punctuation">)</span> hitType <span class="token operator">=</span> mFilterCall<span class="token operator">-></span><span class="token function">postFilter</span><span class="token punctuation">(</span>mFilterData<span class="token punctuation">.</span>data<span class="token punctuation">,</span> hit<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token comment">// for iSubHit</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>由于 <strong>preFilter</strong> 和 <strong>postFilter</strong> 都是可以定制化规则的，这里也不再展开，下面主要来看一下高精度检测的代码。还是老样子，以 <strong>overlap</strong> 为例：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">GeomQueryAny</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">static</span> PX_FORCE_INLINE PxU32 <span class="token function">geomHit</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> NpSceneQueries<span class="token operator">&amp;</span> sceneQueries<span class="token punctuation">,</span> <span class="token keyword">const</span> MultiQueryInput<span class="token operator">&amp;</span> input<span class="token punctuation">,</span> <span class="token keyword">const</span> ShapeData<span class="token operator">&amp;</span> sd<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> PxGeometry<span class="token operator">&amp;</span> sceneGeom<span class="token punctuation">,</span> <span class="token keyword">const</span> PxTransform<span class="token operator">&amp;</span> pose<span class="token punctuation">,</span> PxHitFlags hitFlags<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>PxU32 maxHits<span class="token punctuation">,</span> HitType<span class="token operator">*</span> hits<span class="token punctuation">,</span> <span class="token keyword">const</span> PxReal shrunkMaxDistance<span class="token punctuation">,</span> PxBounds3<span class="token operator">*</span> precomputedBounds<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>HitTypeSupport<span class="token operator">&lt;</span>HitType<span class="token operator">></span><span class="token operator">::</span>IsOverlap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> GeomOverlapTable<span class="token operator">*</span> overlapFuncs <span class="token operator">=</span> sceneQueries<span class="token punctuation">.</span>mCachedOverlapFuncs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token function">PxU32</span><span class="token punctuation">(</span><span class="token class-name">Gu</span><span class="token operator">::</span><span class="token function">overlap</span><span class="token punctuation">(</span>geom0<span class="token punctuation">,</span> pose0<span class="token punctuation">,</span> geom1<span class="token punctuation">,</span> pose1<span class="token punctuation">,</span> overlapFuncs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">PX_ALWAYS_ASSERT_MESSAGE</span><span class="token punctuation">(</span><span class="token string">"Unexpected template expansion in GeomQueryAny::geomHit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>所有类型之间的 <strong>overlap</strong> 计算都存储在  <code>sceneQueries.mCachedOverlapFuncs</code>  函数表里：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 目前官方支持的种类如下，有兴趣可以一个个深挖的看实现</span></pre></td></tr><tr><td data-num="2"></td><td><pre>g_SweepMethodTable</pre></td></tr><tr><td data-num="3"></td><td><pre>g_ContactMethodTable</pre></td></tr><tr><td data-num="4"></td><td><pre>g_PCMContactMethodTable</pre></td></tr><tr><td data-num="5"></td><td><pre>GeomOverlapTable gGeomOverlapMethodTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>GeomOverlapCallback_SphereSphere<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="10"></td><td><pre>GeomOverlapCallback_SpherePlane<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="11"></td><td><pre>GeomOverlapCallback_SphereCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="12"></td><td><pre>GeomOverlapCallback_SphereBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="13"></td><td><pre>GeomOverlapCallback_SphereConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="14"></td><td><pre>GeomOverlapCallback_SphereMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="15"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="21"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="22"></td><td><pre>GeomOverlapCallback_PlaneCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="23"></td><td><pre>GeomOverlapCallback_PlaneBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="24"></td><td><pre>GeomOverlapCallback_PlaneConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="25"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="26"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="33"></td><td><pre>GeomOverlapCallback_CapsuleCapsule<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="34"></td><td><pre>GeomOverlapCallback_CapsuleBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="35"></td><td><pre>GeomOverlapCallback_CapsuleConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="36"></td><td><pre>GeomOverlapCallback_CapsuleMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="37"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="45"></td><td><pre>GeomOverlapCallback_BoxBox<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="46"></td><td><pre>GeomOverlapCallback_BoxConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="47"></td><td><pre>GeomOverlapCallback_BoxMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="48"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="57"></td><td><pre>GeomOverlapCallback_ConvexConvex<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="58"></td><td><pre>GeomOverlapCallback_ConvexMesh<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH//not used: mesh always uses swept method for midphase.</span></pre></td></tr><tr><td data-num="59"></td><td><pre>GeomOverlapCallback_HeightfieldUnregistered<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD//TODO: make HF midphase that will mask this</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="69"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="70"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eSPHERE</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::ePLANE</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCAPSULE</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eBOX</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eCONVEXMESH</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eTRIANGLEMESH</span></pre></td></tr><tr><td data-num="81"></td><td><pre>GeomOverlapCallback_NotSupported<span class="token punctuation">,</span><span class="token comment">//PxGeometryType::eHEIGHTFIELD</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>试想一下，<strong>overlap</strong> 操作实际上是计算一个物体是否会和其他空间内的对象发生重叠，本质上并没有 <strong>Block</strong> 和 <strong>Touch</strong> 的概念，因为不论是 <strong>Block</strong> 还是 <strong>Touch</strong>，最终都已经重叠了。</p><p>但对于 <strong>raycast</strong> 和 <strong>sweep</strong> 却不同，它们都有一个起始位置和运动路径，换句话说物体可能运动过程中就会被挡住而停下，因此会有一些不同的逻辑：</p><ul><li>需要计算出最近的 <strong>Block</strong> 碰撞点，这部分的检测算法相对比较复杂，以后有机会单独聊聊。</li><li>需要剔除「最近 <strong>Block</strong> 点」往后的所有命中点。</li></ul><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>至此，所有关于碰撞检测的执行流程，就已经基本清晰了。剩下的无外乎其他规则下的其他检测手法问题，大体流程近乎一致。</p><p>至于未曾展开的 Simulate 中的 Filter 规则以及更为复杂的碰撞实现算法：SAT、PCM、GJK、CCD 之后有机会再来介绍。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Collision" scheme="https://hakuya.me/tags/Collision/"/>
    
    <category term="UE4" scheme="https://hakuya.me/tags/UE4/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Simulate篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Simulate%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Simulate%E7%AF%87/</id>
    <published>2022-10-12T09:15:00.000Z</published>
    <updated>2022-12-29T01:36:04.546Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxsimulate篇开坑中"><a class="anchor" href="#physxsimulate篇开坑中">#</a> PhysX——Simulate 篇（开坑中...）</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Simulate" scheme="https://hakuya.me/tags/Simulate/"/>
    
  </entry>
  
  <entry>
    <title>「Scene Queries」AABBPruner</title>
    <link href="https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBPruner/"/>
    <id>https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBPruner/</id>
    <published>2022-09-16T08:01:00.000Z</published>
    <updated>2022-12-29T01:36:04.549Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="scene-queriesaabbpruner"><a class="anchor" href="#scene-queriesaabbpruner">#</a> 「Scene Queries」AABBPruner</h1><p>本篇基于 <strong>「Scene Queries」AABBTree</strong> 的扩展，阅读之前建议先了解 AABBTree。（￣︶￣）↗</p><p>如果说 AABBTree 是场景查询中最基础的数据结构，那么 <strong>AABBPruner</strong> 则是再此基础上进行了全方位的优化 ——<strong> 交替帧渲染</strong>。该理论的核心是同时存储画面 A 和画面 B，其中一个展示给用户，另一个则在后台渲染，等到渲染完成后，对两者进行替换，从而实现流畅的观看体验。同理，为了保证 AABBTree 能够<strong>时刻</strong>提供场景查询功能、保证增删改的实时性，同时还可以兼顾执行效率和空间利用率，这种<strong>交替帧渲染</strong>无疑是一个比较好的方案。</p><p>首先要明确的一点是，这种方案并不是必须的，即使不使用<strong>交替帧渲染</strong>，依旧可以实现场景查询以及实时增删改，只不过执行效率和空间利用率会比较低。</p><p>接下来就从 AABBPruner 基础结构开始一点点介绍其中的实现细节：</p><h2 id="aabbpruner-中的数据组成"><a class="anchor" href="#aabbpruner-中的数据组成">#</a> AABBPruner 中的数据组成</h2><p class="gallery" data-height="500"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915112214887.png" alt="" /></p><ul><li><strong>mAABBTree &amp;&amp; mNewTree</strong>：两棵 AABBTree。一棵是当前正在使用的 AABBTree，另一棵是正在后台构建中的 AABBTree。</li><li><strong>mBuilder</strong>：构建 mNewTree 时临时存储的构建配置信息。</li><li><strong>mBucketPruner</strong>：ExtendedBucketPruner 结构，负责对新增节点做增量构建的 IncrementAABBTree 管理结构。</li><li><strong>mPool</strong>：维护所有对象的 bound、shape、actor 关系，同时也是构建 AABBTree 和 IncrementAABBTree 的数据来源。</li><li><strong>mTreeMap &amp;&amp; mNewTreeMap</strong>：分别记录了 mAABBTree 和 mNewTree 中 bounds 和 AABBRuntimeNode 的映射关系。</li><li><strong>mCachedBoxes &amp;&amp; mNbCachedBoxes</strong>：临时缓存某个时刻 mPool 中的 bounds 数据，用来作为构建 mNewTree 的源数据。</li><li><strong>mTimeStamp</strong>：时间戳，每次构建新的 mNewTree 都会 + 1，也可以理解为帧号，区分不同时刻的修改。</li><li><strong>mNbCalls &amp;&amp; mRebuildRateHint &amp;&amp; mTotalWorkUnits &amp;&amp; mAdaptiveRebuildTerm</strong>：四个变量实现构建工作的预估<ul><li><strong>mNbCalls</strong>：表示当前构建耗费了多少 frame。</li><li><strong>mRebuildRateHint</strong>：表示预计需要多少 frame。</li><li><strong>mTotalWorkUnits</strong>：表示本次构建预计需要多少的工作量。</li><li><strong>mAdaptiveRebuildTerm</strong>：表示之前工作预估的准确性，该值会受到 mNbCalls &amp;&amp; mRebuildRateHint 影响，并影响 mTotalWorkUnits 计算。</li></ul></li><li><strong>mNewTreeFixups</strong>：记录 mNewTree 构建过程中被移除的包围盒和会被顶替到移除位置的包围盒下标。</li><li><strong>mToRefit</strong>：记录 mNewTree 构建过程中发生变化的包围盒下标。</li><li>mContextID：上下文 ID，一个 AABBPruner 持有一个，用来唯一标识。</li><li><strong>mNeedsNewTree</strong>：标识是否需要构建 mNewTree，在包围盒发生变化且支持增量构建（mIncrementalRebuild = true）的情况下，该标志为 true。</li><li><strong>mUncommittedChanges</strong>：标识有修改需要被 commit。commit 会让修改生效在 mAABBTree 上，如果 mNewTree 构建完成情况下还会进行树替换。并且在 commit 没有执行完毕的情况下，不允许执行查询操作。</li><li><strong>mIncrementalRebuild</strong>：是否支持增量构建的标记。不支持的情况下每次 commit 都会在当前帧内重新构建一棵新的 mAABBTree，否则会分布构建 mNewTree 并在构建完成后通过 commit 对 mAABBTree 进行替换。</li></ul><p>其中有几个陌生的结构之前没有提及，这里先简单的介绍一下：</p><h3 id="pruningpool"><a class="anchor" href="#pruningpool">#</a> PruningPool</h3><p><strong>PruningPool</strong> 有如下四个主要的存储结构：</p><ul><li><code>PxBounds3* mWorldBoxes</code> ：所有对象的 <strong>Bound</strong> 数据</li><li><code>PrunerPayload* mObjects</code> ：所有对象的 <strong>Shape</strong> 及 <strong>Actor</strong> 对象地址</li><li><code>PrunerHandle* mIndexToHandle</code> ：<strong>index</strong> 和 <strong>handle</strong> 的映射列表</li><li><code>PoolIndex* mHandleToIndex</code> ：<strong>handle</strong> 和 <strong>index</strong> 的映射列表</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220720190337717.png" alt="image-20220720190337717" width="960px" /></p><p><strong>PruningPool</strong> 用来存储 <strong>PrunerPayload</strong> 和 <strong>AABBBound</strong> 关联的对象列表，<strong>PrunerPayload</strong> 中存储了两个指针，分别指向 Bound 所属的 Shape 和 Actor。之前介绍 AABBTree 构建中 <strong>AABBTreeBuildParams.mAABBArray</strong> 的数据也来源于这里的 <strong>mWorldBoxes</strong>。</p><p>前三个数组是对齐的，同一下标获取到的信息同属于一个对象。而 <strong>mHandleToIndex</strong> 和 <strong>mIndexToHandle</strong> 形成了一组映射结构。外部通过 <strong>mHandleToIndex</strong> 访问内部数据，内部数据调整也需要同步修改 <strong>mIndexToHandle</strong> 映射关系，另外还有个 <strong>mFirstRecycledHandle</strong> 用于指向第一块空闲的 <strong>mHandleToIndex</strong>。</p><h4 id="removeobject"><a class="anchor" href="#removeobject">#</a> removeObject</h4><p><strong>PruningPool</strong> 移除对象有着一些特殊规则，很大程度也影响了整个 AABBPruner、AABBTree、IncrementAABBTree 的实现。</p><p>移除对象的时候被删除节点对应的 <strong>mHandleToIndex</strong> 会头插到 <strong>mFirstRecycledHandle</strong> 指向的单链表。这时候 mObjects 、mWorldBoxes、mIndexToHandle 可能会因为删除操作而导致内存不连续。为了保证连续（连续性会影响拷贝和遍历）会把最后一个元素用于填补空缺，因此还有一个替换操作。</p><p>例如这里删除掉第 1 个包围盒，然后用第 3 个进行替换：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915154531718.png" alt="image-20220915154531718" width="960px" /></p><p>这种替换操作可以使得「空间分布比较紧凑」、「移除节点的复杂度 O (1)，不需要对所有后置数据做平移」，代价是打乱了 mWorldBoxes 内两个包围盒的位置，而 AABBTree 和 IncrementAABBTree 的构建都会记录 Box 的位置用于访问，位置变更了需要批量修改非常麻烦，因此还单独维护了一个 mHandleToIndex，这样外部只需要记录 mHandleToIndex 下标即可，无需担心内部的位置发生变化。</p><blockquote><p>风险点：可以看到 <strong>mHandleToIndex</strong> 存储的内容可能是自己的下一个空闲节点也可能是 <strong>mIndexToHandle</strong> 下标，两者的数值可能相同，然而访问 Pool 的时候是通过 <strong>Handle</strong> 下标来的，因此很可能明明是个空闲节点，但依旧可能访问到数据。例如 <strong>mHandleToIndex[2]</strong> 和 <strong>mHandleToIndex[3]</strong> 最终都会指向 <strong>mIndexToHandle[1]</strong>，这点上 PhysX 并没有增加严格的保护手段。</p></blockquote><h3 id="extendedbucketpruner"><a class="anchor" href="#extendedbucketpruner">#</a> ExtendedBucketPruner</h3><p>ExtendedBucketPruner 中比较关键的结构是 MainTree 、MergedTree，以及 PrunerCore。</p><p class="gallery" data-height="650"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915113422926.png" alt="" /></p><ul><li><p><strong>mMergedTrees</strong>：其中 mMergedTrees 是一棵棵的 AABBTree。因为 PhysX 不仅支持向场景内添加单个 Actor，还支持多个 Actor 打包成 PruningStructure 添加到场景，这里就不做过多展开，简单理解就是除了支持添加一个树节点以外，还支持添加整棵树，mMergedTrees 就是那个存储树的结构。</p></li><li><p><strong>mMainTree</strong>：mMainTree 也是一棵 AABBTree，构建的数据是基于所有 MergedTree 的根节点包围盒。由于数据量不大，因此每次新增或者删除 MergedTree 的时候都会进行全量重建。</p></li></ul><h4 id="incrementalaabbprunercoreprunercore"><a class="anchor" href="#incrementalaabbprunercoreprunercore">#</a> IncrementalAABBPrunerCore(PrunerCore)</h4><p class="gallery" data-height="260"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915120122464.png" alt="" /></p><p>简单来说 IncrementalAABBPrunerCore 存储了两棵 CoreTree，每个 CoreTree 内维护了一棵 IncrementalAABBTree 所需的全部数据，至于为什么是两棵，我们后面再说。</p><ul><li><strong>mChangedLeaves</strong>：用来记录每次变更操作导致映射关系发生改变的节点。并在变更操作执行完毕后更新 CoreTree 的 mapping 映射。</li><li>mPool：指向的是 AABBPruner.mPool。</li><li>mCurrentTree &amp;&amp; mLastTree：标识当前使用的树和上次用过的树下标。因为只有两棵树，其实理论上记录一个就可以了。</li></ul><h5 id="coretree"><a class="anchor" href="#coretree">#</a> CoreTree</h5><p class="gallery" data-height="200"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915150500991.png" alt="" /></p><p>CoreTree 比较简单，存储了一个 IncrementAABBTree、一个 bound 到 TreeNode 的映射，以及这棵树最后一次修改的时间戳。时间戳是用来评估这棵树的有效性的，这个后面交替渲染部分再做介绍。</p><h4 id="extendedbucketpruner-结构图"><a class="anchor" href="#extendedbucketpruner-结构图">#</a> ExtendedBucketPruner 结构图</h4><p>下图是一张简单版的 ExtendedBucketPruner 结构图，为方便更好的理解省去了很多细节：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915151747529.png" alt="image-20220915151747529" width="960px" /></p><p>如果新增的是整棵树，那么把该树添加到 MergedTree 并重新构建 MainTree。如果新增的是某个节点，那么就添加到 PrunerCore 中的 IncrementAABBTree 内。</p><h3 id="newtreefixup"><a class="anchor" href="#newtreefixup">#</a> NewTreeFixup</h3><p class="gallery" data-height="160"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915152038177.png" alt="" /></p><p>NewTreeFixup 用来记录删除包围盒操作所影响的两个包围盒下标。至于为什么是两个，之前在 PruningPool 中也有简单的介绍，为了保证数组连续，会用末尾的数据填充到删除位置，因此删除操作实际上是一次替换，把最后一个位置的数据替换到删除位置，所以这里需要记录两个下标。具体删除细节可以回顾一下 <strong>PruningPool.removeObject</strong>。</p><h2 id="aabbpruner-的增删改"><a class="anchor" href="#aabbpruner-的增删改">#</a> AABBPruner 的增删改</h2><p>AABBPruner 增删改操作本质是都是对 AABBTree &amp;&amp; IncrementAABBTree 的封装，具体实现细节其实已经在 AABBTree 和 IncrementAABBTree 做了详细介绍，这里主要是基于更上一层的规则进行梳理：</p><h3 id="不考虑交替帧渲染的情况"><a class="anchor" href="#不考虑交替帧渲染的情况">#</a> 不考虑交替帧渲染的情况</h3><p>为了方便讨论，先介绍一下不做交替帧渲染情况下 AABBPruner 如何增删改的，以下讨论均建立在 <strong>mIncrementalRebuild = true</strong> 的情况下。</p><p>下图是简化后的 AABBPruner 结构图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915160705507.png" alt="image-20220915160705507" width="800px" /></p><p>实际用到的结构只有 mAABBTree (AABBTree) &amp;&amp; ExtendedBucketPruner.PrunerCore.CurTree (IncrementAABBTree) 两个。</p><h4 id="新增操作"><a class="anchor" href="#新增操作">#</a> 新增操作</h4><p>由于 mAABBTree 只支持树级别的新增，<strong>并不支持节点的新增操作</strong>，因此新增逻辑的支持交给了 ExtendedBucketPruner.PrunerCore.CurTree。具体实现细节可以回顾 AABBTree 篇的 IncrementAABBTree 部分。</p><h4 id="删除操作"><a class="anchor" href="#删除操作">#</a> 删除操作</h4><p>删除操作其实分为两种情况：</p><ul><li>删除在 mAABBTree 中的节点。</li><li>删除在 ExtendedBucketPruner.PrunerCore.CurTree 中的节点。</li></ul><p>辨别方法也比较简单，AABBPruner 里面的 <strong>mTreeMap</strong> 维护了 mAABBTree 包含的全部 bound 映射，如果该映射关系内没有找到被删除的包围盒，那就一定在 ExtendedBucketPruner.PrunerCore.CurTree 里，删除细节也可以参考 AABBTree &amp;&amp; IncrementAABBTree。</p><h4 id="更新操作"><a class="anchor" href="#更新操作">#</a> 更新操作</h4><p>更新和删除比较相似，这里也不多介绍。</p><h3 id="交替帧渲染的情况"><a class="anchor" href="#交替帧渲染的情况">#</a> 交替帧渲染的情况</h3><p>引入交替帧渲染后，情况就变得复杂起来，再介绍增删改之前，先介绍一下 AABBPruner 内的 buildStep 和 commit 的构建流程。</p><h4 id="支持分布构建-buildstep"><a class="anchor" href="#支持分布构建-buildstep">#</a> 支持分布构建 buildStep</h4><p>最早提到分布构建还是在 AABBTree 的 <strong>progressiveBuild</strong> 中，这里对 AABBTree 的分布构建做了一定程度的扩展，先来看看分布构建的流程：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220916101411349.png" alt="image-20220916101411349" width="500px" /></p><ul><li>BUILD_NOT_STARTED：表示还没有构建的状态，也是 AABBPruner 的初始状态。</li><li>BUILD_INIT：该状态下，会对 mPool.mWorldBoxes 做一个深拷贝，并记录在 mCachedBoxes 中，作为新树构建的源数据。</li><li>BUILD_IN_PROGRESS：拿到源数据之后，就可以开始构建 mNewTree。AABBPruner 会通过一种启发式算法控制构建次数实现平滑。</li><li>BUILD_NEW_MAPPING：无操作。</li><li>BUILD_FULL_REFIT：构建完成，需要重新生成一次 mapping 关系，并记录在 mNewTreeMap。</li><li>BUILD_LAST_FRAME：有了映射关系，这里会再计算并更新一次树节点的包围盒信息 <strong>fullRefit</strong>。</li><li>BUILD_FINISHED：无操作。</li><li>BUILD_COMMIT：这并不是一个状态，而是 commit 函数，放在这里主要是便于理解。commit 目的是能够让构建结果应用在 mAABBTree 中，类比交替帧渲染里渲染好了，需要执行交替步骤。</li></ul><h5 id="启发式的平滑算法"><a class="anchor" href="#启发式的平滑算法">#</a> 启发式的平滑算法</h5><p>如何有效的评估构建耗时并且尽可能的平滑结果，AABBPruner 定义了一个预估次数 <strong>mRebuildRateHint</strong>，默认情况下是 100 frame，可以支持动态设置。</p><p><strong>mRebuildRateHint</strong> 仅仅是一个<strong>预估值</strong>，这也意味着很可能并非实际结果，为了趋近于预估又引入了三个系数：mNbCalls、mTotalWorkUnits、mAdaptiveRebuildTerm。</p><ul><li>mNbCalls 记录的是本次构建实际消耗了多少 frame。</li><li>mAdaptiveRebuildTerm 是一个调节参数，如果实际结果超过预期说明估少了，那么就 + 1 反之 - 1，如果和上次构建的工作单元差距过大，这个值会被重置。</li><li>mTotalWorkUnits 总工作单元可以理解为一次完整构建，需要访问的包围盒次数，例如 8 个包围盒最终构建出如下的树形结构，那么总工作单元就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mo>+</mo><mn>5</mn><mo>=</mo><mn>13</mn></mrow><annotation encoding="application/x-tex">8 + 5 = 13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>，<strong>这里并不计算叶节点层</strong>。当然计算实际总工作单元没有任何意义，我们需要的是预估值，这里的计算公式大概长这样：<ul><li>leafnb：叶节数量。</li><li>depth：预估的树深度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mi>n</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log_2(leafnb)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 。这里假设这棵树是完全平衡的。</li><li>mTotalWorkUnits：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>W</mi><mi>o</mi><mi>r</mi><mi>k</mi><mi>U</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>s</mi><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo>∗</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mi>n</mi><mi>b</mi><mo>+</mo><mi>A</mi><mi>d</mi><mi>a</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>b</mi><mi>u</mi><mi>i</mi><mi>l</mi><mi>d</mi><mi>T</mi><mi>e</mi><mi>r</mi><mi>m</mi><mo>∗</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mi>n</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TotalWorkUnits = max(0, depth * leafnb + AdaptiveRebuildTerm * leafnb)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal">n</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal">b</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 。实际会比这个复杂一些，还会参考上一次构建时的估计结果。</li></ul></li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915163943905.png" alt="image-20220915163943905" width="500px" /></p><h4 id="为什么需要构建新树"><a class="anchor" href="#为什么需要构建新树">#</a> 为什么需要构建新树🤔</h4><p>回到之前的「不交替渲染」，它也可以很好的工作，支持增删改查。为什么还要大费周章构建新的 AABBTree 呢？</p><ul><li>极端情况下，mAABBTree 的节点会全部被删除，AABBPruner 会退化成 IncrementAABBTree，在 AABBTree 章节也介绍了 IncrementAABBTree 远比 ABBTree 更加的占用内存，而且低效，唯一的优势只有支持新增节点。</li><li>删除的 mAABBTree 节点不会被回收，因此会造成内存碎片。</li><li>IncrementAABBTree 作为新增节点的<strong>暂存器</strong>，每次构建新树的时候会把 IncrementAABBTree 的节点也纳入构建，在构建完成后可以清空 IncrementAABBTree，因此频繁构建新树的情况下，IncrementAABBTree 内的节点会非常少。</li><li>构建操作虽然较为耗时，但只要能够做到很好的平滑，实际上可以减轻对于性能的开销。</li></ul><h4 id="如何保证构建新树时查询功能依旧可用"><a class="anchor" href="#如何保证构建新树时查询功能依旧可用">#</a> 如何保证构建新树时查询功能依旧可用</h4><p>可以看到构建一个新树大概需要 100 frame，这段时间里如何保证场景查询还是可靠的呢？回到之前的不交替渲染，实际上已经能够支持在运行过程中增删改了。AABBPruner 为了保证可用性的情况下为很多数据都做了副本，例如 <strong>mAABBTree &amp;&amp; mNewTree</strong>、<strong>mTreeMap &amp;&amp; mNewTreeMap</strong>、<strong>mPool.mWorldBoxes &amp;&amp; mCachedBoxes</strong>，就是为了保证构建和查询完全分离。因此在支持交替渲染情况下的 AABBPruner 可能就长这样：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220916110229854.png" alt="image-20220916110229854" width="800px" /></p><p>mAABBTree + CoreTree (Last) + CoreTree (Cur) 保证了增删改查的实时性，mNewTree 构建数据源于 mAABBTree + CoreTree (Last)。因此在每次构建完成后，mAABBTree 的内容会被替换成 mNewTree，相应的 CoreTree (Last) 将会失效，而 CoreTree (Cur) 将会在下一次 mNewTree 构建开始时切换为 CoreTree (Last)。</p><h4 id="如何保证新树的一致性"><a class="anchor" href="#如何保证新树的一致性">#</a> 如何保证新树的一致性</h4><p>思考这样一个问题，假设物体的包围盒一直更新，mNewTree 就用永远都是旧的。最直接的一个例子：BUILD_INIT 状态下会拷贝 mPool.mWorldBoxes 结果构建 mNewTree，这个构建可能持续大概 100 frame，中途新的变更例如删除、添加和更新并不会影响 mNewTree，所以它还是停留在 100 frame 之前的状态，如果这时候进行替换，将会丢失这 100 frame 的全部操作。这显然是无法接受的。</p><p>AABBPruner 做法是保存这 100 frame 的全部操作，在新树构建完成时进行应用：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220915172752137.png" alt="image-20220915172752137" width="600px" /></p><h5 id="新增操作的存储"><a class="anchor" href="#新增操作的存储">#</a> 新增操作的存储</h5><p>前面提到 IncrementAABBTree 会在新树构建完成后被清理，并且节点新增都会存储在 IncrementAABBTree 内。如果把 IncrementAABBTree  作为存储新增操作的容器，则需要至少两个 IncrementAABBTree。一个是旧的 IncrementAABBTree，数据是构建开始时刻的；另一个是构建过程中新增的，也就是本次构建开始到下次构建开始的所有新增内容，旧的会在本次构建完成后清空，新的则会保留到下次构建结束。这也是为什么会有 CoreTree (Cur) 和 CoreTree (Last)。</p><h5 id="删除操作的存储"><a class="anchor" href="#删除操作的存储">#</a> 删除操作的存储</h5><p>删除操作很难对两棵树做差进行求解，最简单的办法就是存储一个操作记录，类比数据库迁移和数据恢复。AABBPruner 会把删除记录存储在 mNewTreeFixups，然后在新树构建完成后把这些删除操作再执行一次，用于保证和当前数据的一致。</p><h5 id="更新操作的存储"><a class="anchor" href="#更新操作的存储">#</a> 更新操作的存储</h5><p>更新其实类似，会记录需要更新的包围盒下标数组 mToRefit。有一点需要注意，由于 mNewTree 构建流程中本身就会执行一次全量更新 <strong>fullRefit</strong>。因此可以利用这个更新提前先把一部分的修改应用在 mNewTree 中，因此更新其实分成了两部分：</p><ul><li>在 BUILD_LAST_FRAME 下的更新：这里的更新稍微取巧了一下，没有把更新记录在 mToRefit 内，而是直接用的 mPool.mWorldBoxes 作为数据源更新的 mNewTree，好处是可以省去 mToRefit 记录的差量，直接从<strong>差值更新</strong>转为<strong>全量更新</strong>了，但是这样实际上会有一个问题。试想一下，一棵用 mCachedBoxes 构建的新树，再用 mPool.mWorldBoxes 去更新，中间差了大约 100 frame，这 100 frame 内的新增操作由于是记录在 IncrementAABBTree 里的，所以可以忽略；但删除却不行，而且删除操作会影响 bound 到 TreeNode 的映射，会导致更新的时候错乱。因此，为了解决删除时映射不一致的情况，这里会提前处理一次 mNewTreeFixups 内的删除记录，然后再做更新。</li><li>在 COMMIT 下的更新：commit 更新就不需要全量更新了，因此可以通过<strong>差值更新</strong>实现，这时候 mToRefit 才算是真真意义上的派上用场。</li></ul><h2 id="aabbpruner-的查询"><a class="anchor" href="#aabbpruner-的查询">#</a> AABBPruner 的查询</h2><p>最后让我们再看看 AABBPruner 的查询。查询接口主要有三个 raycast、sweep 和 overlap，但这里并不打算过分展开，我们仅探讨查询时需要考虑那些数据。</p><p>首先，我们已经有了足够实时的 mAABBTree，删改操作可以立马在上面得到体现；以及支持新增节点的 PrunerCore。 PrunerCore 的两棵 IncrementAABBTree 存储了不同时间段的新增节点，但即便如此它们<strong>两个都是有效的</strong>，因此所有的查询都必须<strong>查找 PrunerCore 内的两棵树以及 mAABBTree</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 先查 mAABBTree</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>mAABBTree<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>again <span class="token operator">=</span> AABBTreeRaycast<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> AABBTree<span class="token punctuation">,</span> AABBTreeRuntimeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mPool<span class="token punctuation">.</span><span class="token function">getObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPool<span class="token punctuation">.</span><span class="token function">getCurrentWorldBoxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>mAABBTree<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> <span class="token function">PxVec3</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 再查 mBucketPruner</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>again <span class="token operator">&amp;&amp;</span> mIncrementalRebuild <span class="token operator">&amp;&amp;</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">getNbObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>again <span class="token operator">=</span> mBucketPruner<span class="token punctuation">.</span><span class="token function">raycast</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxAgain <span class="token class-name">ExtendedBucketPruner</span><span class="token operator">::</span><span class="token function">raycast</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> origin<span class="token punctuation">,</span> <span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> unitDir<span class="token punctuation">,</span> PxReal<span class="token operator">&amp;</span> inOutDistance<span class="token punctuation">,</span> PrunerCallback<span class="token operator">&amp;</span> prunerCallback<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>PxAgain again <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 先查 mBucketPruner.mPrunerCore</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>mPrunerCore<span class="token punctuation">.</span><span class="token function">getNbObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>again <span class="token operator">=</span> mPrunerCore<span class="token punctuation">.</span><span class="token function">raycast</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> prunerCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 在查 mBucketPruner.mMergedTrees</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>again <span class="token operator">&amp;&amp;</span> mExtendedBucketPrunerMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">const</span> PxVec3 <span class="token function">extent</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// main tree callback</span></pre></td></tr><tr><td data-num="14"></td><td><pre>MainTreeRaycastPrunerCallback<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">></span> <span class="token function">pcb</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> extent<span class="token punctuation">,</span> prunerCallback<span class="token punctuation">,</span> mPruningPool<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// traverse the main tree</span></pre></td></tr><tr><td data-num="16"></td><td><pre>again <span class="token operator">=</span> AABBTreeRaycast<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> AABBTree<span class="token punctuation">,</span> AABBTreeRuntimeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> PrunerPayload<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>mMergedTrees<span class="token punctuation">)</span><span class="token punctuation">,</span> mBounds<span class="token punctuation">,</span> <span class="token operator">*</span>mMainTree<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> extent<span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">return</span> again<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到 mBucketPruner.mPrunerCore 两棵树都需要进行查询：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span>PxU32 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_TREES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> CoreTree<span class="token operator">&amp;</span> tree <span class="token operator">=</span> mAABBTree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>tree <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">.</span>tree<span class="token operator">-></span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> again<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        again <span class="token operator">=</span> AABBTreeRaycast<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> IncrementalAABBTree<span class="token punctuation">,</span> IncrementalAABBTreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mPool<span class="token operator">-></span><span class="token function">getObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mPool<span class="token operator">-></span><span class="token function">getCurrentWorldBoxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>tree<span class="token punctuation">.</span>tree<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> unitDir<span class="token punctuation">,</span> inOutDistance<span class="token punctuation">,</span> <span class="token function">PxVec3</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pcb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其实还有一个结构之前一直忽略了，那就是 mBucketPruner.mMergedTrees，不聊它是因为真的不是很重要 (bushi。</p><p>其实是应用场景比较少，不过还是简单介绍一下吧，mBucketPruner.mMergedTrees 的查询会先用 mMainTree 定位根节点，再通过对应的 mergedTree 查询。</p><p>另外和 CoreTree 类似，在 mNewTree 构建的时候，也会把 mMergedTrees 加入构建，并在构建完成后清理 mMergedTrees。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>本章节介绍了 AABBPruner 的实现细节，简单介绍了 <strong>AABBTreeUpdateMap</strong>，顺带填了一波 AABBTree &amp;&amp; IncrementAABBTree 中 <strong>AABBTreeBuildParams</strong> 由来的坑，并梳理了一下 AABBPruner 是如何协调 AABBTree &amp;&amp; IncrementAABBTree，通过分布构建的形式进行削峰。另外上述的讨论都是基于 <strong>mIncrementalRebuild=true</strong> 情况下，有兴趣的小伙伴可以自己思考一下关闭 mIncrementalRebuild 情况下，AABBPruner 又是如何呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="AABBPruner" scheme="https://hakuya.me/tags/AABBPruner/"/>
    
    <category term="Scene Queries" scheme="https://hakuya.me/tags/Scene-Queries/"/>
    
  </entry>
  
  <entry>
    <title>「Scene Queries」AABBTree——下</title>
    <link href="https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBTree%E2%80%94%E2%80%94%E4%B8%8B/"/>
    <id>https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBTree%E2%80%94%E2%80%94%E4%B8%8B/</id>
    <published>2022-08-30T07:33:00.000Z</published>
    <updated>2022-12-29T01:36:04.550Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="scene-queriesaabbtree下"><a class="anchor" href="#scene-queriesaabbtree下">#</a> 「Scene Queries」AABBTree—— 下</h1><p>下篇主要介绍 AABBTree 的增量版本 ——<strong>IncrementalAABBTree</strong>。阅读本文之前建议请先了解 <strong>「Scene Queries」AABBTree—— 上</strong>，不然很可能看的迷迷糊糊 (～￣▽￣)～</p><p><strong>IncrementalAABBTree</strong> 相比于 <strong>AABBTree</strong> 最大的区别在于支持了插入删除时能够动态更新树结构（旋转操作，并且由于动态特性，一定程度上简化了数据结构，没那么扣扣嗖嗖了～</p><h2 id="incrementalaabbtree-数据组成"><a class="anchor" href="#incrementalaabbtree-数据组成">#</a> IncrementalAABBTree 数据组成</h2><p>比较简单，只有四个结构：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>Ps<span class="token operator">::</span>Pool<span class="token operator">&lt;</span>AABBTreeIndices<span class="token operator">></span>                   mIndicesPool<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Ps<span class="token operator">::</span>Pool<span class="token operator">&lt;</span>IncrementalAABBTreeNodePair<span class="token operator">></span>       mNodesPool<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>IncrementalAABBTreeNode<span class="token operator">*</span>                    mRoot<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>NodeAllocator                               mNodeAllocator<span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>mIndicesPool：AABBTree.mIndices 的池化版本，支持动态增删，至于 <strong>AABBTreeIndices</strong>，稍后再做介绍。</li><li>mNodesPool：和 AABBTree.mRuntimePool 比较相似，都是存储最终构建的结果，不过为了支持动态增删做了一定程度的妥协，所以内存布局没那么紧凑，<strong>IncrementalAABBTreeNodePair</strong> 就是两个 <strong>IncrementalAABBTreeNode</strong> 的结构体。</li><li>mRoot：根节点。</li><li>mNodeAllocator：参考 AABBTree，功能用法完全一致。</li></ul><h3 id="aabbtreeindices"><a class="anchor" href="#aabbtreeindices">#</a> AABBTreeIndices</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">AABBTreeIndices</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    PxU32               nbIndices<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    PoolIndex           indices<span class="token punctuation">[</span>NB_OBJECTS_PER_NODE<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>nbIndices：记录节点内包围盒数量，有点类似 AABBTreeBuildNode.mNbPrimitives。</li><li>indices：记录每个包围盒对应于 AABBTreeBuildParams.mAABBArray 中下标。</li></ul><h3 id="incrementalaabbtreenode"><a class="anchor" href="#incrementalaabbtreenode">#</a> IncrementalAABBTreeNode</h3><p>功能上和 <strong>AABBTreeRuntimeNode</strong> 近似，表示 <strong>IncrementalAABBTree</strong> 最小单位。不过节点大小是 <strong>AABBTreeRuntimeNode</strong> 的两倍（28 vs 56）。</p><p class="gallery" data-height="300"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220830094305558.png" alt="" /></p><ul><li><p>mBVMax &amp;&amp; mBVMin：节点包围盒数据。</p></li><li><p>mParent：父节点指针。</p></li><li><p><strong>mChilds[2] / mIndices</strong>：union 类型。如果是非叶节点情况下，通过 <strong>mChilds[2]</strong> 指向左右子节点；如果是叶节点通过 <strong>mIndices</strong> 标识包围盒所在位置。辨别是否为叶节点可以通过 <strong>mChilds[1]</strong> 是否为 0 判定，因为两者都是指针类型，<strong>mIndices</strong> 只用到了第一个指针因此第二个是空缺的。</p></li></ul><h2 id="incrementalaabbtree-构建流程"><a class="anchor" href="#incrementalaabbtree-构建流程">#</a> IncrementalAABBTree 构建流程</h2><p>IncrementalAABBTree 构建流程和 AABBTree 几乎一样，都是通过 <strong>AABBTreeBuildNode</strong> 的  <code>_buildHierarchy</code>  函数实现。具体细节可以参考 <strong>AABBTree—— 上</strong>，这里不再赘述。构建完成后有一个  <code>clone</code>  操作。</p><h3 id="clone"><a class="anchor" href="#clone">#</a> clone</h3><p>这一步主要是把 <strong>AABBTreeBuildNode</strong> 树形结构转为 <strong>IncrementalAABBTreeNode</strong> 树形结构，有点和  <code>flatten</code>  相同的意味。顺带还会生成一个 map 结构，用来映射 <strong>mAABBArray</strong> 下标和 <strong>IncrementalAABBTreeNode</strong> 对应叶节点指针，和 <strong>AABBTreeUpdateMap</strong> 比较相近。</p><h3 id="incrementalaabbtree-结构图"><a class="anchor" href="#incrementalaabbtree-结构图">#</a> IncrementalAABBTree 结构图</h3><p>最终构建完成后，mNodesPool 存储所有节点信息，<strong>叶节点</strong>还会关联到 mIndicesPool 中的 AABBTreeIndices，由于每个叶节点最多存储 4 个包围盒信息，因此 AABBTreeIndices 中又记录了每个包围盒的 bounds 下标。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220830110320411.png" alt="image-20220830110320411" width="800px" /></p><h2 id="incrementalaabbtree-增删改"><a class="anchor" href="#incrementalaabbtree-增删改">#</a> IncrementalAABBTree 增删改</h2><p>IncrementalAABBTree 的增删改操作本身并不复杂，但是为了提高二叉树的查找效率，在变更二叉树节点的同时还需要考虑树的平衡性。</p><p>因此在介绍增删改之前，先来看看 IncrementalAABBTree 如何平衡化的：</p><h3 id="incrementalaabbtree-平衡性"><a class="anchor" href="#incrementalaabbtree-平衡性">#</a> IncrementalAABBTree 平衡性</h3><p>如何衡量一棵树是否平衡？常规的二叉树通过树的左右子树层级作为指标，如果两者<strong>层级相差超过一层</strong>则进行平衡（rotate）。</p><p>不过 AABBTree 的划分标准有所不同：由于 AABBTree 的构建是基于包围盒包含关系来的，因此平衡性的标准也需要有所调整。为了尽可能保证查找时所有叶节点命中的概率尽可能相似，使得 AABBTree 在抽象层面更加扁平。而查找的命中和 AABB 节点包围盒的「体积」成正相关，因此体积大小就成了衡量 AABBTree 平衡的标准。</p><h4 id="相关概念"><a class="anchor" href="#相关概念">#</a> 相关概念</h4><p>在介绍平衡性和旋转之前，先了解一些名字术语：</p><ul><li><strong>largerNode &amp;&amp; smallerNode</strong>：通常情况下，两个兄弟节点里其中一个的体积如果超过另一个的 <strong>3</strong> 倍，那么就把体积大的称为 largerNode，体积小的称为 smallerNode。</li><li><strong>closestNode &amp;&amp; remainingNode</strong>：如果已知一个 largerNode 和 smallerNode，那么 largerNode 中最靠近 smallerNode 的<strong>叶节点</strong>被称为 closestNode ，而 closestNode 的兄弟节点则叫做 remainingNode。</li><li><strong>spotNode</strong>：表示 smallerNode 中最靠近 closestNode 的叶节点。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220830113553528.png" alt="image-20220830113553528" width="800px" /></p><h4 id="traversaldirection-rotatetree"><a class="anchor" href="#traversaldirection-rotatetree">#</a> traversalDirection &amp;&amp; rotateTree</h4><p>traversalDirection 操作用于检测两个兄弟节点是否平衡，并且计算出兄弟节点中距离测试点最近的和体积较大的。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_FORCE_INLINE <span class="token keyword">static</span> PxU32 <span class="token function">traversalDirection</span><span class="token punctuation">(</span><span class="token keyword">const</span> IncrementalAABBTreeNode<span class="token operator">&amp;</span> child0<span class="token punctuation">,</span> <span class="token keyword">const</span> IncrementalAABBTreeNode<span class="token operator">&amp;</span> child1<span class="token punctuation">,</span> <span class="token keyword">const</span> Vec4V<span class="token operator">&amp;</span> testCenterV<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">bool</span> testRotation<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> rotateNode<span class="token punctuation">,</span> PxU32<span class="token operator">&amp;</span> largesRotateNode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// traverse in the direction of a node which is closer</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// we compare the node and object centers</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> Vec4V centerCh0V <span class="token operator">=</span> <span class="token function">V4Add</span><span class="token punctuation">(</span>child0<span class="token punctuation">.</span>mBVMax<span class="token punctuation">,</span> child0<span class="token punctuation">.</span>mBVMin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> Vec4V centerCh1V <span class="token operator">=</span> <span class="token function">V4Add</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>mBVMax<span class="token punctuation">,</span> child1<span class="token punctuation">.</span>mBVMin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> Vec4V ch0D <span class="token operator">=</span> <span class="token function">V4Sub</span><span class="token punctuation">(</span>testCenterV<span class="token punctuation">,</span> centerCh0V<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> Vec4V ch1D <span class="token operator">=</span> <span class="token function">V4Sub</span><span class="token punctuation">(</span>testCenterV<span class="token punctuation">,</span> centerCh1V<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>testRotation<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// if some volume is 3x larger than we do a rotation</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">float</span> volumeCompare <span class="token operator">=</span> <span class="token number">3.0f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">PX_ALIGN</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> PxVec4<span class="token punctuation">)</span> sizeCh0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">PX_ALIGN</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> PxVec4<span class="token punctuation">)</span> sizeCh1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> Vec4V sizeCh0V <span class="token operator">=</span> <span class="token function">V4Sub</span><span class="token punctuation">(</span>child0<span class="token punctuation">.</span>mBVMax<span class="token punctuation">,</span> child0<span class="token punctuation">.</span>mBVMin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> Vec4V sizeCh1V <span class="token operator">=</span> <span class="token function">V4Sub</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>mBVMax<span class="token punctuation">,</span> child1<span class="token punctuation">.</span>mBVMin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">V4StoreA</span><span class="token punctuation">(</span>sizeCh0V<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sizeCh0<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">V4StoreA</span><span class="token punctuation">(</span>sizeCh1V<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sizeCh1<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">float</span> volumeCh0 <span class="token operator">=</span> sizeCh0<span class="token punctuation">.</span>x<span class="token operator">*</span>sizeCh0<span class="token punctuation">.</span>y<span class="token operator">*</span>sizeCh0<span class="token punctuation">.</span>z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">float</span> volumeCh1 <span class="token operator">=</span> sizeCh1<span class="token punctuation">.</span>x<span class="token operator">*</span>sizeCh1<span class="token punctuation">.</span>y<span class="token operator">*</span>sizeCh1<span class="token punctuation">.</span>z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>volumeCh0<span class="token operator">*</span>volumeCompare <span class="token operator">&lt;</span> volumeCh1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>volumeCh1<span class="token operator">*</span>volumeCompare <span class="token operator">&lt;</span> volumeCh0<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>largesRotateNode <span class="token operator">=</span> <span class="token punctuation">(</span>volumeCh0 <span class="token operator">></span> volumeCh1<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0u</span> <span class="token operator">:</span> <span class="token number">1u</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>rotateNode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">const</span> BoolV con <span class="token operator">=</span> <span class="token function">FIsGrtr</span><span class="token punctuation">(</span><span class="token function">V4Dot3</span><span class="token punctuation">(</span>ch0D<span class="token punctuation">,</span> ch0D<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">V4Dot3</span><span class="token punctuation">(</span>ch1D<span class="token punctuation">,</span> ch1D<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">BAllEqTTTT</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">PxU32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">PxU32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>rotateTree 用来对树进行旋转。旋转的大体流程可以分为以下几个步骤：</p><ul><li>【step.1】找出 largerNode 中最靠近 smallerNode 的叶节点 closestNode。</li><li>【step.2】找出 smallerNode 中最靠近 closestNode 的叶节点 spotNode。</li><li>【step.3】把 closestNode 合并到 spotNode，并调整 remainingNode 和 largerNode 的父子关系。到此第一步旋转就算完成了～</li><li>【step.4】由于 spotNode 合并了 closestNode 后体积发生了较大变化，因此需要对 smallerNode 整体做个扫描，判定需不需要再旋转一次。如果需要的话，重复【step.1~3】。</li></ul><p>调整 remainingNode 和 largerNode 的父子关系可能出现两种情况：</p><ul><li>remainingNode 是叶节点。</li><li>remainingNode 是非叶节点。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220830115816487.png" alt="image-20220830115816487" width="1200px" /></p><p>把 closestNode 合并到 spotNode 同样也存在两种情况：</p><ul><li>spotNode 合并了 closestNode 之后容量没超过上限。</li><li>spotNode 合并了 closestNode 之后容量超过上限。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220830120147788.png" alt="image-20220830120147788" width="1000px" /></p><p>讨论完 rotateTree，整个增删改操作就变得较为简单：</p><ul><li>增：查询距离插入包围盒最近叶节点进行插入，有点类似节点合并。插入完成后如果发现节点需要平衡化，还会进行一次 rotateTree。</li><li>删：删除其实更为简单，前面提到构建时有一个 map 映射，可以直接定位到对应叶节点进行删除，如果叶节点删除后为空，则再执行一次树结构调整，把兄弟节点替换掉父节点即可。</li><li>改：该操作有两种模式  <code>update</code>  &amp;&amp;  <code>updateFast</code> 。更新操作本质上是「删」、「增」操作的组合。 <code>updateFast</code>  则是先对变更后的包围盒和原本的叶节点包围盒做一次相交性检查，如果相交的情况，则仅更新包围盒大小，不调整节点排布，应该是为了应对包围盒在小范围内移动的情况下，导致 IncrementalAABBTree 频繁增删而做的优化。</li></ul><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>到此，IncrementalAABBTree 也介绍完毕了。AABBTree 追求极致的内存占用，在很多方面都精打细算，像一个精致的艺术品；而 IncrementalAABBTree 为了实现动态变化的灵活，频繁的增删改。牺牲了部分性能、提高了内存占用，但也在一定程度上简化了编码，像一个乐高玩具。两者可谓是各有优劣。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Scene Queries" scheme="https://hakuya.me/tags/Scene-Queries/"/>
    
    <category term="AABBTree" scheme="https://hakuya.me/tags/AABBTree/"/>
    
  </entry>
  
  <entry>
    <title>「Scene Queries」AABBTree——上</title>
    <link href="https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBTree%E2%80%94%E2%80%94%E4%B8%8A/"/>
    <id>https://hakuya.me/learning/physx/%E3%80%8CScene%20Queries%E3%80%8DAABBTree%E2%80%94%E2%80%94%E4%B8%8A/</id>
    <published>2022-08-19T07:25:00.000Z</published>
    <updated>2022-12-29T01:36:04.549Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="scene-queriesaabbtree上"><a class="anchor" href="#scene-queriesaabbtree上">#</a> 「Scene Queries」AABBTree—— 上</h1><p>AABBTree 是 PhysX 用来实现场景查询的基本数据结构，通过 AABBTree 可以实现高效的 AABB 粗筛，从而提高物理检测的查询效率。</p><p>之所以把 AABBTree 单独拎出来说，主要是因为其涵盖的内容较多。当作一个单独的篇幅来展开讨论完全合适～</p><h2 id="aabbtree-中的数据组成"><a class="anchor" href="#aabbtree-中的数据组成">#</a> AABBTree 中的数据组成</h2><p>AABBTree 中的类变量总计有十个：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxU32<span class="token operator">*</span>                  mIndices<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>PxU32                   mNbIndices<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>AABBTreeRuntimeNode<span class="token operator">*</span>    mRuntimePool<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>NodeAllocator           mNodeAllocator<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>PxU32<span class="token operator">*</span>                  mParentIndices<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>PxU32                   mTotalNbNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>PxU32                   mTotalPrims<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>FIFOStack<span class="token operator">*</span>              mStack<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>BitArray                mRefitBitmask<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>PxU32                   mRefitHighestSetWord<span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li><strong>mNbIndices</strong> &amp;&amp; <strong>mIndices</strong>：「mIndices」是一个索引数组，而「mNbIndices」表示该数组的长度。</li><li><strong>mRuntimePool</strong>：用来存储 AABBTree 运行过程中的所有节点数据。</li><li><strong>mNodeAllocator</strong>：用来管理 AABBTree 构建过程中的节点分配。</li><li><strong>mParentIndices</strong>：用来映射运行过程中节点的父节点索引。</li><li><strong>mTotalNbNodes</strong> &amp;&amp; <strong>mTotalPrims</strong>：分别指代 AABBTree 中的总节点数量和总包围盒数量。</li><li><strong>mStack</strong>：一个先进先出的队列，用来实现分布式构建的临时存储结构。</li><li><strong>mRefitBitmask</strong>：Bit 数组，数组长度最大为 2^27，数组内每个元素都是 UInt32 类型。</li><li><strong>mRefitHighestSetWord</strong>：类似于脏标记，用来记录变更节点的最大下标。</li></ul><h2 id="aabbtree-的构建流程"><a class="anchor" href="#aabbtree-的构建流程">#</a> AABBTree 的构建流程</h2><p>AABBTree 的构建有三个模式：</p><ul><li>全量同步构建</li><li>全量分布构建</li></ul><h3 id="全量同步构建build"><a class="anchor" href="#全量同步构建build">#</a> 全量同步构建（build）</h3><p>全量同步构建，顾名思义在一帧内完成整棵树的构建工作：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> <span class="token class-name">AABBTree</span><span class="token operator">::</span><span class="token function">build</span><span class="token punctuation">(</span>AABBTreeBuildParams<span class="token operator">&amp;</span> params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Init stats</span></pre></td></tr><tr><td data-num="4"></td><td><pre>BuildStats stats<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">buildInit</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// Build the hierarchy</span></pre></td></tr><tr><td data-num="9"></td><td><pre>mNodeAllocator<span class="token punctuation">.</span>mPool<span class="token operator">-></span><span class="token function">_buildHierarchy</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> mNodeAllocator<span class="token punctuation">,</span> mIndices<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">buildEnd</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>「build」主要可以分为三个阶段：</p><ul><li><code>buildInit</code> ：初始化构建环境。<ul><li>基础数据计算。这里主要是提前计算好所有参与构建的包围盒中心点坐标用来提高后面做切分的效率。</li><li>内存消耗的预估和预分配。提前计算好可能需要的节点数并预先分配好内存池大小，顺带初始化根节点。</li></ul></li><li><code>_buildHierarchy</code> ：构建流程的核心，下面再展开介绍。</li><li><code>buildEnd</code> ：构建完成后收尾工作。<ul><li>把构建数据转为运行时数据。主要是对数据做一个压缩。</li></ul></li></ul><h4 id="初始化构建环境buildinit"><a class="anchor" href="#初始化构建环境buildinit">#</a> 初始化构建环境（buildInit）</h4><p>初始化环境的代码总体比较简单，但有一个参数非常的关键 ——AABBTreeBuildParams。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">AABBTreeBuildParams</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> Ps<span class="token operator">::</span><span class="token class-name">UserAllocated</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    PxU32mLimit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    PxU32mNbPrimitives<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> PxBounds3<span class="token operator">*</span>mAABBArray<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    PxVec3<span class="token operator">*</span>mCache<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>AABBTreeBuildParams 提供了构建 AABBTree 所需的全部「原材料」和「构建参数」：</p><ul><li><strong>mLimit</strong>：指定 AABBTree 叶节点所能存放的包围盒最大数量，默认是 4 个。如果超过 mLimit，则该节点就必须继续拆分。</li><li><strong>mNbPrimitives</strong> &amp;&amp; <strong>mAABBArray</strong>：表示「原材料」的数量和原材料数组的首地址指针。这里的「原材料」就是参与构建的物体的 AABB 包围盒。</li><li><strong>mCache</strong>：Vec3 的数组，用来缓存每个 AABB 包围盒的中心点，在「初始化构建环境」时会被计算并赋值。</li></ul><p>另外还有三个 AABBTree 成员被初始化：mNbIndices、mIndices、mNodeAllocator。mNbIndices、mIndices 暂且先不介绍，先来看看 mNodeAllocator。</p><h5 id="nodeallocator"><a class="anchor" href="#nodeallocator">#</a> NodeAllocator</h5><p>NodeAllocator 是整个 AABBTree 构建中比较重要的类，它主要负责在 AABBTree 构建过程中申请和分配内存用来创建构建节点。</p><p class="gallery"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220817155728838.png" alt="" /></p><ul><li><strong>mSlabs</strong>：Slab 的数组</li><li><strong>mCurrentSlabIndex</strong>：当前正在使用的 Slab 的下标</li><li><strong>mTotalNbNodes</strong>：所有 Slab 数组中的节点总和</li><li><strong>mPool</strong>：当前正在使用的 Slab 的节点内存池</li></ul><p>为了进一步了解该类的作用，还得从 Slab 和 AABBTreeBuildNode 两个结构下手：</p><h5 id="slab"><a class="anchor" href="#slab">#</a> Slab</h5><p>Slab 是一个 AABBTreeBuildNode 的节点池，记录了 AABBTreeBuildNode 数组的首地址、已经分配出去的节点数以及可分配的最大节点数。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Slab</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    AABBTreeBuildNode<span class="token operator">*</span>  mPool<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    PxU32               mNbUsedNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    PxU32               mMaxNbNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h5 id="aabbtreebuildnode"><a class="anchor" href="#aabbtreebuildnode">#</a> AABBTreeBuildNode</h5><p>AABBTreeBuildNode 则是构建 AABBTree 时的最小单位：</p><p class="gallery" data-height="300"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220817155745313.png" alt="" /></p><p>这里暂时先看其类成员，函数我们后面再来介绍：</p><ul><li><strong>mBV</strong>：记录该节点的包围盒大小。这里分两种情况：<ul><li>如果该节点为叶节点。它的包围盒大小是其所包含的所有对象的包围盒的并集。</li><li>如果该节点为非叶节点。它的包围盒大小是其左右子树的包围盒并集。</li></ul></li><li><strong>mPos</strong>：指向其左子树节点的位置。</li><li><strong>mNodeIndex</strong>：这个变量比较特殊，它需要关联上 <strong>AABBTree.mIndices</strong> 来使用，这个我们后面再介绍。</li><li><strong>mNbPrimitives</strong>：表示该节点内所包含的包围盒对象数量，如果是非叶节点则对象数量为所有子节点的总和。</li></ul><p>介绍完 Slab 和 AABBTreeBuildNode，对于 NodeAllocator 我们也就有一个大概的轮廓了。NodeAllocator 实际上是一个节点内存池的池数组，在我们构建 AABBTree 需要创建新的 AABBTreeBuildNode 的时候，NodeAllocator 会先从当前正在使用的 Slab 中的节点池来获取节点，如果节点池已经没有空闲节点了，就会再创建一个新的 Slab，并使用新的 Slab 中的节点池（一个节点池最多会存在 1024 个空闲节点）用于分配节点。</p><h4 id="构建-aabbtree_buildhierarchy"><a class="anchor" href="#构建-aabbtree_buildhierarchy">#</a> 构建 AABBTree（_buildHierarchy）</h4><p>总算到 AABBTree 构建了，整个构建的实现都在 AABBTreeBuildNode 的两个接口中 ——_buildHierarchy &amp;&amp; subdivide。</p><p>大致实现：尝试切分当前节点，切分成功递归切分，知道达到 mLimit 的要求则结束。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">AABBTreeBuildNode</span><span class="token operator">::</span><span class="token function">_buildHierarchy</span><span class="token punctuation">(</span>AABBTreeBuildParams<span class="token operator">&amp;</span> params<span class="token punctuation">,</span> BuildStats<span class="token operator">&amp;</span> stats<span class="token punctuation">,</span> NodeAllocator<span class="token operator">&amp;</span> nodeBase<span class="token punctuation">,</span> PxU32<span class="token operator">*</span> <span class="token keyword">const</span> indices<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Subdivide current node</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">subdivide</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> nodeBase<span class="token punctuation">,</span> indices<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// Recurse</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>AABBTreeBuildNode<span class="token operator">*</span> Pos <span class="token operator">=</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span>AABBTreeBuildNode<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">getPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">PX_ASSERT</span><span class="token punctuation">(</span>Pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>AABBTreeBuildNode<span class="token operator">*</span> Neg <span class="token operator">=</span> Pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>Pos<span class="token operator">-></span><span class="token function">_buildHierarchy</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> nodeBase<span class="token punctuation">,</span> indices<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>Neg<span class="token operator">-></span><span class="token function">_buildHierarchy</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> nodeBase<span class="token punctuation">,</span> indices<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>stats<span class="token punctuation">.</span>mTotalPrims <span class="token operator">+=</span> mNbPrimitives<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>subdivide</strong> 实现的切分相对复杂一些：</p><ul><li><p>根据当前节点包含的所有包围盒，计算当前节点的包围盒，顺便还能算一个<strong>所有包围盒的均值</strong></p></li><li><p>判断拆分条件，满足的话进行拆分：</p><ul><li><p>AABBTree 的拆分基于方差，这里会算出所有包围盒和均值的<strong>方差</strong>，x、y、z 轴的方差分开计算的。最后会选择<strong>方差最大</strong>的作为本次的<strong>拆分轴</strong></p></li><li><p>拆分的启发函数比较简单，就是直接<strong>对半砍</strong>，大放左边，小的放右边。拆分过程势必需要做<strong>排序</strong>，AABBTree 构建选用的是快排。但有点需要注意，由于源数据是个包围盒数组（<strong>AABBTreeBuildParams.mAABBArray</strong>），他可能是别的上层应用长期使用的数据，并非临时用于构建的，因此在构建中修改源数据是非常危险的，这里采用了一个比较巧妙的做法 —— 二级索引。简单来说就是对包围盒数组做了一次再映射，用一个额外的数组来记录 <strong>mAABBArray</strong> 的下标，这样如果需要变化数组位置的时候，实际上可以仅调换二级索引而不修改源数据。而这个二级索引就是我们之前提到的<strong> AABBTree.mIndices</strong>。</p></li><li><p>如果基于启发函数的拆分导致最终所有包围盒都在同一边，则会进行暴力的对半分。</p></li><li><p>拆分完毕后，通过 <strong>NodeAllocator</strong> 分配两个 <strong>AABBTreeBuildNode</strong> 作为当前节点的左右子树并分别记录各自节点所包含的包围盒起始位置及数量。</p></li></ul></li></ul><h5 id="拆分简图"><a class="anchor" href="#拆分简图">#</a> 拆分简图</h5><p>例如最顶层是所有参与 AABBTree 构建的几何，假设我们的 <strong>mLimit</strong> 为 2，也即是超过 2 个几何的节点就需要进行拆分：</p><ul><li>第一次针对 <strong>y</strong> 轴做了一次拆分，因此整棵树被分成了两半：<strong>left_node</strong>、<strong>left_neighbor</strong>。</li><li><strong>left_neighbor</strong> 已经满足要求可以不需要拆分了，接下来我们继续对 <strong>left_node</strong> 做拆分。</li><li><strong>left_node</strong> 的拆分是沿着 <strong>x</strong> 轴进行，同样也把整棵树分成了两半：<strong>left_leaf</strong>、<strong>left_leaf_neighbor</strong>。</li><li>到此整个拆分就结束了，整棵树看起来就像下面这张图一样。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220817142022380.png" alt="" width="800px" /></p><p>让我们回到之前 <strong>AABBTreeBuildNode.mPos</strong> 的部分以及没有提到的 <strong>AABBTree.mIndices</strong>。可以想象一下，所有包围盒都是存储在列表 <strong>AABBTreeBuildParams.mAABBArray</strong> 内的，那么上面抽象的拆分如何用数据的形式存储呢？</p><p>实际上 <strong>AABBTreeBuildNode</strong> 内会保存其所包含的所有包围盒的并集信息，但并不会保存每个对象的包围盒信息，而是记录下它在 <strong>AABBTree.mIndices</strong> 里的<strong>下标</strong>和<strong>范围</strong>。</p><p>刚才也提到，为了不修改源数据，因此做了二级映射（<strong>AABBTree.mIndices</strong>）来存储排序后的下标数据，这样就可以通过 <strong>AABBTree.mIndices</strong> 里存储的下标去 <strong>mAABBArray</strong> 内拿到对应的包围盒数据了～</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220817142717771.png" alt="image-20220817142717771" width="800px" /></p><p>另外 <strong>AABBTreeBuildNode</strong> 是如何存储的，也是个让人不得不在意的话题，由于所有的 <strong>AABBTreeBuildNode</strong> 都通过 <strong>NodeAllocator</strong> 进行分配，而 <strong>NodeAllocator</strong> 内部其实是一个对象池数组，因此可以视为<strong>二维数组</strong>，再简化一下可以展开成<strong>一维数组</strong>。</p><p>前面说到 <strong>AABBTreeBuildNode</strong> 的 <strong>mPos</strong> 会存储<strong>左子树指针</strong>，那么<strong>右子树</strong>如何获取的呢？由于每次拆分后的两个节点（左右子节点）会在同一个操作内被申请和创建，因此两个节点实际上对应到数组内是紧挨着的，因此可以通过左子树偏移 1 个单位获取右子树：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220817143833110.png" alt="image-20220817143833110" width="960px" /></p><h4 id="构建结果压缩buildend"><a class="anchor" href="#构建结果压缩buildend">#</a> 构建结果压缩（buildEnd）</h4><p>构建完成后，我们得到了一个构建时的 <strong>AABBTree</strong>，它由多个 <strong>AABBTreeBuildNode</strong> 组成。回想一下，所有的 <strong>AABBTreeBuildNode</strong> 实际上都通过 <strong>NodeAllocator</strong> 分配，并且存储在 <strong>Slab</strong> 的 <strong>mPool</strong> 中，而 <strong>NodeAllocator</strong> 对内存的使用远比我们想的要阔绰～</p><ul><li>由于 <strong>mPool</strong> 的分配机制决定了它也不那么的「节约」，其设计之初是为了解决零碎分配内存时多次调用 malloc 导致效率低下，以及单次大量分配内存导致卡帧的问题。因此第一次分配的时候会根据需要来预先分配最多  <strong>1024</strong> 个空闲节点，此后每次新创建一个 <strong>Slab</strong>，都会直接创建 <strong>1024</strong> 个新节点，可以想象其中不乏大量的空闲内存没有被利用，这样挥霍那还得了。</li><li>另外 <strong>AABBTreeBuildNode</strong> 数量直接决定了整棵树的内存占用，如果不能缩减节点数量的情况下，压缩每个节点的数据大小也是一个不错的选择。</li></ul><h5 id="flatten"><a class="anchor" href="#flatten">#</a> flatten</h5><p>为了高效利用内存，减少空闲内存的占比。把 <strong>NodeAllocator</strong> 内的 <strong>AABBTreeBuildNode</strong> 全部挪到一个定长的数组（<strong>AABBTree.mPool</strong>）中是个不错的选择。</p><p>当然这些都是基于一个前提： <strong>AABBTree 构建完成后，其节点应该是很少变更的</strong>。基于以上前提，引入了一个新的结构 <strong>AABBTree.mPool</strong>—— 一个 <strong>AABBTreeRuntimeNode</strong> 的数组。而  <code>flatten</code>  操作便是把 <strong>AABBTreeBuildNode</strong> 平铺到该数组中。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220818092915969.png" alt="image-20220818092915969" width="800px" /></p><p>除此以外，为了压缩 <strong>AABBTreeBuildNode</strong> 而引入的新类也有必要好好说道说道 ——<strong>AABBTreeRuntimeNode</strong>。</p><h5 id="aabbtreeruntimenode"><a class="anchor" href="#aabbtreeruntimenode">#</a> AABBTreeRuntimeNode</h5><p>相比于 <strong>AABBTreeBuildNode</strong>，做了更进一步的压缩，从原本的 <strong>40</strong> 字节压缩到了 <strong>28</strong> 字节：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220817150220766.png" alt="image-20220817150220766" width="960px" /></p><p>这个 <strong>mData</strong> 可谓是海纳百川，包罗万象。其存在两种解析规则：</p><ul><li>叶节点解析：叶节点解析规则中 U32 的前 <strong>27</strong> 位用来表示 <strong>AABBTree.mIndices</strong> 的下标也即是 <strong>mNodeIndex</strong>，后 <strong>4</strong> 位存储对象数量对应 <strong>mNbPrimitives</strong>，最后 <strong>1</strong> 位为 1 标识其为叶节点。</li><li>非叶节点解析：非叶节点解析规则中 U32 的前 <strong>31</strong> 位用来记录它的左子树在 <strong>AABBTree.mPool</strong> 中的下标，最后 <strong>1</strong> 位为 0 标识其为非叶节点。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220817151155864.png" alt="image-20220817151155864" width="960px" /></p><h3 id="全量分布构建progressivebuild"><a class="anchor" href="#全量分布构建progressivebuild">#</a> 全量分布构建（progressiveBuild）</h3><p>聊完全量同步构建，接下来我们聊聊全量分布构建，这里的分布并非分开部署之义，而是<strong>分步骤构建</strong>。这样的构建模式可以让一帧内执行的构建操作转换为多帧执行，一定程度上解决了卡顿问题。下面就来看看其是如何实现的：</p><p>分布构建的实现本质上是把  <code>AABBTreeBuildNode::_buildHierarchy</code>  通过 <strong>AABBTree.mStack</strong> 先进先出队列转为非递归实现，再把非递归逻辑进行分批：</p><ul><li><code>progress_0</code> ：初始化构建环境。</li><li><code>progress_1</code> ：把递归构建的左右子树，放入队列中。每次构建时从队列取出固定数量的节点进行分批构建。<ul><li>构建完毕后执行构建结果压缩。</li></ul></li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PxU32 <span class="token class-name">AABBTree</span><span class="token operator">::</span><span class="token function">progressiveBuild</span><span class="token punctuation">(</span>AABBTreeBuildParams<span class="token operator">&amp;</span> params<span class="token punctuation">,</span> BuildStats<span class="token operator">&amp;</span> stats<span class="token punctuation">,</span> PxU32 progress<span class="token punctuation">,</span> PxU32 limit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>       <span class="token keyword">if</span><span class="token punctuation">(</span>progress<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">buildInit</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                     <span class="token keyword">return</span> PX_INVALID_U32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>              mStack <span class="token operator">=</span> <span class="token function">PX_NEW</span><span class="token punctuation">(</span>FIFOStack<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>              mStack<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span>mNodeAllocator<span class="token punctuation">.</span>mPool<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>              <span class="token keyword">return</span> progress<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>progress<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>       <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>              PxU32 stackCount <span class="token operator">=</span> mStack<span class="token operator">-></span><span class="token function">getNbEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>              <span class="token keyword">if</span><span class="token punctuation">(</span>stackCount<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>              <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                     PxU32 Total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                     <span class="token keyword">const</span> PxU32 Limit <span class="token operator">=</span> limit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                     <span class="token keyword">while</span><span class="token punctuation">(</span>Total<span class="token operator">&lt;</span>Limit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                     <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                            AABBTreeBuildNode<span class="token operator">*</span> Entry<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                            <span class="token keyword">if</span><span class="token punctuation">(</span>mStack<span class="token operator">-></span><span class="token function">pop</span><span class="token punctuation">(</span>Entry<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                                   Total <span class="token operator">+=</span> <span class="token function">incrementalBuildHierarchy</span><span class="token punctuation">(</span><span class="token operator">*</span>mStack<span class="token punctuation">,</span> Entry<span class="token punctuation">,</span> params<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> mNodeAllocator<span class="token punctuation">,</span> mIndices<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                                   <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                     <span class="token keyword">return</span> progress<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>              <span class="token function">buildEnd</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>              <span class="token function">PX_DELETE_AND_RESET</span><span class="token punctuation">(</span>mStack<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// Done!</span></pre></td></tr><tr><td data-num="33"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>       <span class="token keyword">return</span> PX_INVALID_U32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><p>分布构建最大的意义在于削峰，这里暂时按下不表，后面针对 AABBPruner 的介绍再做展开</p></blockquote><h2 id="aabbtree-的增删改"><a class="anchor" href="#aabbtree-的增删改">#</a> AABBTree 的增删改</h2><p>构建完成后 AABBTree 就已经可以支持场景查询的粗筛。然而要应对场景内物体的频繁移动、创建、销毁、变化，势必还得有一套能够兼容树变更的逻辑支持。</p><p>这里可以简单列举一下可能的场景：</p><ul><li>AABBTree 的更新：物体移动了、且状态导致自生包围盒位置、大小、朝向发生变化，应该修改 AABBTree 中的包围盒信息。</li><li>AABBTree 的删除：物体销毁了，导致物体包围盒被销毁应该从 AABBTree 移除。</li><li>AABBTree 的新增：物体被创建，此时物体包围盒应该加入 AABBTree。</li></ul><h3 id="aabbtree-的更新mparentindices-mrefitbitmask-mrefithighestsetword"><a class="anchor" href="#aabbtree-的更新mparentindices-mrefitbitmask-mrefithighestsetword">#</a> AABBTree 的更新（mParentIndices &amp;&amp; mRefitBitmask &amp;&amp; mRefitHighestSetWord）</h3><p>AABBTree 对于更新操作的实现，没有想象中的那么复杂。不会做节点的拼接，左旋右旋等复杂规则，而是简单的从下至上的依次更新每个包围盒的大小。</p><p>既然要实现从下至上的更新，势必需要知道每个子节点所对应的父节点是谁，因此用一个额外的数据结构进行存储 ——<strong>mParentIndices</strong>。</p><h4 id="mparentindices"><a class="anchor" href="#mparentindices">#</a> mParentIndices</h4><p>该结构也非常的简单，就是记录了每个子节点和父节点在 <strong>mRuntimePool</strong> 内的下标映射。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220818163653380.png" alt="image-20220818163653380" width="960px" /></p><h4 id="mrefitbitmask"><a class="anchor" href="#mrefitbitmask">#</a> mRefitBitmask</h4><p>为了能快速定位需要更新的节点，这里对节点索引做了一个新的映射 ——<strong>mRefitBitmask</strong>。</p><p>该结构底层实现是一个 <strong>BitArray</strong>。对 U32 的节点编号进行分段存储，前 <strong>27</strong> 位作为 <strong>BitArray</strong> 的下标，后 <strong>5</strong> 位压缩到一个 U32 的每个 bit 内。通过如果某 bit 为 1，则表示对应编号（ <code>BitArrayIdx &lt;&lt; 5 + U32_bit_pos</code> ）的节点需要被更新。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220818113136693.png" alt="image-20220818113136693" width="960px" /></p><h4 id="mrefithighestsetword"><a class="anchor" href="#mrefithighestsetword">#</a> mRefitHighestSetWord</h4><p><strong>mRefitHighestSetWord</strong> 则是记录所有上标记脏节点里，BitArray 下标的最大值。因为更新的时候由于 AABBTree 构建顺序，父节点永远是排在子节点前面的，因此需要先更新子节点再更新父节点就必须从后往前的进行更新。</p><h4 id="更新流程总结"><a class="anchor" href="#更新流程总结">#</a> 更新流程总结</h4><p>如下图，假设 5 号图形发生了位移：</p><ul><li>那么其所在的包围盒 <strong>left_leaf_neighbor</strong> 会打上脏标记。<ul><li>根据 <strong>mParentIndices</strong> 依次标记器父节点 ——<strong>left_node</strong>、<strong>Root</strong>。</li><li>体现在 BitArray 内，下标为 0 的 U32 中 <strong>1、2、5</strong> 位被打上了脏标记。</li><li><strong>mRefitHighestSetWord</strong> 会被设置为 0，标识最大脏数据在 0 下标和其之前的位置。</li></ul></li><li>根据 <strong>mRefitHighestSetWord</strong> 从后往前更新所有带有脏标记的节点，并更新包围盒信息。</li><li>最后清理所有的脏标记完成本次更新操作。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220818163716796.png" alt="image-20220818163716796" width="1200px" /></p><h3 id="已知的映射关系总结"><a class="anchor" href="#已知的映射关系总结">#</a> 已知的映射关系总结</h3><p>再介绍删除和新增之前，有必要系统性的梳理一下目前 AABBTree 内所用到各种映射、存储之间的关系。因为后续增删过程中同样少不了更新这些关系：</p><ul><li><strong>AABBTreeBuildParams.mAABBArray</strong>：外部包围盒数据，作为 <strong>AABBTree</strong> 构建的源数据，作为参数传递给 <strong>AABBTree</strong>。</li><li><strong>AABBTree.mIndices</strong>：对 <strong>mAABBArray</strong> 做的二次映射，存储排序后的 <strong>mAABBArray</strong> 下标。</li><li><strong>AABBTree.mRuntimePool</strong>：存储所有 <strong>AABBTree</strong> 节点运行时状态。</li><li><strong>AABBTree.mParentIndices</strong>：维护 <strong>mRuntimePool</strong> 内部父子节点关系的映射。</li><li><strong>AABBTreeUpdateMap.mMapping</strong>：维护 <strong>mAABBArray</strong> 到 <strong>mRuntimePool</strong> 的反向映射。</li></ul><blockquote><p>这里有关 AABBTreeUpdateMap 的话题，我们暂且先不讨论，只需要知道其它是一个外部的映射即可。</p></blockquote><p>综上所述的五种存储内容，大致可以描绘出它们之间的关联关系：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220818164030941.png" alt="image-20220818164030941" width="1600px" /></p><h3 id="aabbtree-的删除aabbtreeupdatemapinvalidate"><a class="anchor" href="#aabbtree-的删除aabbtreeupdatemapinvalidate">#</a> AABBTree 的删除（AABBTreeUpdateMap::invalidate）</h3><p>删除操作比较特殊，并不是在 AABBTree 内部完成的，原因也很简单：<strong>AABBTreeBuildParams.mAABBArray</strong> 并不属于 <strong>AABBTree</strong> 的数据，<strong>AABBTree</strong> 至始至终都只是维护了 <strong>mAABBArray</strong> 中的包围盒关联信息并缓存了包围盒数据。</p><p>所以删除的时候其实是删除 <strong>mAABBArray</strong> 数据，并且清理 <strong>AABBTree</strong> 内部关联的映射，这里以「图形 1」为例：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220908110312390.png" alt="image-20220908110312390" width="1600px" /></p><ul><li>删除「图形 1」必然导致 <strong>mAABBArray</strong> 内部的包围盒数据被清理，为了保证包围盒数据的紧凑，会把最后一个<strong>图形 5</strong> 替换到<strong>图形 1</strong> 的位置。</li><li><strong>mIndices</strong> 会移除掉对「图形 1」的索引；考虑到 mIndices 存储的每个节点下标必须是连续的，会对调所影响节点（<strong>left_leaf</strong>）的最后一个索引 mIndices [1] 到删除位置 mIndices [0]。</li><li>由于<strong>图形 5</strong> 替换到<strong>图形 1</strong> 所在的位置，因此 mIndices [2] 也需要调整指向。</li><li><strong>mMapping</strong> 同样需要进行调整，由于图形 1 替换为图形 5，因此 mMapping [0] 需要指向 <strong>left_leaf_neighbor</strong></li><li>最后，删除完毕同样需要进行一次更新操作。</li></ul><blockquote><p>这里有点需要注意：删除过后，内存并不会回收，因此如果大量创建对象再销毁，实际上分配给 AABBTree 的这部分内存还是会一直被占用。</p></blockquote><h3 id="aabbtree-的新增mergetree"><a class="anchor" href="#aabbtree-的新增mergetree">#</a> AABBTree 的新增（mergeTree）</h3><p>新增操作同样比较特殊，AABBTree 并不会进行频繁的包围盒插入，然后再切分树节点，或者左旋右旋来调整树结构。而是采用了更加巧妙的手法：</p><p>由于 AABBTree 本身并不具备频繁插入的结构性质，因此采用：把多次新增操作视作新建一棵 <strong>AABBTree</strong>，然后和当前的 <strong>AABBTree</strong> 进行合并。</p><p>而合并的时候对需要合并的 <strong>AABBTree</strong> 做了数据上的裁剪，仅保留了构建所需的额外信息 ——<strong>AABBTreeMergeData</strong>。</p><h4 id="aabbtreemergedata"><a class="anchor" href="#aabbtreemergedata">#</a> AABBTreeMergeData</h4><p class="gallery" data-height="300"><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220818171228470.png" alt="" /></p><ul><li><strong>mNodes</strong>：就是构建好后的 <strong>AABBTreeRuntimeNode</strong> 列表，类似 <strong>AABBTree.mRuntimePool</strong>。</li><li><strong>mIndices</strong>：就是对参与构建的包围盒做的排序后的列表，类似 <strong>AABBTree.mIndices</strong>。</li><li><strong>mIndicesOffset</strong>：暂且不提。不过看这个命名想必大家也能猜出一二。</li></ul><h4 id="aabbtree-合并"><a class="anchor" href="#aabbtree-合并">#</a> AABBTree 合并</h4><p>两棵树的合并可以视作把一棵树挂接到另一棵树的某个节点下面。至于如何判断应该挂接到哪个节点上，则是通过包围盒的包含关系决定。例如 <strong>merge_tree</strong> 根节点的包围盒被当前树的某个叶节点包含，那么直接插入到该叶节点下方；如果 <strong>merge_tree</strong> 根节点被某个非叶子节点包含则继续向下查询，直到遇到无法包含的情况下插入到其父节点；另外一种特殊情况则是当前树的根节点就已经不包含 <strong>merge_tree</strong> 了，则直接把 <strong>merge_tree</strong> 插入当前树的根节点。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220819105506653.png" alt="image-20220819105506653" width="800px" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220819105517413.png" alt="image-20220819105517413" width="800px" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220819105535856.png" alt="image-20220819105535856" width="800px" /></p><p>综合以上三种情况，合并的逻辑大致可以分为两套：</p><ul><li>Case_1：合并到某个叶节点。</li><li>Case_2：合并到某个非叶节点。</li></ul><h5 id="合并到叶节点"><a class="anchor" href="#合并到叶节点">#</a> 合并到叶节点</h5><p>例如这里把 <strong>TreeB</strong> 合并到 <strong>TreeA</strong> 的「叶节点 left_neighbor」下面：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220819111350287.png" alt="image-20220819111350287" width="1100px" /></p><p>叶节点的插入相对会比较的简单：</p><ul><li>首先会创建一个 <strong>left_neighbor</strong> 的拷贝 <strong>left_neighbor_copy</strong>，然后把 <strong>left_neighbor_copy</strong> 挂接在 <strong>left_neighbor</strong> 的左子树下面，这时候 <strong>left_neighbor</strong> 会从一个叶节点变更为非叶节点，最直观的体现是 AABBTreeRuntimeNode 的 mData 会进行调整。</li><li>接着把 <strong>TreeB</strong> 的 <strong>Root</strong> 拼接到 <strong>left_neighbor</strong> 右子树节点。整个过程大体就算告一段落。</li><li>最后更新一下所有节点的关联关系，整个合并流程就算结束了。</li></ul><h5 id="合并到叶节点的数据变更"><a class="anchor" href="#合并到叶节点的数据变更">#</a> 合并到叶节点的数据变更</h5><p>合并到叶节点的插入相对也较为简单，会在原有数组的基础上向后插入新的节点数据，并且把涉及到的相关节点进行调整。</p><ul><li>由于 <strong>left_neighbor</strong> 从叶节点变为非叶节点，因此需要修改 <strong>AABBTreeRuntimeNode.mData</strong> 让其能够指向 <strong>left_neighbor_copy</strong>。</li><li>新加入节点都需要重新构建 <strong>mMapping、mRuntimePool、mParentIndices、mIndices、mAABBArray</strong> 关系网，其他不受影响的节点则不需要进行调整。</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220819120317839.png" alt="image-20220819120317839" width="1400px" /></p><blockquote><p>之前也提到，mRuntimePool 本身是定长的，因此每做一次 merge 操作就需要 resize 一次数组，并且做一次全拷贝，开销还是比较高的。</p></blockquote><h5 id="合并到非叶节点"><a class="anchor" href="#合并到非叶节点">#</a> 合并到非叶节点</h5><p>合并非叶节点和合并叶节点非常的近似，都是拷贝一份插入节点并把 <strong>merge_tree</strong> 作为左子树进行拼接：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220819113416849.png" alt="image-20220819113416849" width="1100px" /></p><ul><li>首先会创建一个 <strong>left_node</strong> 的拷贝 <strong>left_node_copy</strong>，然后把 <strong>left_node_copy</strong> 挂接在 <strong>left_neighbor</strong> 的左子树下面，并把 <strong>left_node</strong> 子节点转移到 <strong>left_node_copy</strong> 下面。</li><li>接着把 <strong>TreeB</strong> 的 <strong>Root</strong> 拼接到 <strong>left_node</strong> 右子树节点，和 <strong>left_node_copy</strong> 相邻。整个过程大体就算告一段落。</li><li>最后更新一下所有节点的关联关系，整个合并流程就算结束了。</li></ul><h5 id="合并到非叶节点的数据变更"><a class="anchor" href="#合并到非叶节点的数据变更">#</a> 合并到非叶节点的数据变更</h5><p>可以看到，新增的 <strong>Root_merge</strong> 等内容插到了 <strong>mRuntimePool</strong> 的中间位置。原因也很简单，如果和插入叶节点一样放在 <strong>mRuntimePool</strong> 末尾的话，会导致 <strong>left_leaf</strong> 和 <strong>left_leaf_neighbor</strong> 会在 <strong>Root_merge</strong> 之前，这样显然是不满足<strong>父节点和父节点兄弟节点必须在子节点之前</strong>的特性，这样会导致 <strong>AABBTree</strong> 从下而上（从后往前）的层级更新发生异常。</p><p>因此这里选择把整棵 <strong>merge_tree</strong> 插入到了非叶节点的左子树（原 <strong>left_leaf</strong> 处）。而代价则是需要重新设置受影响的节点 ——<strong>left_leaf</strong> 和 <strong>left_leaf_neighbor</strong>。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220819150406006.png" alt="image-20220819150406006" width="1400px" /></p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>到此，<strong>AABBTree</strong> 的组成、构建和更新都介绍完毕～，但这还远没有结束。我们一直没有提到的 <strong>AABBTreeUpdateMap</strong>，以及从何而来的 <strong>AABBTreeBuildParams</strong> 都还值得继续探讨；另外，<strong>AABBTree</strong> 的分布构建下的削峰策略也还没有实质上的体现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Scene Queries" scheme="https://hakuya.me/tags/Scene-Queries/"/>
    
    <category term="AABBTree" scheme="https://hakuya.me/tags/AABBTree/"/>
    
  </entry>
  
  <entry>
    <title>C++中的extern</title>
    <link href="https://hakuya.me/learning/programlanguage/cpp/C++%E4%B8%AD%E7%9A%84extern/"/>
    <id>https://hakuya.me/learning/programlanguage/cpp/C++%E4%B8%AD%E7%9A%84extern/</id>
    <published>2022-06-23T06:02:00.000Z</published>
    <updated>2022-12-29T01:36:04.551Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>纯粹记录个人知识盲区，并系统性的做个学习</p></div><h1 id="c中的extern"><a class="anchor" href="#c中的extern">#</a> C++ 中的 extern</h1><p>extern 可以应用于「变量」「函数」和「模板」，用于只声明不定义。</p><p>这里有个比较严格的规则：所有常规「变量」「函数」「模板」可以多次声明，只能有一次定义；这个很好理解，如果定义多次的情况下，编译器也不清楚改用哪次的定义作为最终的结果。</p><p>这里先做个简单的测试：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test_extern.h</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// test_extern1.h</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// main.cpp</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test_extern.h"</span></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test_extern1.h"</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><p>g++ -c main.cpp</p></blockquote><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* ----------------------- output ----------------------- */</span></pre></td></tr><tr><td data-num="2"></td><td><pre>In file included from main<span class="token punctuation">.</span>cpp<span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>test_extern1<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span> 错误：‘<span class="token keyword">int</span> a’ 重定义</pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     <span class="token operator">^</span></pre></td></tr><tr><td data-num="6"></td><td><pre>test_extern<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span> 附注：‘<span class="token keyword">int</span> a’ previously declared here</pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token operator">^</span></pre></td></tr><tr><td data-num="9"></td><td><pre>In file included from main<span class="token punctuation">.</span>cpp<span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>test_extern1<span class="token punctuation">.</span>h<span class="token operator">:</span> 在函数‘<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>’中<span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>test_extern1<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">6</span><span class="token operator">:</span> 错误：‘<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>’ 重定义</pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span></pre></td></tr><tr><td data-num="14"></td><td><pre>test_extern<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">6</span><span class="token operator">:</span> 附注：‘<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>’ previously defined here</pre></td></tr><tr><td data-num="15"></td><td><pre> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span></pre></td></tr><tr><td data-num="17"></td><td><pre>In file included from main<span class="token punctuation">.</span>cpp<span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>test_extern1<span class="token punctuation">.</span>h<span class="token operator">:</span> 在全局域：</pre></td></tr><tr><td data-num="19"></td><td><pre>test_extern1<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">6</span><span class="token operator">:</span> 错误：‘<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1<span class="token punctuation">)</span>’ 重定义</pre></td></tr><tr><td data-num="20"></td><td><pre> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span></pre></td></tr><tr><td data-num="22"></td><td><pre>test_extern<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">6</span><span class="token operator">:</span> 附注：‘<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1<span class="token punctuation">)</span>’ previously declared here</pre></td></tr><tr><td data-num="23"></td><td><pre> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span></pre></td></tr></table></figure><p>这里提示「变量」、「函数」和「模板函数」都重定义了。比较反直觉的是： <code>int a;</code>  被视作定义而非声明。</p><p>我们都知道，如果需要声明一个函数，可以使用如下写法：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 函数声明</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 模板函数声明</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span></pre></td></tr></table></figure><p>由于  <code>func()</code>  本身没有二义性，虽然编译器会自动加上 <strong>extern</strong> 将其视为如下代码，但两者其实是等效的：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 函数声明</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 模板函数声明</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T1 t<span class="token punctuation">)</span></pre></td></tr></table></figure><p>那么变量呢？这里因为变量比较特殊  <code>int a;</code>  不但会声明变量  <code>a</code> ，还会初始化变量  <code>a</code>  为  <code>0</code> ，因此就需要单独用关键字标识变量告诉编译器这里仅声明不定义：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr></table></figure><p>这便是 extern 的第一个作用。</p><h2 id="gcc-中做了什么"><a class="anchor" href="#gcc-中做了什么">#</a> GCC 中做了什么</h2><p>之前介绍了 extern 的作用，但都比较偏向理论，下面来看看 GCC 编译过程中是如何处理的，这里以 GCC 7.3.1 版本为例：</p><p>首先 GCC 会根据词法分析规则，获取到声明中附带的一些关键字，这里我们暂且只看 extern 关键字，这里给声明打上了  <code>csc_extern</code>  的标记</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// c-decl.c</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">case</span> RID_EXTERN<span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>n <span class="token operator">=</span> csc_extern<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/* Diagnose "__thread extern".  */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>specs<span class="token operator">-></span>thread_p <span class="token operator">&amp;&amp;</span> specs<span class="token operator">-></span>thread_gnu_p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">error</span> <span class="token punctuation">(</span><span class="token string">"%&lt;__thread%> before %&lt;extern%>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>specs-&gt;thread_p &amp;&amp; specs-&gt;thread_gnu_p</code>  则表示这个声明之前不允许存在关键字  <code>_thread</code> ，但可以用  <code>thread_local</code> ：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">c_declspecs</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">/* Whether "__thread" or "_Thread_local" was specified.  */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  BOOL_BITFIELD thread_p <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">/* Whether "__thread" rather than "_Thread_local" was specified.  */</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  BOOL_BITFIELD thread_gnu_p <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以做一个简单的测试，分别用  <code>__thread</code>  和  <code>thread_local</code> ：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// main.cpp</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">thread_local</span> <span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    __thread <span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// gcc -c main.cpp</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* ----------------------- output ----------------------- */</span></pre></td></tr><tr><td data-num="11"></td><td><pre>main<span class="token punctuation">.</span>cpp<span class="token operator">:</span> 在函数‘<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>’中<span class="token operator">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>main<span class="token punctuation">.</span>cpp<span class="token operator">:</span><span class="token number">6</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span> 警告：‘__thread’出现在‘<span class="token keyword">extern</span>’之前</pre></td></tr><tr><td data-num="13"></td><td><pre>     __thread <span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>     <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span></pre></td></tr></table></figure><hr /><p>接下来我们再看看  <code>csc_extern</code>  都有哪些限制规则：</p><h3 id="thread_local-声明必须同时是-static-或者-extern"><a class="anchor" href="#thread_local-声明必须同时是-static-或者-extern">#</a> thread_local 声明必须同时是 static 或者 extern</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> csc_extern <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> csc_static <span class="token operator">&amp;&amp;</span> specs<span class="token operator">-></span>thread_p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">error</span> <span class="token punctuation">(</span><span class="token string">"%qs used with %qE"</span><span class="token punctuation">,</span> specs<span class="token operator">-></span>thread_gnu_p <span class="token operator">?</span> <span class="token string">"__thread"</span> <span class="token operator">:</span> <span class="token string">"_Thread_local"</span><span class="token punctuation">,</span> scspec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    specs<span class="token operator">-></span>thread_p <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220623113659361.png" alt="image-20220623113659361" /></p><hr /><h3 id="不支持非函数声明-extern-并初始化"><a class="anchor" href="#不支持非函数声明-extern-并初始化">#</a> 不支持非函数声明 extern 并初始化</h3><p>针对声明在不同的作用域会有不同的提示：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>storage_class <span class="token operator">==</span> csc_extern</pre></td></tr><tr><td data-num="2"></td><td><pre>         <span class="token operator">&amp;&amp;</span> initialized</pre></td></tr><tr><td data-num="3"></td><td><pre>         <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>funcdef_flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">/* 'extern' with initialization is invalid if not at file scope.  */</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_scope <span class="token operator">==</span> file_scope<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">/* It is fine to have 'extern const' when compiling at C</pre></td></tr><tr><td data-num="9"></td><td><pre>              and C++ intersection.  */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>warn_cxx_compat <span class="token operator">&amp;&amp;</span> constp<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token function">warning_at</span> <span class="token punctuation">(</span>loc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"%qE initialized and declared %&lt;extern%>"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token function">error_at</span> <span class="token punctuation">(</span>loc<span class="token punctuation">,</span> <span class="token string">"%qE has both %&lt;extern%> and initializer"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>简单的测试一下：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// main.cpp</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">extern</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">extern</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// gcc -c main.cpp</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* ----------------------- output ----------------------- */</span></pre></td></tr><tr><td data-num="11"></td><td><pre>main<span class="token punctuation">.</span>cpp<span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span> 警告：‘a’已初始化，却又被声明为‘<span class="token keyword">extern</span>’</pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">extern</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token operator">^</span></pre></td></tr><tr><td data-num="14"></td><td><pre>main<span class="token punctuation">.</span>cpp<span class="token operator">:</span> 在函数‘<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>’中<span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>main<span class="token punctuation">.</span>cpp<span class="token operator">:</span><span class="token number">6</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span> 错误：‘b’既有‘<span class="token keyword">extern</span>’又有初始值设定</pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token keyword">extern</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token operator">^</span></pre></td></tr></table></figure><hr /><h3 id="嵌套函数不允许声明-extern"><a class="anchor" href="#嵌套函数不允许声明-extern">#</a> 嵌套函数不允许声明 extern</h3><p>这个好像 C++ 不支持嵌套，只能用 lambda 来实现因此不会有这种问题。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>storage_class <span class="token operator">==</span> csc_extern <span class="token operator">&amp;&amp;</span> funcdef_flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">error_at</span> <span class="token punctuation">(</span>loc<span class="token punctuation">,</span> <span class="token string">"nested function %qE declared %&lt;extern%>"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>此外还有很多其他的限制规则，这里就不一一展开。</p></blockquote><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>总的来说 extern 用于在使用前对对象进行声明，对象的定义是否存在会在链接的时候通过符号表进行查找。</p><h2 id="参考资料"><a class="anchor" href="#参考资料">#</a> 参考资料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvdW5kZXJzdGFuZGluZy1leHRlcm4ta2V5d29yZC1pbi1jLw==">理解 C 中的 “extern” 关键字</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuZGV2L2djYy1taXJyb3IvZ2NjL3RyZWUvcmVsZWFzZXMvZ2NjLTc=">gcc7 源码</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvY3BwL2NwcC9leHRlcm4tY3BwP3ZpZXc9bXN2Yy0xNzA=">Microsoft-extern(C++)</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;纯粹记录个人知识盲区，并系统性的做个学习&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;c中的extern&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c中的extern&quot;&gt;#&lt;/a&gt; C++ 中的 extern&lt;/h1&gt;
&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="编程语言" scheme="https://hakuya.me/categories/learning/programlanguage/"/>
    
    <category term="cpp" scheme="https://hakuya.me/categories/learning/programlanguage/cpp/"/>
    
    
    <category term="C++" scheme="https://hakuya.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>杂项</title>
    <link href="https://hakuya.me/learning/programlanguage/cpp/%E6%9D%82%E9%A1%B9/"/>
    <id>https://hakuya.me/learning/programlanguage/cpp/%E6%9D%82%E9%A1%B9/</id>
    <published>2022-05-26T11:02:00.000Z</published>
    <updated>2023-02-08T08:36:08.300Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文主要是介绍一些个人开发过程中遇到的奇怪代码，奇怪并非指代代码错误或写法低效，单纯个人知识盲区</p></div><h1 id="杂项"><a class="anchor" href="#杂项">#</a> 杂项</h1><h2 id="new-运算符和对象初始化"><a class="anchor" href="#new-运算符和对象初始化">#</a> new 运算符和对象初始化</h2><p>一般调用构造函数的时候，都会初始化对象里的变量，如果不指定的情况下就会执行零构造，对于以下代码，想必大家都很熟悉：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">CMyClass</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>CMyClass a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CMyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// a.c == 0</span></pre></td></tr></table></figure><p>初始化一个类对象，但其中实际还隐含了一个操作 ——<span class="exturl" data-url="aHR0cHM6Ly96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL3ZhbHVlX2luaXRpYWxpemF0aW9u"> 值初始化</span>。这一步实际上会把  <code>CMyClass</code>  中的成员  <code>c</code>  初始化为 0，并且初始化该类的虚函数表等其他内容，那有什么办法可以只初始化虚函数表等关系，但是不初始化值呢？答案是有的，而且我还撞见了🤔</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>CMyClass a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CMyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/* 如果使用 CMyClass ()，则会进行值初始化 */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">new</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">CMyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// a.c == 0</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/* 如果只是用 CMyClass，则不会进行值初始化，c 依然是 100 */</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">new</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> CMyClass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// a.c == 100</span></pre></td></tr></table></figure><p>是不是很神奇，但是有一点要注意，这种不进行值初始化的操作，必须避免在无参构造函数内进行值初始化，不然  <code>new (a) CMyClass</code>  依旧会执行无参构造函数内的逻辑，但是否会用初始化值就据取决于构造函数内部的实现了。</p><h2 id="map-的默认插入"><a class="anchor" href="#map-的默认插入">#</a> map 的默认插入</h2><p>例如下面这段代码，在执行 map 的  <code>operate[]</code>  操作的时候，涉及到一个默认值的概念，如果 key 不存在的情况下会构造一个默认的 v，并连同 k 一起插入 map。</p><p>这种写法可以简化赋值和初始化的工程，有点类似 python 的  <code>defaultdict</code>  ：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>std<span class="token operator">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token operator">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> A<span class="token operator">>></span> m_a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>m_a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 插入默认的 kv</span></pre></td></tr><tr><td data-num="14"></td><td><pre>A<span class="token operator">&amp;</span> a <span class="token operator">=</span> m_a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 插入默认 kv，并返回 val 的引用</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 直接拿来用...</span></pre></td></tr><tr><td data-num="17"></td><td><pre>a<span class="token punctuation">.</span>m<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>下面是  <code>operate[]</code>  函数的定义，和原理</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>mapped_type<span class="token operator">&amp;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> __k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// concept requirements</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">__glibcxx_function_requires</span><span class="token punctuation">(</span>_DefaultConstructibleConcept<span class="token operator">&lt;</span>mapped_type<span class="token operator">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>iterator __i <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>__k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里查找一个 k >= __k 的位置用来进行插入</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// __i->first is greater than or equivalent to __k.</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>__i <span class="token operator">==</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__k<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>__i <span class="token operator">=</span> _M_t<span class="token punctuation">.</span><span class="token function">_M_emplace_hint_unique</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> std<span class="token operator">::</span>piecewise_construct<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                                          std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>__k<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                                          std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>__i <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> <span class="token function">value_type</span><span class="token punctuation">(</span>__k<span class="token punctuation">,</span> <span class="token function">mapped_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>__i<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//_M_emplace_hint_unique 定义</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_KeyOfValue</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> _Args<span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">typename</span> <span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span> _Val<span class="token punctuation">,</span> _KeyOfValue<span class="token punctuation">,</span> _Compare<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token operator">::</span>iterator </pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span> _Val<span class="token punctuation">,</span> _KeyOfValue<span class="token punctuation">,</span> _Compare<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token operator">::</span> <span class="token function">_M_emplace_hint_unique</span><span class="token punctuation">(</span>const_iterator __pos<span class="token punctuation">,</span> _Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    _Link_type __z <span class="token operator">=</span> <span class="token function">_M_create_node</span><span class="token punctuation">(</span>std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>_Args<span class="token operator">></span><span class="token punctuation">(</span>__args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>    __try</pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// 查询合法的插入点</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">auto</span> __res <span class="token operator">=</span> <span class="token function">_M_get_insert_hint_unique_pos</span><span class="token punctuation">(</span>__pos<span class="token punctuation">,</span> <span class="token function">_S_key</span><span class="token punctuation">(</span>__z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">// 有合法的插入点，执行插入</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>__res<span class="token punctuation">.</span>second<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">_M_insert_node</span><span class="token punctuation">(</span>__res<span class="token punctuation">.</span>first<span class="token punctuation">,</span> __res<span class="token punctuation">.</span>second<span class="token punctuation">,</span> __z<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token comment">// 已经存在了，就直接返回</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token function">_M_drop_node</span><span class="token punctuation">(</span>__z<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span>__res<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token function">__catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token function">_M_drop_node</span><span class="token punctuation">(</span>__z<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        __throw_exception_again<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>首先我们要知道 C++ map 的实现是基于红黑树，红黑树本身是一棵平衡二叉树，根节点大于左子树小于右子树。</p><p>插入的核心  <code>_M_get_insert_hint_unique_pos</code> ，主要功能是查询 key 对应的位置的前节点和后节点，来控制到底是插入在后节点左侧还是右侧：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Key</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Val</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_KeyOfValue</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>pair<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span> _Val<span class="token punctuation">,</span> _KeyOfValue<span class="token punctuation">,</span> _Compare<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token operator">::</span>_Base_ptr<span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">typename</span> <span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span> _Val<span class="token punctuation">,</span> _KeyOfValue<span class="token punctuation">,</span> _Compare<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token operator">::</span>_Base_ptr<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">_Rb_tree</span><span class="token operator">&lt;</span>_Key<span class="token punctuation">,</span> _Val<span class="token punctuation">,</span> _KeyOfValue<span class="token punctuation">,</span> _Compare<span class="token punctuation">,</span> _Alloc<span class="token operator">></span><span class="token operator">::</span> <span class="token function">_M_get_insert_hint_unique_pos</span><span class="token punctuation">(</span>const_iterator __position<span class="token punctuation">,</span> <span class="token keyword">const</span> key_type <span class="token operator">&amp;</span>__k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    iterator __pos <span class="token operator">=</span> __position<span class="token punctuation">.</span><span class="token function">_M_const_cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>_Base_ptr<span class="token punctuation">,</span> _Base_ptr<span class="token operator">></span> _Res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 等于 _M_end 可以理解为这棵树只有根节点，可能有叶节点</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node <span class="token operator">==</span> <span class="token function">_M_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 有叶节点，并且 key 比最右叶节点还大</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> _M_impl<span class="token punctuation">.</span><span class="token function">_M_key_compare</span><span class="token punctuation">(</span><span class="token function">_S_key</span><span class="token punctuation">(</span><span class="token function">_M_rightmost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __k<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token comment">// 插入点在 _M_rightmost () 右边</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">_M_rightmost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token comment">// 中间位置做二分查找定位插入点</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">_M_get_insert_unique_pos</span><span class="token punctuation">(</span>__k<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">// __k &lt; pos</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_impl<span class="token punctuation">.</span><span class="token function">_M_key_compare</span><span class="token punctuation">(</span>__k<span class="token punctuation">,</span> <span class="token function">_S_key</span><span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        iterator __before <span class="token operator">=</span> __pos<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">// 如果 pos 已经是最左节点</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node <span class="token operator">==</span> <span class="token function">_M_leftmost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token comment">// 插入点在 _M_leftmost () 左边</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span><span class="token function">_M_leftmost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_M_leftmost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// pre_pos &lt; __k &lt; pos</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_impl<span class="token punctuation">.</span><span class="token function">_M_key_compare</span><span class="token punctuation">(</span><span class="token function">_S_key</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>__before<span class="token punctuation">)</span><span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">,</span> __k<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token comment">//pre_pos 没有右子树</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_S_right</span><span class="token punctuation">(</span>__before<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token comment">// 插入点在 pre_pos 右边</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> __before<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                <span class="token comment">// 插入点在 pos 左边</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token comment">// 中间位置做二分查找定位插入点</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">_M_get_insert_unique_pos</span><span class="token punctuation">(</span>__k<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token comment">// pos &lt; k  </span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_impl<span class="token punctuation">.</span><span class="token function">_M_key_compare</span><span class="token punctuation">(</span><span class="token function">_S_key</span><span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">,</span> __k<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        iterator __after <span class="token operator">=</span> __pos<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token comment">// 如果 pos 已经是最右节点</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node <span class="token operator">==</span> <span class="token function">_M_rightmost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token comment">// 插入点在 pos 的右边</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">_M_rightmost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token comment">// pos &lt; __k &lt; after_pos</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_M_impl<span class="token punctuation">.</span><span class="token function">_M_key_compare</span><span class="token punctuation">(</span>__k<span class="token punctuation">,</span> <span class="token function">_S_key</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>__after<span class="token punctuation">)</span><span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            <span class="token comment">//pos 没有右子树</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_S_right</span><span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                <span class="token comment">// 插入点在 pos 的右边</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> __pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                <span class="token comment">// 插入点在 after_pos 的左边</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span>__after<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> __after<span class="token punctuation">.</span>_M_node<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>            <span class="token comment">// 中间位置做二分查找定位插入点</span></pre></td></tr><tr><td data-num="82"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">_M_get_insert_unique_pos</span><span class="token punctuation">(</span>__k<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token comment">// 查询到结果直接返回 res.second == 0 表示不插入</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">_Res</span><span class="token punctuation">(</span>__pos<span class="token punctuation">.</span>_M_node<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="piecewise_construct-和-tuple"><a class="anchor" href="#piecewise_construct-和-tuple">#</a> piecewise_construct 和 tuple&lt;&gt;()</h2><p><code>piecewise_construct</code>  类型主要是用于区分构造函数在构造时，参数混淆的问题。见上面 map 的构造，k 和 v 都可能是一个可变长参数，那么如果传递一个可变长的参数交由 k，v 自己去识别该从哪里开始进行截断，未免太劳烦编译器，因此  <code>piecewise_construct</code>  可以通过后置两个  <code>tuple</code>  的形式来完成参数的隔离，更详细的说明可以参考<span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL3V0aWxpdHkvcGllY2V3aXNlX2NvbnN0cnVjdA==">该文档</span>：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220526130238160.png" alt="image-20220526130238160" /></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 对于 map 中 node 的构造</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//std::piecewise_construct 用于申明分隔模式</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//std::tuple&lt;const key_type&amp;>(__k) 表示构造 k 的参数</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//std::tuple&lt;>() 表示构造 v 的参数</span></pre></td></tr><tr><td data-num="5"></td><td><pre>_M_t<span class="token punctuation">.</span><span class="token function">_M_emplace_hint_unique</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> std<span class="token operator">::</span>piecewise_construct<span class="token punctuation">,</span> std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>__k<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>那么还有一个问题： <code>tuple&lt;&gt;()</code>  是个什么妖魔鬼怪。下面来看一下它的定义：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Explicit specialization, zero-element tuple.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">tuple</span><span class="token operator">&lt;</span><span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>tuple <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token comment">/* no-op */</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// We need the default since we're going to define no-op</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// allocator constructors.</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// No-op allocator constructors.</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">tuple</span><span class="token punctuation">(</span>allocator_arg_t<span class="token punctuation">,</span> <span class="token keyword">const</span> _Alloc <span class="token operator">&amp;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Alloc</span><span class="token operator">></span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">tuple</span><span class="token punctuation">(</span>allocator_arg_t<span class="token punctuation">,</span> <span class="token keyword">const</span> _Alloc <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> tuple <span class="token operator">&amp;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>zero-element tuple</strong>，顾名思义，一个「空元组」，它是  <code>tuple&lt;T&gt;</code>  的一个特化，这里我猜想应该是为了用无参的默认构造函数来初始化 val，而专门传进去的一个「空元组」来 “凑数” 的～</p><h2 id="c-中的-pod"><a class="anchor" href="#c-中的-pod">#</a> C++ 中的 POD</h2><p>POD 是什么还得从一段 PhysX 代码说起，PhysX 自带的 Array 结构里有一个 popBack 操作，会根据 pop 的内容判断是否调用析构函数：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_INLINE T <span class="token function">popBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">PX_ASSERT</span><span class="token punctuation">(</span>mSize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    T t <span class="token operator">=</span> mData<span class="token punctuation">[</span>mSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArrayOfPOD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        mData<span class="token punctuation">[</span><span class="token operator">--</span>mSize<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token operator">~</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token operator">--</span>mSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>PX_FORCE_INLINE <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">isArrayOfPOD</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PX_LIBCPP</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> std<span class="token operator">::</span>is_trivially_copyable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">return</span> std<span class="token operator">::</span>tr1<span class="token operator">::</span>is_pod<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><code>std::tr1::is_pod</code>  便是用来判断一个对象是否为 POD 对象。那么怎么理解什么是 POD 对象呢？</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220719112117115.png" alt="image-20220719112117115" /></p><p>大致就是一个类如果可以用 <strong>struct</strong> 或者 <strong>union</strong> 代替，其只有数据定义，没有任何函数时那么就可以称之为一个 POD 对象。</p><h2 id="稀奇的函数指针声明"><a class="anchor" href="#稀奇的函数指针声明">#</a> 稀奇的函数指针声明</h2><p>函数指针正常的声明方法：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token function">RetType</span><span class="token punctuation">(</span><span class="token operator">*</span>FuncName<span class="token punctuation">)</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>这种正常声明比较反人类，变量名和类型参在一起。</p><p>另一种有趣的声明方式：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Identity</span><span class="token punctuation">&#123;</span><span class="token keyword">typedef</span> T FuncType<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Identity<span class="token operator">&lt;</span><span class="token function">RetType</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">::</span>FuncType FuncName<span class="token punctuation">;</span> <span class="token comment">// 看着就舒服多了</span></pre></td></tr></table></figure><h2 id="new-运算符和初始化问题"><a class="anchor" href="#new-运算符和初始化问题">#</a> new 运算符和初始化问题</h2><p>疑惑代码：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">friend</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t Size<span class="token punctuation">,</span> A<span class="token operator">&amp;</span> Base<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t Size<span class="token punctuation">,</span> A<span class="token operator">&amp;</span> Base<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"new A: "</span> <span class="token operator">&lt;&lt;</span> Size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        A a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">new</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>   <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 无报错版本 </span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// ------------ output ------------</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">new</span> A<span class="token operator">:</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 有报错版本:</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> bb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// ------------ error info ------------</span></pre></td></tr><tr><td data-num="30"></td><td><pre>Segmentation <span class="token function">fault</span>      <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span></pre></td></tr></table></figure><p>说明：首先 A 类重写了 new 操作符，根据 new 运算符重载规则  <code>new(a)B()</code>  会被解释成  <code> operator new(sizeof(B()), a)</code> :</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221124163931675.png" alt="image-20221124163931675" /></p><p>new 操作符有两个含义：</p><ul><li>通过给定的对象，计算出需要分配的空间大小，并在 new 运算符内完成内存分配。</li><li>在分配好的内存地址内执行构造函数来构造对象。</li></ul><p>这里  <code>inline void* operator new(size_t Size, A&amp; Base)</code>  的返回值是 NULL，其实代表需要在 NULL 地址处对类 B 进行构造。</p><p>上述两个例子的唯一区别在于类 B 是否有成员变量，如果有成员变量的情况下需要对成员变量进行<strong>初始化</strong>，而初始化需要访问对象内存，因此导致 <strong>core dumped</strong></p><h3 id="扩展"><a class="anchor" href="#扩展">#</a> 扩展</h3><p>实际上 new 操作在构造函数的时候可以不进行初始化，这个问题上面已经提到过了，就是不添加  <code>()</code>  通过  <code>new(a)B</code>  进行构造。这样也是可行的</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        A a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">new</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>B<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// ------------ output ------------</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">new</span> A<span class="token operator">:</span> <span class="token number">4</span></pre></td></tr></table></figure><p>但是如果类 B 还包含了虚函数表的情况下，这种构造也会有问题，因为虚函数表不管对象是否初始化，都需要创建，就免不了对内存的访问</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token keyword">virtual</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// ------------ error info ------------</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Segmentation <span class="token function">fault</span>      <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="奇怪的拷贝构造和静态函数的临时变量"><a class="anchor" href="#奇怪的拷贝构造和静态函数的临时变量">#</a> 奇怪的拷贝构造和静态函数的临时变量</h2><p>我们都知道静态函数的临时变量只会在第一次函数执行的时候被初始化：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TAlignedBytes</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">inline</span> <span class="token function">TAlignedBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">static</span> TAlignedBytes <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                TAlignedBytes s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"temp var :"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token keyword">return</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>   <span class="token keyword">auto</span> ss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst ss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> ss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        </pre></td></tr><tr><td data-num="27"></td><td><pre>   <span class="token keyword">auto</span> sss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst sss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> sss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// ------------ output ------------</span></pre></td></tr><tr><td data-num="33"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff11504dcc</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="34"></td><td><pre>inst ss<span class="token operator">:</span><span class="token number">0x7fff11504dec</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="35"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff11504dcc</span> <span class="token operator">=</span> <span class="token number">32718</span></pre></td></tr><tr><td data-num="36"></td><td><pre>inst sss<span class="token operator">:</span><span class="token number">0x7fff11504de8</span> <span class="token operator">=</span> <span class="token number">32718</span></pre></td></tr></table></figure><p>但是如果类 TAlignedBytes 定义了<strong>拷贝构造函数</strong>的情况下，事情将截然不同，临时变量看起来每次执行都会被初始化，但拷贝构造函数并不会被执行：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TAlignedBytes</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">inline</span> <span class="token function">TAlignedBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">inline</span> <span class="token function">TAlignedBytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> TAlignedBytes<span class="token operator">&amp;</span> Other<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy contructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> Other<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">static</span> TAlignedBytes <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                TAlignedBytes s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"temp var :"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">return</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>   <span class="token keyword">auto</span> ss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst ss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> ss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        </pre></td></tr><tr><td data-num="33"></td><td><pre>   <span class="token keyword">auto</span> sss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst sss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> sss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// ------------ output ------------</span></pre></td></tr><tr><td data-num="39"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff18ef1bac</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="40"></td><td><pre>inst ss<span class="token operator">:</span><span class="token number">0x7fff18ef1bac</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="41"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff18ef1ba8</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="42"></td><td><pre>inst sss<span class="token operator">:</span><span class="token number">0x7fff18ef1ba8</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr></table></figure><p>然后看了一下汇编代码，发现当存在拷贝构造的时候，静态函数内的临时变量被编译优化了，实际上是用外部传递的 ss 和 sss 作为变量传递给 rdi，再由 rdi 传递给 <strong>TAlignedBytes</strong> 的构造函数作为 this 指针，析构函数也没有执行：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20221125191729647.png" alt="image-20221125191729647" /></p><p>在添加  <code>-fno-elide-constructors</code>  编译指令后，编译临时变量的优化被禁用，因此该<strong>特性</strong>也被抹除，这时候拷贝构造也被执行：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// ------------ output ------------</span></pre></td></tr><tr><td data-num="2"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff0df5392c</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>copy contructor<span class="token operator">:</span> <span class="token number">0x7fff0df53958</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7fff0df5392c</span></pre></td></tr><tr><td data-num="5"></td><td><pre>copy contructor<span class="token operator">:</span> <span class="token number">0x7fff0df53954</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7fff0df53958</span></pre></td></tr><tr><td data-num="7"></td><td><pre>inst ss<span class="token operator">:</span><span class="token number">0x7fff0df53954</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff0df5392c</span> <span class="token operator">=</span> <span class="token number">32755</span></pre></td></tr><tr><td data-num="9"></td><td><pre>copy contructor<span class="token operator">:</span> <span class="token number">0x7fff0df5395c</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7fff0df5392c</span></pre></td></tr><tr><td data-num="11"></td><td><pre>copy contructor<span class="token operator">:</span> <span class="token number">0x7fff0df53950</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7fff0df5395c</span></pre></td></tr><tr><td data-num="13"></td><td><pre>inst sss<span class="token operator">:</span><span class="token number">0x7fff0df53950</span> <span class="token operator">=</span> <span class="token number">32755</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7fff0df53950</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7fff0df53954</span></pre></td></tr></table></figure><h3 id="暂时无法解释的现象"><a class="anchor" href="#暂时无法解释的现象">#</a> 暂时无法解释的现象：</h3><p>上面都只是创建了两个对象的结果，如果创建更多会怎么样？</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 理论上有构造函数的版本应该每次对象都不一样，且都被重新初始化，但事实并非如此</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">TAlignedBytes</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">inline</span> <span class="token function">TAlignedBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">inline</span> <span class="token function">TAlignedBytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> TAlignedBytes<span class="token operator">&amp;</span> Other<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy contructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> Other<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">static</span> TAlignedBytes <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>TAlignedBytes s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"temp var :"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">return</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>   <span class="token keyword">auto</span> ss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst ss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> ss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>   <span class="token keyword">auto</span> sss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst sss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> sss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>   <span class="token keyword">auto</span> ssss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst ssss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ssss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> ssss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>   <span class="token keyword">auto</span> sssss <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inst sssss:"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sssss <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> sssss<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// ------------ output ------------</span></pre></td></tr><tr><td data-num="46"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff6dfd2acc</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="47"></td><td><pre>inst ss<span class="token operator">:</span><span class="token number">0x7fff6dfd2acc</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="48"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff6dfd2ac8</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="49"></td><td><pre>inst sss<span class="token operator">:</span><span class="token number">0x7fff6dfd2ac8</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="50"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff6dfd2ac4</span> <span class="token operator">=</span> <span class="token number">32767</span></pre></td></tr><tr><td data-num="51"></td><td><pre>inst ssss<span class="token operator">:</span><span class="token number">0x7fff6dfd2ac4</span> <span class="token operator">=</span> <span class="token number">32767</span></pre></td></tr><tr><td data-num="52"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7fff6dfd2ac0</span> <span class="token operator">=</span> <span class="token number">1845308336</span></pre></td></tr><tr><td data-num="53"></td><td><pre>inst sssss<span class="token operator">:</span><span class="token number">0x7fff6dfd2ac0</span> <span class="token operator">=</span> <span class="token number">1845308336</span></pre></td></tr></table></figure><p>无意间在给 TAlignedBytes 添加上析构函数后发现更奇怪的现象，虽然每次都会创建新的对象，但是初始化变成交替进行了：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// ------------ output ------------</span></pre></td></tr><tr><td data-num="2"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7ffcef314b6c</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>inst ss<span class="token operator">:</span><span class="token number">0x7ffcef314b6c</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7ffcef314b68</span> <span class="token operator">=</span> <span class="token number">4196464</span></pre></td></tr><tr><td data-num="5"></td><td><pre>inst sss<span class="token operator">:</span><span class="token number">0x7ffcef314b68</span> <span class="token operator">=</span> <span class="token number">4196464</span></pre></td></tr><tr><td data-num="6"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7ffcef314b64</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>inst ssss<span class="token operator">:</span><span class="token number">0x7ffcef314b64</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>temp var <span class="token operator">:</span><span class="token number">0x7ffcef314b60</span> <span class="token operator">=</span> <span class="token number">4197520</span></pre></td></tr><tr><td data-num="9"></td><td><pre>inst sssss<span class="token operator">:</span><span class="token number">0x7ffcef314b60</span> <span class="token operator">=</span> <span class="token number">4197520</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7ffcef314b60</span> <span class="token operator">=</span> <span class="token number">4197520</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7ffcef314b64</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7ffcef314b68</span> <span class="token operator">=</span> <span class="token number">4196464</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token operator">~</span>TAlignedBytes<span class="token operator">:</span> <span class="token number">0x7ffcef314b6c</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr></table></figure><h2 id="函数属性声明-__attribute__"><a class="anchor" href="#函数属性声明-__attribute__">#</a> 函数属性声明  <code>__attribute__</code></h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 强制内联，任何情况下都会进行内联，即使编译器关闭了内联优化</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">inline</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>always_inline<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 强制不内联</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>noinline<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    </pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 返回值未被使用时，编译会触发 warn</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>warn_unused_result<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 标识函数没有返回值</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="模板数组应用的声明"><a class="anchor" href="#模板数组应用的声明">#</a> 模板数组应用的声明</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> size_t SIZE<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">)</span><span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="enable_if_t-实现模板的类型指定"><a class="anchor" href="#enable_if_t-实现模板的类型指定">#</a> enable_if_t 实现模板的类型指定</h2><p>大概背景是想通过同一个模板调用两个不同的结构体中的相同定义的函数，因此诞下的 hack 产物：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">B</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">using</span> require_A_or_B <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token operator">::</span>enable_if_t<span class="token operator">&lt;</span>std<span class="token operator">::</span>is_same<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> A<span class="token operator">></span><span class="token operator">::</span>value <span class="token operator">||</span> std<span class="token operator">::</span>is_same<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> B<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> require_A_or_B<span class="token operator">&lt;</span>T<span class="token operator">></span> U <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">C</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">void</span> <span class="token function">pp</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> require_A_or_B<span class="token operator">&lt;</span>T<span class="token operator">></span> U<span class="token operator">></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">C</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span><span class="token operator">::</span><span class="token function">pp</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>t<span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>A a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>C<span class="token operator">&lt;</span>A<span class="token operator">></span> ca<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>ca<span class="token punctuation">.</span><span class="token function">pp</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>B b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>C<span class="token operator">&lt;</span>B<span class="token operator">></span> cb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>cb<span class="token punctuation">.</span><span class="token function">pp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">// --------------------- output ---------------------</span></pre></td></tr><tr><td data-num="52"></td><td><pre>a</pre></td></tr><tr><td data-num="53"></td><td><pre>b</pre></td></tr></table></figure><p>唯一比较可惜的事情在于  <code>void C&lt;T, U&gt;::pp(T t)</code>  中对于  <code>t.P();</code>  的调用，编辑器没办法给出代码提示，因此类似盲打，编码体验比较差。</p><h3 id="decltype-declval"><a class="anchor" href="#decltype-declval">#</a> decltype &amp;&amp; declval</h3><p>基于上述问题的另一种解决思路就是通过 decltype 来做类型推断，效果会好上不少</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">B</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">D</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">auto</span> <span class="token function">pp</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: ‘class B’ has no member named ‘P’</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">auto</span> <span class="token class-name">D</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">pp</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    t<span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    A a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    B b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    D<span class="token operator">&lt;</span>A<span class="token operator">></span> da<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    da<span class="token punctuation">.</span><span class="token function">pp</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ok!</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>D<span class="token operator">&lt;</span>B<span class="token operator">></span> db<span class="token punctuation">;</span>   <span class="token comment">// error！</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>declval 可以保证没有构造函数的对象也能够正确被推断，效果是是一样的，后者兼容性更强一些：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">D</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">auto</span> <span class="token function">pp</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>declval<span class="token operator">&lt;</span>T<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">auto</span> <span class="token class-name">D</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">pp</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>declval<span class="token operator">&lt;</span>T<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    t<span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="requires-concept-来自-c-20-的黑科技"><a class="anchor" href="#requires-concept-来自-c-20-的黑科技">#</a> requires + concept  来自 c++ 20 的黑科技</h3><p>话不多说，直接上代码，好用就完事了～</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">concept</span> <span class="token class-name">HasFuncP</span> <span class="token operator">=</span> <span class="token keyword">requires</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t<span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// error! error info: in requirements with 'T&amp;amp; t' [with T = B]</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">B</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">D</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pp</span><span class="token punctuation">(</span>HasFuncP <span class="token keyword">auto</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">D</span><span class="token operator">::</span><span class="token function">pp</span><span class="token punctuation">(</span>HasFuncP <span class="token keyword">auto</span> t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    t<span class="token punctuation">.</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    A a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token class-name">D</span><span class="token operator">::</span><span class="token function">pp</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ok!</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    B b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token class-name">D</span><span class="token operator">::</span><span class="token function">pp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error! error info: no matching function for call to 'D::pp(B&amp;amp;)'</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;本文主要是介绍一些个人开发过程中遇到的奇怪代码，奇怪并非指代代码错误或写法低效，单纯个人知识盲区&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;杂项&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#杂项&quot;&gt;#&lt;/a&gt; 杂项&lt;/h1</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="编程语言" scheme="https://hakuya.me/categories/learning/programlanguage/"/>
    
    <category term="cpp" scheme="https://hakuya.me/categories/learning/programlanguage/cpp/"/>
    
    
    <category term="C++" scheme="https://hakuya.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Transform篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Transform%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Transform%E7%AF%87/</id>
    <published>2022-05-21T07:06:00.000Z</published>
    <updated>2022-12-29T01:36:04.547Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span></p></div><h1 id="physxtransform篇"><a class="anchor" href="#physxtransform篇">#</a> PhysX——Transform 篇</h1><p>用于描述 PhysX 系统下 Transform 操作的类，其提供了两个数据：</p><ul><li>PxQuat q：用于描述旋转的四元数 q</li><li>PxVec3 p：用于描述平移的向量 p</li></ul><h2 id="pxvec3"><a class="anchor" href="#pxvec3">#</a> PxVec3</h2><p>一个三维向量，用于表示一个物体从 A 点移动到 B 点所需的<strong>方向</strong>和<strong>距离</strong></p><h2 id="pxquat"><a class="anchor" href="#pxquat">#</a> PxQuat</h2><p>四元数，用于描述三维空间下角度变化的数据结构，说到四元素，这里就不得不提到「旋转矩阵」和「欧拉角」，三者均用于表示空间层面的旋转。</p><ul><li>四元数：由四个数字组成</li><li>旋转矩阵：由 3X3 的矩阵表示</li><li>欧拉角：由三个数字组成</li></ul><p>在对四元数进行展开之前，先简单来聊聊「旋转矩阵」和「欧拉角」：</p><p>「旋转矩阵」在旋转方面的应用可以参考<a href="https://hakuya.me/learning/games/Game101/%E4%BA%8C%E3%80%81Transformation/#%E6%97%8B%E8%BD%ACrotate"> Transform 文章</a>，其中的一些证明就不再赘述，旋转矩阵的缺点就是需要用 9 个数表示，并且旋转计算效率较低，而且会产生<span class="exturl" data-url="aHR0cHM6Ly9nYW1lZGV2Lm5ldC9mb3J1bXMvdG9waWMvNDk1OTQ1LXdoYXRzLW1hdHJpeC1jcmVlcC80MjM1MjUwLw==">矩阵蠕变</span>（由于浮点数精度丢失导致的误差累积），在多次变换后使得矩阵本身不合法（非正交），需要通过正交化进行修正，但正交化性能消耗较高。不过「旋转矩阵」理解上相对较为简单，且 GPU 被设计成更适合进行矩阵运算，因此也被广泛应用在图形渲染领域。</p><p>「欧拉角」则通过 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGF2ZW5wb3J0X2NoYWluZWRfcm90YXRpb25z">链式旋转</span> 的方式，来实现到指定方向的旋转。这种旋转必须明确定义旋转的先后关系。例如 z&gt;x&gt;y。链式旋转一次操作等同于进行了三次不同坐标轴的旋转，理解上较为直观，但也引入了一个严重的问题：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2ltYmFsX2xvY2s=">万向节死锁</span>。其本质是由于链式旋转过程中基坐标变化，导致其中两个旋转轴发生重叠，丢失了其中一个维度的旋转能力。常见的解决办法：例如 Unity 下的摄像机通常通过限制旋转轴范围的方式来避免该问题。</p><hr /><p>接下来我们再来聊聊「四元数」：</p><p>「四元数」四元数的意义其实更在于数学层面，其思想来源于 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUm9kcmlndWVzJTI3X3JvdGF0aW9uX2Zvcm11bGE=">罗德里格斯旋转公式 (Rodrigues’ Rotation Formula)</span>，为了后续理解，简单介绍一下该旋转公式：</p><p>假定要把一个三维向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>，围绕一个旋转轴 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span>，旋转 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> 角度。那么势必就可以把向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span> 投影到轴 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span> 及垂直于轴的平面上。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220530194121538.png" alt="image-20220530194121538" /></p><p>因此整个旋转也可以视为对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mo>∥</mo></msub></mrow><annotation encoding="application/x-tex">v_\parallel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7857599999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mrel mtight">∥</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mo>⊥</mo></msub></mrow><annotation encoding="application/x-tex">v_\perp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mrel mtight">⊥</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 绕 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span> 轴进行旋转。然后根据三角函数和一些几何运算，就可以推导出一个普适的三维旋转公式：</p>\begin{align}v\prime &= v\prime\parallel + v\prime\perp \\&= v \parallel + cos(θ)v\perp + sin(θ)(u × v\perp) \\&= cos(θ)v + (1 − cos(θ))(u · v)u + sin(θ)(u × v)\end{align}<hr /><p>介绍完旋转公式，接下来再来看看四元数的定义，四元数本身由三个虚部 + 一个实部组成：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi><mo>+</mo><mi>b</mi><mtext> </mtext><mi mathvariant="bold">i</mi><mo>+</mo><mi>c</mi><mtext> </mtext><mi mathvariant="bold">j</mi><mo>+</mo><mi>d</mi><mtext> </mtext><mi mathvariant="bold">k</mi></mstyle></mrow><annotation encoding="application/x-tex">{\displaystyle a+b\ \mathbf {i} +c\ \mathbf {j} +d\ \mathbf {k} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace"> </span><span class="mord"><span class="mord mathbf">i</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mspace"> </span><span class="mord"><span class="mord mathbf">j</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathbf">k</span></span></span></span></span></span></p><p>这里再引入一个四元数的计算「Graßmann 积」，假定对两个四元数进行求积：</p>\begin{align}q_1q_2 &=(a+bi+cj+dk)(e+fi+gj+hk) \\&=𝑎𝑒 + 𝑎𝑓𝑖 + 𝑎𝑔𝑗 + 𝑎ℎ𝑘 + \\&\quad𝑏𝑒𝑖 + 𝑏𝑓𝑖^2 + 𝑏𝑔𝑖𝑗 + 𝑏ℎ𝑖𝑘 +  \\&\quad𝑐𝑒𝑗 + 𝑐𝑓𝑗𝑖 + 𝑐𝑔𝑗^2 + 𝑐ℎ𝑗𝑘 + \\&\quad𝑑𝑒𝑘 + 𝑑𝑓𝑘𝑖 + 𝑑𝑔𝑘𝑗 + 𝑑ℎ𝑘^2\end{align}<p>这里再对照虚部的计算规则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><msup><mi>j</mi><mn>2</mn></msup><mo>=</mo><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><mi>i</mi><mi>j</mi><mi>k</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i^2 = j^2 = k^2 = ijk = -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>，对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">q_1q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 进行化简：</p>\begin{align}q_1q_2 &= (ae - bf - cg - dh) + &&\\& \quad(be + af - dg + ch)i + &&\\& \quad(ce + df + ag - bh)j + &&\\& \quad(de - cf + bg + ah)k &&\\\\\text{矩阵形式表示：} & q_1q_2 = \begin{bmatrix}a & -b & -c & -d \\ b & a & -d & c \\ c & d & a & -b \\ d & -c & b & a\end{bmatrix}\begin{bmatrix}e \\f \\g \\h \\\end{bmatrix}\end{align}<p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo>=</mo><mo stretchy="false">[</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo separator="true">,</mo><mspace width="1em"/><mi>u</mi><mo>=</mo><mo stretchy="false">[</mo><mi>f</mi><mo separator="true">,</mo><mi>g</mi><mo separator="true">,</mo><mi>h</mi><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">v=[b,c,d]^T, \quad u=[f,g,h]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">h</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，就可以推导出「Graßmann 积」的如下性质：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mo>⋅</mo><mi>u</mi><mo>=</mo><mi>b</mi><mi>f</mi><mo>+</mo><mi>c</mi><mi>g</mi><mo>+</mo><mi>d</mi><mi>h</mi><mspace linebreak="newline"></mspace><mi>v</mi><mo>×</mo><mi>u</mi><mo>=</mo><mo stretchy="false">[</mo><mi>c</mi><mi>h</mi><mo>−</mo><mi>d</mi><mi>g</mi><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mo>−</mo><mi>b</mi><mi>h</mi><mo separator="true">,</mo><mi>b</mi><mi>g</mi><mo>−</mo><mi>c</mi><mi>f</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mtext>再带入上面的q1q2公式:</mtext><mspace linebreak="newline"></mspace><msub><mi>q</mi><mn>1</mn></msub><msub><mi>q</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mi>e</mi><mo>−</mo><mi>v</mi><mo>⋅</mo><mi>u</mi><mo separator="true">,</mo><mi>a</mi><mi>u</mi><mo>+</mo><mi>e</mi><mi>v</mi><mo>+</mo><mi>v</mi><mo>×</mo><mi>u</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mtext>对于 a，e 都为 0 的纯四元数又可以进一步简化：</mtext><mspace linebreak="newline"></mspace><msub><mi>q</mi><mn>1</mn></msub><msub><mi>q</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>v</mi><mo>⋅</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>×</mo><mi>u</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">v \cdot u = bf + cg + dh \\v \times u = [ch -dg,df - bh,bg - cf] \\\text{再带入上面的q1q2公式:}\\q_1q_2 = [ae - v \cdot u, au + ev + v \times u] \\ \text{对于 a，e 都为 0 的纯四元数又可以进一步简化：} \\q_1q_2 = [-v \cdot u, v \times u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">h</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">再带入上面的</span><span class="mord">q1q2</span><span class="mord cjk_fallback">公式</span><span class="mord">:</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">对于</span><span class="mord"> a</span><span class="mord cjk_fallback">，</span><span class="mord">e </span><span class="mord cjk_fallback">都为</span><span class="mord"> 0 </span><span class="mord cjk_fallback">的纯四元数又可以进一步简化：</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mclose">]</span></span></span></span></span></p><p>再把上面推导出的「罗德里格斯旋转公式」进行套用：</p>\begin{align}𝑣\prime &= 𝑣\prime\parallel+ 𝑣\prime\perp \\&=𝑣 \parallel+ cos(θ)v\perp + sin(θ)(u × v\perp) \\&=𝑣\parallel+ q𝑣\perp  &&\text{其中: }𝑞 = [cos(θ), sin(θ)u] \\&=𝑝𝑝^{−1}𝑣\parallel + 𝑝𝑝𝑣\perp  &&\text{令: }p^2 = q, \quad p = [cos(\frac{θ}{2}), sin(\frac{θ}{2})u] \\&=𝑝𝑣\parallel 𝑝^∗ + 𝑝𝑣\perp 𝑝^*   &&\text{[引理1]单位四元数p满足：} p^{-1} = p^* \\& &&\text{[引理2]v是纯四元数时满足：}p𝑣=vp \\& &&\text{[引理3]如果p又正交于v满足：}p𝑣\perp = 𝑣\perp p^* \\&=𝑝𝑣𝑝^∗\text{其中：} p = [cos(\frac{θ}{2}), sin(\frac{θ}{2})u]\end{align}<p>到此，四元数旋转就推导完成了。除此以外，四元数还具备两个特殊的性质：「旋转叠加」和「旋转插值」。</p><h3 id="旋转叠加"><a class="anchor" href="#旋转叠加">#</a> 旋转叠加</h3><p>本质上就是对两次旋转进行合并，得到一个新的旋转结果，例如进行一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 旋转后再进行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 旋转，四元数的表示： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub><msub><mi>p</mi><mn>1</mn></msub><mi>v</mi><msubsup><mi>p</mi><mn>1</mn><mo>∗</mo></msubsup><msubsup><mi>p</mi><mn>2</mn><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">p_2p_1vp_1^*p_2^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.936804em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span></p><p>上述公式可以进一步化简：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub><msub><mi>p</mi><mn>1</mn></msub><mi>v</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>2</mn></msub><msub><mi>p</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">p_2p_1v(p_2p_1)^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>，因此只需要计算一次 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_2p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的结果即可，四元数乘法上面也已经介绍 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mi>e</mi><mo>−</mo><mi>v</mi><mo>⋅</mo><mi>u</mi><mo separator="true">,</mo><mi>a</mi><mi>u</mi><mo>+</mo><mi>e</mi><mi>v</mi><mo>+</mo><mi>v</mi><mo>×</mo><mi>u</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p_1p_2 = [ae - v \cdot u, au + ev + v \times u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mclose">]</span></span></span></span></p><h3 id="旋转插值"><a class="anchor" href="#旋转插值">#</a> 旋转插值</h3><p>假设旋转 p 是围绕某个轴旋转 1°，那根据「旋转叠加」，旋转 360° 可以写作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mn>360</mn></msup><mi>v</mi><msup><msup><mi>p</mi><mo>∗</mo></msup><mn>360</mn></msup></mrow><annotation encoding="application/x-tex">p^{360} v {p^*}^{360}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0871439999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8927039999999999em;"><span style="top:-3.1415960000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>。这里再根据上面的指数公式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi>u</mi><mo stretchy="false">]</mo><mtext>，令：</mtext><mi>q</mi><mo>=</mo><msup><mi>p</mi><mn>2</mn></msup><mo separator="true">,</mo><mspace width="1em"/><mi>q</mi><mo>=</mo><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mi>u</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p = [cos(\frac{\theta}{2}), sin(\frac{\theta}{2})u] \text{，令：}q = p^2, \quad q = [cos(\theta), sin(\theta)u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal">u</span><span class="mclose">]</span><span class="mord text"><span class="mord cjk_fallback">，令：</span></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mord mathnormal">u</span><span class="mclose">]</span></span></span></span></span></p><p>进行一般化和幂运算的求证（不在此证明），可以得到一个指数和 θ 角的关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>p</mi><mi>n</mi></msup><mo>=</mo><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>n</mi><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi>u</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p^n = [cos(n\frac{\theta}{2}), sin(n\frac{\theta}{2})u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal">u</span><span class="mclose">]</span></span></span></span></span></p><p>回过头来再看看的旋转，如果需要在 0~360° 之间进行插值，实际上就对于 p 中的 θ，在 0~360 进行插值。</p><p>把该规则一般化，变成可以在任意两个旋转 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_0,p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 内做插值，并且插值范围统一在 [0~1] 区间。</p><p>这里假设从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 旋转到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的旋转为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo mathvariant="normal">′</mo></mrow><annotation encoding="application/x-tex">p\prime</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord">′</span></span></span></span>  那么就需要一个有关 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mi>p</mi><mo mathvariant="normal">′</mo></mrow><mi>t</mi></msup></mrow><annotation encoding="application/x-tex">{p\prime}^t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9879959999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="mord">′</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span> 的公式，在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mi>p</mi><mo mathvariant="normal">′</mo></mrow><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">{p\prime}^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="mord">′</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span> 的时候是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mi>p</mi><mo mathvariant="normal">′</mo></mrow><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">{p\prime}^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="mord">′</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span> 的时候是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mrow><mi>p</mi><mo mathvariant="normal">′</mo></mrow><mi>t</mi></msup><msub><mi>p</mi><mn>0</mn></msub><mo>=</mo><msub><mi>p</mi><mn>1</mn></msub><mtext>，当前 t = 0 时结果为 p0，当 t = 1 时结果为 p1</mtext><mspace linebreak="newline"></mspace><mtext>因此：</mtext><mi>p</mi><mo mathvariant="normal">′</mo><msub><mi>p</mi><mn>0</mn></msub><mo>=</mo><msub><mi>p</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><mi>p</mi><mo mathvariant="normal">′</mo><mo>=</mo><msub><mi>p</mi><mn>1</mn></msub><msubsup><mi>p</mi><mn>0</mn><mo>∗</mo></msubsup><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">{p\prime}^tp_0 = p_1 \text{，当前 t = 0 时结果为 p0，当 t = 1 时结果为 p1} \\\text{因此：}p\prime p_0 = p_1  \\p\prime = p_1p_0^* \\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.037996em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="mord">′</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.843556em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">，当前</span><span class="mord"> t = 0 </span><span class="mord cjk_fallback">时结果为</span><span class="mord"> p0</span><span class="mord cjk_fallback">，当</span><span class="mord"> t = 1 </span><span class="mord cjk_fallback">时结果为</span><span class="mord"> p1</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">因此：</span></span><span class="mord mathnormal">p</span><span class="mord">′</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9856959999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7386959999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span></span></span></span></p><p>计算求得插值的一般形式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>l</mi><mi>e</mi><mi>r</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><msubsup><mi>p</mi><mn>0</mn><mo>∗</mo></msubsup><mo stretchy="false">)</mo></mrow><mi>t</mi></msup><msub><mi>p</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">slerp(p_0, p_1, t) = {(p_1p_0^*)}^tp_0, t∈[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.183456em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.933456em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><h3 id="pxquat相关接口说明"><a class="anchor" href="#pxquat相关接口说明">#</a> PxQuat 相关接口说明</h3><p>前面简要介绍了有关四元数的计算过程，这里针对以上内容，结合实际代码来探讨一下 PhysX 内有关四元数的实现：</p><h3 id="四元数的构造"><a class="anchor" href="#四元数的构造">#</a> 四元数的构造</h3><p>根据之前的定义，四元数可以用来描述围绕某个单位轴旋转 θ 角旋转的操作 p：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi>i</mi><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi>j</mi><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[cos(\frac{θ}{2}), sin(\frac{θ}{2})i, sin(\frac{θ}{2})j, sin(\frac{θ}{2})k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span></p><p>对应到代码上来说 w 表示实部，x、y、z 表示 i、j、k：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_CUDA_CALLABLE PX_INLINE <span class="token function">PxQuat</span><span class="token punctuation">(</span><span class="token keyword">float</span> angleRadians<span class="token punctuation">,</span> <span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> unitAxis<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">PX_ASSERT</span><span class="token punctuation">(</span><span class="token function">PxAbs</span><span class="token punctuation">(</span><span class="token number">1.0f</span> <span class="token operator">-</span> unitAxis<span class="token punctuation">.</span><span class="token function">magnitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> a <span class="token operator">=</span> angleRadians <span class="token operator">*</span> <span class="token number">0.5f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> s <span class="token operator">=</span> <span class="token function">PxSin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    w <span class="token operator">=</span> <span class="token function">PxCos</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cos(θ/2)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    x <span class="token operator">=</span> unitAxis<span class="token punctuation">.</span>x <span class="token operator">*</span> s<span class="token punctuation">;</span><span class="token comment">// sin&#123;θ/2)i</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    y <span class="token operator">=</span> unitAxis<span class="token punctuation">.</span>y <span class="token operator">*</span> s<span class="token punctuation">;</span><span class="token comment">// sin(θ/2)j</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    z <span class="token operator">=</span> unitAxis<span class="token punctuation">.</span>z <span class="token operator">*</span> s<span class="token punctuation">;</span><span class="token comment">// sin(θ/2)k</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="四元数的加减法"><a class="anchor" href="#四元数的加减法">#</a> 四元数的加减法</h3><p>这个比较简单，就是对应的实部和实部相加减，虚部和虚部相加减：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE PxQuat<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxQuat<span class="token operator">&amp;</span> q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    x <span class="token operator">+=</span> q<span class="token punctuation">.</span>x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    y <span class="token operator">+=</span> q<span class="token punctuation">.</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    z <span class="token operator">+=</span> q<span class="token punctuation">.</span>z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    w <span class="token operator">+=</span> q<span class="token punctuation">.</span>w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE PxQuat<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">-=</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxQuat<span class="token operator">&amp;</span> q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    x <span class="token operator">-=</span> q<span class="token punctuation">.</span>x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    y <span class="token operator">-=</span> q<span class="token punctuation">.</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    z <span class="token operator">-=</span> q<span class="token punctuation">.</span>z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    w <span class="token operator">-=</span> q<span class="token punctuation">.</span>w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="四元数的乘法"><a class="anchor" href="#四元数的乘法">#</a> 四元数的乘法</h3><p>这个之前也介绍过了：</p>\begin{align}q_1q_2 &= (w_1w_2 - x_1x_2 - y_1y_2 - z_1z_2) + \\& \quad(x_1w_2 + w_1x_2 - z_1y_2 + y_1z_2)i + \\& \quad(y_1w_2 + z_1x_2 + w_1y_2 - x_1z_2)j + \\& \quad(z_1w_2 - y_1x_2 + x_1y_2 + w_1z_2)k\end{align}<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_CUDA_CALLABLE PX_INLINE PxQuat <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxQuat<span class="token operator">&amp;</span> q<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">PxQuat</span><span class="token punctuation">(</span>w <span class="token operator">*</span> q<span class="token punctuation">.</span>x <span class="token operator">+</span> q<span class="token punctuation">.</span>w <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> q<span class="token punctuation">.</span>z <span class="token operator">-</span> q<span class="token punctuation">.</span>y <span class="token operator">*</span> z<span class="token punctuation">,</span>  <span class="token comment">// w1x2 + w2x1 + y1z2 - z1y2</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                  w <span class="token operator">*</span> q<span class="token punctuation">.</span>y <span class="token operator">+</span> q<span class="token punctuation">.</span>w <span class="token operator">*</span> y <span class="token operator">+</span> z <span class="token operator">*</span> q<span class="token punctuation">.</span>x <span class="token operator">-</span> q<span class="token punctuation">.</span>z <span class="token operator">*</span> x<span class="token punctuation">,</span>  <span class="token comment">// w1y2 + y1w2 + z1x2 - z2x1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                  w <span class="token operator">*</span> q<span class="token punctuation">.</span>z <span class="token operator">+</span> q<span class="token punctuation">.</span>w <span class="token operator">*</span> z <span class="token operator">+</span> x <span class="token operator">*</span> q<span class="token punctuation">.</span>y <span class="token operator">-</span> q<span class="token punctuation">.</span>x <span class="token operator">*</span> y<span class="token punctuation">,</span>  <span class="token comment">// w1z2 + w2z1 + x1y2 - x2y1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                  w <span class="token operator">*</span> q<span class="token punctuation">.</span>w <span class="token operator">-</span> x <span class="token operator">*</span> q<span class="token punctuation">.</span>x <span class="token operator">-</span> y <span class="token operator">*</span> q<span class="token punctuation">.</span>y <span class="token operator">-</span> z <span class="token operator">*</span> q<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// w1w2 - x1x2 -y1y2 - z1z2</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="四元数的点乘"><a class="anchor" href="#四元数的点乘">#</a> 四元数的点乘</h3><p>四元数的点乘意义在于假设四元数是四维空间中的向量，点乘用于求解两个四维向量夹角，计算方式其实和三维向量类似：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE <span class="token keyword">float</span> <span class="token function">dot</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxQuat<span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">return</span> x <span class="token operator">*</span> v<span class="token punctuation">.</span>x <span class="token operator">+</span> y <span class="token operator">*</span> v<span class="token punctuation">.</span>y <span class="token operator">+</span> z <span class="token operator">*</span> v<span class="token punctuation">.</span>z <span class="token operator">+</span> w <span class="token operator">*</span> v<span class="token punctuation">.</span>w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="四元数的旋转"><a class="anchor" href="#四元数的旋转">#</a> 四元数的旋转</h3><p>四元数的旋转和逆旋转表示相对抽象一些，但核心思想都是通过将四元数转成旋转矩阵，在进行矩阵变化，这里再计算上面用工程思想做了一定的简化操作。</p><p>这里简单对四元数进行矩阵展开，结果如下：</p>\begin{align}p𝑣p∗ &= 𝐿(p)𝑅(p^*)v &&\\\\&=\begin{bmatrix}a & -b & -c & -d \\ b & a & -d & c \\ c & d & a & -b \\ d & -c & b & a\end{bmatrix}\begin{bmatrix}a & b & c & d \\ -b & a & -d & c \\ -c & d & a & -b \\ -d & -c & b & a\end{bmatrix}v&&\\\nonumber\\&=\begin{bmatrix}1 & 0 & 0 & 0 \\ 0 & 2a^2 + 2b^2 - 1 & 2bc -2ad & 2ac + 2bd \\ 0 & 2bc + 2ad & 1 - 2b^2 - 2d^2 & 2cd - 2ad \\ 0 & 2bd - 2ac & 2ab + 2cd & 1 - 2b^2 - 2c^2\end{bmatrix}\begin{bmatrix}0 \\x \\y \\z \\\end{bmatrix}\end{align}<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>rotates passed vec by this (assumed unitary)</pre></td></tr><tr><td data-num="3"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="4"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE <span class="token keyword">const</span> PxVec3 <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> vx <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">*</span> v<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// 2x</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> vy <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">*</span> v<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token comment">// 2y</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> vz <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">*</span> v<span class="token punctuation">.</span>z<span class="token punctuation">;</span> <span class="token comment">// 2z</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> w2 <span class="token operator">=</span> w <span class="token operator">*</span> w <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment">// a^2 - 0.5</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> dot2 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> vx <span class="token operator">+</span> y <span class="token operator">*</span> vy <span class="token operator">+</span> z <span class="token operator">*</span> vz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2bx + 2cy + 2dz</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">PxVec3</span><span class="token punctuation">(</span><span class="token punctuation">(</span>vx <span class="token operator">*</span> w2 <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> vz <span class="token operator">-</span> z <span class="token operator">*</span> vy<span class="token punctuation">)</span> <span class="token operator">*</span> w <span class="token operator">+</span> x <span class="token operator">*</span> dot2<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 2x(a^2 - 0.5) + (2cz - 2dy)a + b(2bx + 2cy + 2dz)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                  <span class="token punctuation">(</span>vy <span class="token operator">*</span> w2 <span class="token operator">+</span> <span class="token punctuation">(</span>z <span class="token operator">*</span> vx <span class="token operator">-</span> x <span class="token operator">*</span> vz<span class="token punctuation">)</span> <span class="token operator">*</span> w <span class="token operator">+</span> y <span class="token operator">*</span> dot2<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 2y(a^2 - 0.5) + (2dx - 2bz)a + c(2bx + 2cy + 2dz)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                  <span class="token punctuation">(</span>vz <span class="token operator">*</span> w2 <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> vy <span class="token operator">-</span> y <span class="token operator">*</span> vx<span class="token punctuation">)</span> <span class="token operator">*</span> w <span class="token operator">+</span> z <span class="token operator">*</span> dot2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2z(a^2 - 0.5) + (2by - 2cx)a + d(2bx + 2cy + 2dz)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="17"></td><td><pre>inverse rotates passed vec by this (assumed unitary)</pre></td></tr><tr><td data-num="18"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="19"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE <span class="token keyword">const</span> PxVec3 <span class="token function">rotateInv</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> vx <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">*</span> v<span class="token punctuation">.</span>x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> vy <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">*</span> v<span class="token punctuation">.</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> vz <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">*</span> v<span class="token punctuation">.</span>z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> w2 <span class="token operator">=</span> w <span class="token operator">*</span> w <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">float</span> dot2 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> vx <span class="token operator">+</span> y <span class="token operator">*</span> vy <span class="token operator">+</span> z <span class="token operator">*</span> vz<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">PxVec3</span><span class="token punctuation">(</span><span class="token punctuation">(</span>vx <span class="token operator">*</span> w2 <span class="token operator">-</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> vz <span class="token operator">-</span> z <span class="token operator">*</span> vy<span class="token punctuation">)</span> <span class="token operator">*</span> w <span class="token operator">+</span> x <span class="token operator">*</span> dot2<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                  <span class="token punctuation">(</span>vy <span class="token operator">*</span> w2 <span class="token operator">-</span> <span class="token punctuation">(</span>z <span class="token operator">*</span> vx <span class="token operator">-</span> x <span class="token operator">*</span> vz<span class="token punctuation">)</span> <span class="token operator">*</span> w <span class="token operator">+</span> y <span class="token operator">*</span> dot2<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                  <span class="token punctuation">(</span>vz <span class="token operator">*</span> w2 <span class="token operator">-</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> vy <span class="token operator">-</span> y <span class="token operator">*</span> vx<span class="token punctuation">)</span> <span class="token operator">*</span> w <span class="token operator">+</span> z <span class="token operator">*</span> dot2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>另外矩阵逆旋转 <code>rotateInv</code> ，表示旋转操作的反向，实际上可以视作旋转矩阵的虚部取反，即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mo>−</mo><mi>b</mi><mi>i</mi><mo separator="true">,</mo><mo>−</mo><mi>c</mi><mi>j</mi><mo separator="true">,</mo><mo>−</mo><mi>d</mi><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p = [a, -bi, -cj, -dk]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span> 再带入旋转矩阵公式的结果；如果你对此足够有兴趣，不妨自己试试，应该和上面给出的实现相吻合。</p><h3 id="四元素的叉乘"><a class="anchor" href="#四元素的叉乘">#</a> 四元素的叉乘</h3><p>三维向量叉乘的意义在于，计算垂直于两个三维向量组成的平面的三维向量，一般用于已知两个互相垂直的坐标轴，求另一个坐标轴，来建立坐标系。</p><p>但对于四维空间这个计算实际上没有任何意义。即使需要构建四维坐标系，也需要已知三个互相垂直的四维向量，求另一个。因此，两个四元数的叉乘未被定义。</p><h2 id="pxtransform接口说明"><a class="anchor" href="#pxtransform接口说明">#</a> PxTransform 接口说明</h2><p>部分对子成员接口的封装这里就不再赘述，主要介绍几个比较重要的接口：</p><h3 id="transformvec3"><a class="anchor" href="#transformvec3">#</a> Transform——vec3</h3><p>坐标的旋转和平移实际上是两个变换，在 transform 接口中，两者有一个明确的优先级：先旋转再平移。</p><p>这里也比较好理解，如果把平移视作坐标加减，旋转视作坐标乘除。</p><p>一般情况下更倾向于先做乘除再做加减，这样能更好的调整位置。如果先做加减再做乘除，那么加减的值就不得不考虑乘除带来的影响。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE PxVec3 <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxVec3<span class="token operator">&amp;</span> input<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">PX_ASSERT</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="transformtransform"><a class="anchor" href="#transformtransform">#</a> Transform——Transform</h3><p>两个 transform 的叠加也是一个比较有意思的问题：这里以 src 作为基变换，在此基础上叠加自身的平移和旋转变换</p><ul><li><p>旋转：上面讲到，关于旋转的叠加，实际上就是两个四元数的乘积，因此非常简单。</p></li><li><p>平移：对于平移，由于会受到旋转的影响，因此这里的平移叠加还考虑了基变换的旋转，用公式解释的话类似下面这种：</p></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>r</mi><msub><mi>c</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi></mrow></msub><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>q</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>p</mi><mspace linebreak="newline"></mspace><mi>c</mi><mi>u</mi><msub><mi>r</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi></mrow></msub><mo stretchy="false">(</mo><mi>s</mi><mi>r</mi><msub><mi>c</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi></mrow></msub><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>q</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>q</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mi>p</mi><mspace linebreak="newline"></mspace><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo>=</mo><mi>q</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mi>p</mi><mo>+</mo><mi>q</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>q</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo>=</mo><mi>q</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mi>p</mi><mo>+</mo><mo stretchy="false">(</mo><mi>q</mi><mo>∗</mo><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>q</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">src_{transform}(input) = src.q.rotate(input) + src.p \\cur_{transform}(src_{transform}(input)) = q.rotate(src.q.rotate(input) + src.p) + p \\\qquad\qquad\qquad\qquad\qquad\qquad\qquad\qquad\qquad= q.rotate(src.p) + p + q.rotate(src.q.rotate(input)) \\\qquad\qquad\qquad\qquad\qquad\qquad\qquad\qquad= q.rotate(src.p) + p + (q * src.q).rotate(input)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//! Transform transform to parent (returns compound transform: first src, then *this)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE PxTransform <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxTransform<span class="token operator">&amp;</span> src<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">PX_ASSERT</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">isSane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">PX_ASSERT</span><span class="token punctuation">(</span><span class="token function">isSane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// src = [srct, srcr] -> [r*srct + t, r*srcr]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">PxTransform</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">,</span> q <span class="token operator">*</span> src<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="transformplane"><a class="anchor" href="#transformplane">#</a> Transform——Plane</h3><p>这个也很有意思，PxPlane 在几何上的本意是平面，之所以放在 PxTransform 里面，是因为 PxPlane 本身的表示方式比较特殊。</p><p>PxPlane 通过一个垂直于平面的法向量 n 和一个距离原点的距离 d 来表示，实际上就是一个过原点的垂直于平面长度为 d 的方向向量：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/1200px-Plane_equation_qtl3.svg.png" alt="Plane (geometry) - Wikipedia" /></p><p>下面来看看 PxPlane 的 Transform 做了些什么：</p><ul><li>n：法向量不受平移影响，旋转操作直接和四元数 q 做乘法。</li><li>d：平面到原点距离，不受旋转影响，但 Transform 的平移操作还需要结合平移方向 v 和旋转后的法向量 n 做投影来计算</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mi>d</mi><mo>+</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mi>n</mi><mo>⃗</mo></mover><mo>=</mo><mi>d</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>v</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow><annotation encoding="application/x-tex">p = d + \vec{v} \cdot \vec{n} = d + |v|cos\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220601214437459.png" alt="image-20220601214437459" /></p><p>这里的结果来看，实际计算的距离是反的，因此可以推断法向量方向是从平面点指向原点。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE PxPlane <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxPlane<span class="token operator">&amp;</span> plane<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    PxVec3 transformedNormal <span class="token operator">=</span> <span class="token function">rotate</span><span class="token punctuation">(</span>plane<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">PxPlane</span><span class="token punctuation">(</span>transformedNormal<span class="token punctuation">,</span> plane<span class="token punctuation">.</span>d <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>transformedNormal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>PX_CUDA_CALLABLE PX_FORCE_INLINE PxPlane <span class="token function">inverseTransform</span><span class="token punctuation">(</span><span class="token keyword">const</span> PxPlane<span class="token operator">&amp;</span> plane<span class="token punctuation">)</span> <span class="token keyword">const</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    PxVec3 transformedNormal <span class="token operator">=</span> <span class="token function">rotateInv</span><span class="token punctuation">(</span>plane<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">PxPlane</span><span class="token punctuation">(</span>transformedNormal<span class="token punctuation">,</span> plane<span class="token punctuation">.</span>d <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>plane<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9rcmFzamV0LmdpdGh1Yi5pby9xdWF0ZXJuaW9uL3F1YXRlcm5pb24ucGRm">Quaternion</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PxTransform" scheme="https://hakuya.me/tags/PxTransform/"/>
    
    <category term="PxQuat" scheme="https://hakuya.me/tags/PxQuat/"/>
    
    <category term="PxVec3" scheme="https://hakuya.me/tags/PxVec3/"/>
    
  </entry>
  
  <entry>
    <title>UE 基础篇</title>
    <link href="https://hakuya.me/learning/unreal/UE%20%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://hakuya.me/learning/unreal/UE%20%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2022-05-07T08:01:00.000Z</published>
    <updated>2022-12-29T01:36:04.581Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"></div><h1 id="ue-基础篇"><a class="anchor" href="#ue-基础篇">#</a> UE 基础篇</h1><h2 id="unreal-中常见类说明"><a class="anchor" href="#unreal-中常见类说明">#</a> Unreal 中常见类说明</h2><h3 id="uobject"><a class="anchor" href="#uobject">#</a> UObject</h3><p>所有 UE 对象的基类</p><h3 id="uclass"><a class="anchor" href="#uclass">#</a> UClass</h3><p>用于描述 <strong>UObject 类型的类型</strong></p><h3 id="ffield"><a class="anchor" href="#ffield">#</a> FField</h3><p>字段，组成复杂结构的基本单元</p><h3 id="ufield"><a class="anchor" href="#ufield">#</a> UField</h3><p>成员（成员字段 | 成员函数 | 成员结构），于 Unreal4.25 更新后移除了成员字段的作用，仅作为成员函数和成员结构使用。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVucmVhbGVuZ2luZS5jb20vNC4yNy9lbi1VUy9XaGF0c05ldy9CdWlsZHMvUmVsZWFzZU5vdGVzLzRfMjUv">https://docs.unrealengine.com/4.27/en-US/WhatsNew/Builds/ReleaseNotes/4_25/</span></p><h2 id="unreal-中反射和类关系"><a class="anchor" href="#unreal-中反射和类关系">#</a> Unreal 中反射和类关系</h2><h3 id="反射机制"><a class="anchor" href="#反射机制">#</a> 反射机制</h3><p>通俗来说就是通过一个实例获取到其类型和该类的全部定义。例如通过 Class_A 构造了 Instance_A，反射就是通过 Instance_A 获取到 Class_A 的成员。</p><p>反射可以实现的功能包括但不限于：根据类名动态创建实例，根据函数名调用函数，遍历实例的所有属性等等。</p><h3 id="反射的实现"><a class="anchor" href="#反射的实现">#</a> 反射的实现</h3><p>由于 C++ 本身是不支持反射的，那么 Unreal 是怎么做到反射效果的呢？</p><p>答案就是 UClass，前面说到 UClass 是描述 UObject 类型的类，言外之意，UObject 类的信息被记录在 UClass 对象里。</p><p>但是我们有很多的 UObject 对象，难道需要给每个 UObject 都自己创建一个 UClass 吗？</p><p>答案：是的，但是 Unreal 尽可能的简化了这部分，通过<strong>宏</strong>及自动生成的  <code>gen.h</code>  和  <code>gen.cpp</code>  来帮助我们在无感知的情况下，自动创建和注册对应的 UClass 实例</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// MyTestObject.h</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"CoreMinimal.h"</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/NoExportTypes.h"</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyTestObject.generated.h"</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="10"></td><td><pre> * </pre></td></tr><tr><td data-num="11"></td><td><pre> */</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">BLUEPRINT_API</span> UMyTestObject <span class="token operator">:</span> <span class="token keyword">public</span> UObject</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// MyTestObject.cpp</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyTestObject.h"</span></span></pre></td></tr></table></figure><p>这里我们创建一个最简单的类，其继承自 UObject，Unreal 会生成 gen 文件：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// MyTestObject.generated.h</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/ObjectMacros.h"</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/ScriptMacros.h"</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>PRAGMA_DISABLE_DEPRECATION_WARNINGS</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">BLUEPRINT_MyTestObject_generated_h</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">"MyTestObject.generated.h already included, missing '#pragma once' in MyTestObject.h"</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLUEPRINT_MyTestObject_generated_h</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_SPARSE_DATA</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_RPC_WRAPPERS</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_RPC_WRAPPERS_NO_PURE_DECLS</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_INCLASS_NO_PURE_DECLS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesUMyTestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_UMyTestObject_Statics</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token expression"><span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">,</span> UObject<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"/Script/BLUEPRINT"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token expression"><span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_INCLASS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">StaticRegisterNativesUMyTestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_UMyTestObject_Statics</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token expression"><span class="token function">DECLARE_CLASS</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">,</span> UObject<span class="token punctuation">,</span> <span class="token function">COMPILED_IN_FLAGS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CASTCLASS_None<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span></span><span class="token string">"/Script/BLUEPRINT"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> NO_API<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token expression"><span class="token function">DECLARE_SERIALIZER</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_STANDARD_CONSTRUCTORS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">/** Standard constructor, called after all reflected properties have been initialized */</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token expression">NO_API <span class="token function">UMyTestObject</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer <span class="token operator">=</span> <span class="token class-name">FObjectInitializer</span><span class="token operator">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token expression"><span class="token function">DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token expression"><span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> UMyTestObject<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token expression"><span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">/** Private move- and copy-constructors, should never be used */</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token expression">NO_API <span class="token function">UMyTestObject</span><span class="token punctuation">(</span>UMyTestObject<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token expression">NO_API <span class="token function">UMyTestObject</span><span class="token punctuation">(</span><span class="token keyword">const</span> UMyTestObject<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span></span></span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_ENHANCED_CONSTRUCTORS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">/** Standard constructor, called after all reflected properties have been initialized */</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token expression">NO_API <span class="token function">UMyTestObject</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer <span class="token operator">=</span> <span class="token class-name">FObjectInitializer</span><span class="token operator">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Super</span><span class="token punctuation">(</span>ObjectInitializer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">/** Private move- and copy-constructors, should never be used */</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token expression">NO_API <span class="token function">UMyTestObject</span><span class="token punctuation">(</span>UMyTestObject<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token expression">NO_API <span class="token function">UMyTestObject</span><span class="token punctuation">(</span><span class="token keyword">const</span> UMyTestObject<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token expression"><span class="token function">DECLARE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>NO_API<span class="token punctuation">,</span> UMyTestObject<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token expression"><span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token expression"><span class="token function">DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_PRIVATE_PROPERTY_OFFSET</span></span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_12_PROLOG</span></span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_GENERATED_BODY_LEGACY </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_SPARSE_DATA </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_RPC_WRAPPERS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_INCLASS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_STANDARD_CONSTRUCTORS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_GENERATED_BODY </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token expression">PRAGMA_DISABLE_DEPRECATION_WARNINGS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_PRIVATE_PROPERTY_OFFSET </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_SPARSE_DATA </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_RPC_WRAPPERS_NO_PURE_DECLS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_INCLASS_NO_PURE_DECLS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token expression">Demo_Source_BLUEPRINT_Public_MyTestObject_h_15_ENHANCED_CONSTRUCTORS </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token expression">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span></span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> BLUEPRINT_API UClass<span class="token operator">*</span> StaticClass<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">UMyTestObject</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">CURRENT_FILE_ID</span></span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">CURRENT_FILE_ID Demo_Source_BLUEPRINT_Public_MyTestObject_h</span></span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>PRAGMA_ENABLE_DEPRECATION_WARNINGS</pre></td></tr><tr><td data-num="92"></td><td><pre>    </pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token comment">// MyTestObject.gen.cpp</span></pre></td></tr><tr><td data-num="95"></td><td><pre></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"UObject/GeneratedCppIncludes.h"</span></span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"BLUEPRINT/Public/MyTestObject.h"</span></span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span> <span class="token punctuation">(</span>push<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span> <span class="token punctuation">(</span>disable <span class="token operator">:</span> <span class="token number">4883</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="102"></td><td><pre>PRAGMA_DISABLE_DEPRECATION_WARNINGS</pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token keyword">void</span> <span class="token function">EmptyLinkFunctionForGeneratedCodeMyTestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token comment">// Cross Module References</span></pre></td></tr><tr><td data-num="105"></td><td><pre>BLUEPRINT_API UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_UMyTestObject_NoRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>BLUEPRINT_API UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_UMyTestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>COREUOBJECT_API UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_UObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>UPackage<span class="token operator">*</span> <span class="token function">Z_Construct_UPackage__Script_BLUEPRINT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token comment">// End Cross Module References</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UMyTestObject</span><span class="token operator">::</span><span class="token function">StaticRegisterNativesUMyTestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_UMyTestObject_NoRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token keyword">return</span> <span class="token class-name">UMyTestObject</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_UMyTestObject_Statics</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token keyword">static</span> UObject<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> DependentSingletons<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="121"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">const</span> UE4CodeGen_Private<span class="token operator">::</span>FMetaDataPairParam Class_MetaDataParams<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">const</span> FCppClassTypeInfoStatic StaticCppClassTypeInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">const</span> UE4CodeGen_Private<span class="token operator">::</span>FClassParams ClassParams<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>UObject<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>DependentSingletons<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token punctuation">(</span>UObject<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Z_Construct_UClass_UObject<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token punctuation">(</span>UObject<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Z_Construct_UPackage__Script_BLUEPRINT<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="131"></td><td><pre><span class="token keyword">const</span> UE4CodeGen_Private<span class="token operator">::</span>FMetaDataPairParam Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>Class_MetaDataParams<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="132"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token string">"Comment"</span><span class="token punctuation">,</span> <span class="token string">"/**\n * \n */"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="133"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token string">"IncludePath"</span><span class="token punctuation">,</span> <span class="token string">"MyTestObject.h"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="134"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token string">"ModuleRelativePath"</span><span class="token punctuation">,</span> <span class="token string">"Public/MyTestObject.h"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="135"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="136"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="137"></td><td><pre><span class="token keyword">const</span> FCppClassTypeInfoStatic Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>StaticCppClassTypeInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>TCppClassTypeTraits<span class="token operator">&lt;</span>UMyTestObject<span class="token operator">></span><span class="token operator">::</span>IsAbstract<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="139"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="140"></td><td><pre><span class="token keyword">const</span> UE4CodeGen_Private<span class="token operator">::</span>FClassParams Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>ClassParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="141"></td><td><pre><span class="token operator">&amp;</span>UMyTestObject<span class="token operator">::</span>StaticClass<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="142"></td><td><pre><span class="token keyword">nullptr</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="143"></td><td><pre><span class="token operator">&amp;</span>StaticCppClassTypeInfo<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="144"></td><td><pre>DependentSingletons<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="145"></td><td><pre><span class="token keyword">nullptr</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="146"></td><td><pre><span class="token keyword">nullptr</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="147"></td><td><pre><span class="token keyword">nullptr</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="148"></td><td><pre><span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>DependentSingletons<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="149"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="150"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="151"></td><td><pre><span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="152"></td><td><pre><span class="token number">0x001000A0u</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="153"></td><td><pre><span class="token function">METADATA_PARAMS</span><span class="token punctuation">(</span>Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>Class_MetaDataParams<span class="token punctuation">,</span> <span class="token function">UE_ARRAY_COUNT</span><span class="token punctuation">(</span>Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>Class_MetaDataParams<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="154"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="155"></td><td><pre>UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_UMyTestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="156"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="157"></td><td><pre><span class="token keyword">static</span> UClass<span class="token operator">*</span> OuterClass <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="158"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OuterClass<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="159"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="160"></td><td><pre><span class="token class-name">UE4CodeGen_Private</span><span class="token operator">::</span><span class="token function">ConstructUClass</span><span class="token punctuation">(</span>OuterClass<span class="token punctuation">,</span> Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>ClassParams<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="162"></td><td><pre><span class="token keyword">return</span> OuterClass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="163"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="164"></td><td><pre><span class="token function">IMPLEMENT_CLASS</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">,</span> <span class="token number">1743818385</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> BLUEPRINT_API UClass<span class="token operator">*</span> StaticClass<span class="token operator">&lt;</span>UMyTestObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="166"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="167"></td><td><pre><span class="token keyword">return</span> <span class="token class-name">UMyTestObject</span><span class="token operator">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="168"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="169"></td><td><pre><span class="token keyword">static</span> FCompiledInDefer <span class="token function">Z_CompiledInDefer_UClass_UMyTestObject</span><span class="token punctuation">(</span>Z_Construct_UClass_UMyTestObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>UMyTestObject<span class="token operator">::</span>StaticClass<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/BLUEPRINT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UMyTestObject"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="170"></td><td><pre><span class="token function">DEFINE_VTABLE_PTR_HELPER_CTOR</span><span class="token punctuation">(</span>UMyTestObject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="171"></td><td><pre>PRAGMA_ENABLE_DEPRECATION_WARNINGS</pre></td></tr><tr><td data-num="172"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span></pre></td></tr><tr><td data-num="173"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span> <span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="174"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr></table></figure><p>gen 里定义了非常多的宏，展开后大致就是描述如何创建出该 UObject 的 UClass 对象，生成工具通过读取  <code>UCLASS()</code> 、 <code>GENERATED_BODY()</code>  等标注，来解析类的各种信息，如：类名、继承关系、元素名称和类型、函数等，然后再根据 gen 文件在创建 UClass 对象的时候把这些信息也添加上。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">BLUEPRINT_API</span> UMyTestObject <span class="token operator">:</span> <span class="token keyword">public</span> UObject</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 声明一下该属性</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>FString ClassName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 声明一下该函数</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>TWeakObjectPtr<span class="token operator">&lt;</span>UPrimaryDataAsset<span class="token operator">></span> <span class="token function">GetDataAsset</span><span class="token punctuation">(</span><span class="token keyword">const</span> FString<span class="token operator">&amp;</span> ClassName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>至于 UClass 是怎么创建的呢？这个后面再讲。接下来让我们看看 FField 和 UField。</p><h3 id="ffield-和-ufield"><a class="anchor" href="#ffield-和-ufield">#</a> FField 和 UField</h3><p>前面说到 UObject 的类信息是通过 UClass 来进行描述的，那么 UClass 用于描述类型信息的基本单位就是 Field。</p><p>Function 是个 Field，Enum 是个 Field，Property 是个 Field，Struct 和 Class 也是个 Field。</p><p>因此，一个类实际上就是一个个的 Field 互相组合嵌套而成的～，下面是 UField 的关系类图：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507111651007.png" alt="image-20220507111651007" /></p><p>值得一提的是 UField 被设计成了一个单链表结构，因此 MyTestObject 类的组织形式大概长这样（省略了很多细节）：</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507114050180.png" alt="image-20220507114050180" /></p><p>可以发现 MyTestObject 里面分成了 <strong>ChildProperties</strong> 和 <strong>Children</strong> 两部分，一边存储 Property，另一边存储 Function、Struct 等。</p><p>而划分规则是在 UStruct 定义的也就是从 UStruct 往下的派生中，开始支持嵌套了。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507114425921.png" alt="image-20220507114425921" /></p><p>那么 FField 在哪呢？它取代了 UProperty 的地位，自立门户了～</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507114934510.png" alt="image-20220507114934510" /></p><p>由图中可以看出其实 UField 是继承自 UObject 的，好处是它的 UClass 也可以通过宏定义给创建出来，而代价是承载了 UObject 的冗余数据。这些数据对于 UClass 和 UFuntion 来说其实还可以接受，但是 UProperty 本身使用频繁且小巧，这么一来就显得很累赘。因此 Unreal 在 4.25 版本单独定义了一个 FField，来替代 UProperty 的职责，并且定义了一个 FFieldClass 作为 FField 的 UClass 类来实现类型系统。</p><h2 id="类型系统的构建流程"><a class="anchor" href="#类型系统的构建流程">#</a> 类型系统的构建流程</h2><p>前面也提到了，类的信息实际上是定义在 UClass 对象里，那么 UClass 对象的构建流程，顺序，以及如何通过名字查询等就有必要在此说明一下了：</p><blockquote><p>注：以下内容仅仅简单说明，其中的实现细节较为复杂，不做展开，有兴趣可以阅读源码。</p></blockquote><h3 id="初始化-uobject-的-uclass-对象"><a class="anchor" href="#初始化-uobject-的-uclass-对象">#</a> 初始化 UObject 的 UClass 对象</h3><p>由于 UObject 是所有对象的基类，因此它的 UClass 对象应该最先被创建的，事实也正是如此：</p><ul><li>创建 UClass 对象</li><li>设置属性<ul><li><strong>SuperStruct</strong>：定义了类型的继承关系</li><li><strong>ClassWithin</strong>：定义了 UClass 包含在哪个 UClass 内，用于描述嵌套关系</li></ul></li></ul><blockquote><p>注：这里的初始化其实并不完全，UClass 内的 UFunction 和 UStruct 等都还没办法创建，相当于做了个占位</p></blockquote><h3 id="初始化-coreuobject-的-uclass-对象"><a class="anchor" href="#初始化-coreuobject-的-uclass-对象">#</a> 初始化 CoreUObject 的 UClass 对象</h3><p>由于 UObject 是所有 CoreUObject 的基类嘛～所以 UObject 初始化好了，自然就轮到了 CoreUObject</p><p>初始化的内容和 UObject 的 UClass 一致，都是半成品，只保留了 SuperStruct 和 ClassWithin 的关系网</p><blockquote><p>注：这一步其实没有初始化 UScriptStruct 和 UEnum，因为他们结构信息里面依赖了 UClass 所以得先把其他类的 UClass 初始化完毕才能轮到它们</p></blockquote><h3 id="注册之前初始化的-uclass-对象"><a class="anchor" href="#注册之前初始化的-uclass-对象">#</a> 注册之前初始化的 UClass 对象</h3><p>到此我们就得到了所有 CoreUObject 的 UClass 对象的<strong>半成品</strong>，剩下的就是对它们进行组装，变成<strong>完全体</strong></p><p>但是在组装之前，还得把原来遗漏的两个类型的 UClass 补上 ——UEnum 和 UScriptStruct，并把这些 UClass 实例装填到一个全局字典和全局链表里方便后续查询和遍历。</p><p>因此这一步需要做三件事：</p><ul><li>把 UClass 对象注册到全局字典和全局链表里，并设置一些属性：<ul><li><strong>NamePrivate</strong>：定义了对象的名字</li><li><strong>ClassPrivate</strong>：定义了对象的类型关系，UClass 实例是从哪个 UClass 类创建的（这里都是 UClass 类，但是如果有其他继承的话，就不一样了</li><li><strong>OuterPrivate</strong>：定义了对象的从属关系，UObject 所在的 UPackage</li></ul></li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token class-name">UObjectBase</span><span class="token operator">::</span><span class="token function">DeferredRegister</span><span class="token punctuation">(</span>UClass <span class="token operator">*</span>UClassStaticClass<span class="token punctuation">,</span><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> PackageName<span class="token punctuation">,</span><span class="token keyword">const</span> TCHAR<span class="token operator">*</span> InName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">check</span><span class="token punctuation">(</span><span class="token function">UObjectInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// Set object properties.</span></pre></td></tr><tr><td data-num="5"></td><td><pre>UPackage<span class="token operator">*</span> Package <span class="token operator">=</span> <span class="token function">CreatePackage</span><span class="token punctuation">(</span>PackageName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">check</span><span class="token punctuation">(</span>Package<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Package<span class="token operator">-></span><span class="token function">SetPackageFlags</span><span class="token punctuation">(</span>PKG_CompiledIn<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>OuterPrivate <span class="token operator">=</span> Package<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">check</span><span class="token punctuation">(</span>UClassStaticClass<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">!</span>ClassPrivate<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>ClassPrivate <span class="token operator">=</span> UClassStaticClass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Add to the global object table.</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">AddObject</span><span class="token punctuation">(</span><span class="token function">FName</span><span class="token punctuation">(</span>InName<span class="token punctuation">)</span><span class="token punctuation">,</span> EInternalObjectFlags<span class="token operator">::</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// Make sure that objects disregarded for GC are part of root set.</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">!</span>GUObjectArray<span class="token punctuation">.</span><span class="token function">IsDisregardForGC</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">||</span> GUObjectArray<span class="token punctuation">.</span><span class="token function">IndexToObject</span><span class="token punctuation">(</span>InternalIndex<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">IsRootSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUObjectBootstrap<span class="token punctuation">,</span> Verbose<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UObjectBase::DeferredRegister %s %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PackageName<span class="token punctuation">,</span> InName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>凭借现有的 UClass 对象初始化 UEnum 和 UScriptStruct 的 UClass 对象</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Call StaticStruct for each struct...this sets up the internal singleton, and important works correctly with hot reload</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">UObjectLoadAllCompiledInStructs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 创建 UPackage</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// Load Structs</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FPendingEnumRegistrant<span class="token operator">&amp;</span> EnumRegistrant <span class="token operator">:</span> PendingEnumRegistrants<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>EnumRegistrant<span class="token punctuation">.</span><span class="token function">RegisterFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FPendingStructRegistrant<span class="token operator">&amp;</span> StructRegistrant <span class="token operator">:</span> PendingStructRegistrants<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>StructRegistrant<span class="token punctuation">.</span><span class="token function">RegisterFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>补全 UClass 对象里的 Function、Property、Struct 等信息，并创建 UClass 实例的 CDO</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// UObjectBase.cpp</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">UObjectLoadAllCompiledInDefaultProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    TArray<span class="token operator">&lt;</span>UClass<span class="token operator">*</span><span class="token operator">></span> NewClasses<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    TArray<span class="token operator">&lt;</span>UClass<span class="token operator">*</span><span class="token operator">></span> NewClassesInCoreUObject<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    TArray<span class="token operator">&lt;</span>UClass<span class="token operator">*</span><span class="token operator">></span> NewClassesInEngine<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    TArray<span class="token operator">&lt;</span>UClass<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> PendingRegistrants <span class="token operator">=</span> <span class="token function">MoveTemp</span><span class="token punctuation">(</span>DeferredCompiledInRegistration<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>UClass<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>Registrant<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> PendingRegistrants<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 核心代码在这里，这里会补全 UClass 信息 Registrant 是之前初始化的时候传进来的</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// MyTestObject 类对应的就是 Z_CompiledInDefer_UClass_UMyTestObject</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        UClass<span class="token operator">*</span> Class <span class="token operator">=</span> <span class="token function">Registrant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogUObjectBootstrap<span class="token punctuation">,</span> Verbose<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UObjectLoadAllCompiledInDefaultProperties After Registrant %s %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>Class<span class="token operator">-></span><span class="token function">GetOutermost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>Class<span class="token operator">-></span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        </pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">// 这里把 UClass 对象分三类 CoreUObject Engine Other</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Class<span class="token operator">-></span><span class="token function">GetOutermost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> GLongCoreUObjectPackageName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            NewClassesInCoreUObject<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Class<span class="token operator">-></span><span class="token function">GetOutermost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> LongEnginePackageName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            NewClassesInEngine<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            NewClasses<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">// 这里就是按照类别依次创建每个 UClass 实例 的 CDO</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token comment">// 顺序依次是 CoreUObject > Engine > Other，因为 UClass 依赖关系也是这个关系</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UClass<span class="token operator">*</span> Class <span class="token operator">:</span> NewClassesInCoreUObject<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            Class<span class="token operator">-></span><span class="token function">GetDefaultObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// MyTestObject.gen.cpp</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">static</span> FCompiledInDefer <span class="token function">Z_CompiledInDefer_UClass_UMyTestObject</span><span class="token punctuation">(</span>Z_Construct_UClass_UMyTestObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>UMyTestObject<span class="token operator">::</span>StaticClass<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"/Script/Blueprint"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"UMyTestObject"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>UClass<span class="token operator">*</span> <span class="token function">Z_Construct_UClass_UMyTestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">static</span> UClass<span class="token operator">*</span> OuterClass <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OuterClass<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token class-name">UE4CodeGen_Private</span><span class="token operator">::</span><span class="token function">ConstructUClass</span><span class="token punctuation">(</span>OuterClass<span class="token punctuation">,</span> Z_Construct_UClass_UMyTestObject_Statics<span class="token operator">::</span>ClassParams<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">return</span> OuterClass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">// 这里就定义了 function property 等信息</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Z_Construct_UClass_UMyTestObject_Statics</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">static</span> UObject<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> DependentSingletons<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_METADATA</span></span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UE4CodeGen_Private<span class="token operator">::</span>FMetaDataPairParam Class_MetaDataParams<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> FCppClassTypeInfoStatic StaticCppClassTypeInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">const</span> UE4CodeGen_Private<span class="token operator">::</span>FClassParams ClassParams<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>到此，所有 UObject 的 UClass 对象就都创建好了，并且 UClass 对象里面也记录了各个类的信息用于实现反射效果。</p><h2 id="其他介绍"><a class="anchor" href="#其他介绍">#</a> 其他介绍</h2><h3 id="cdo"><a class="anchor" href="#cdo">#</a> CDO</h3><p>ClassDefaultObject，说白了就是 UClass 实例通过默认参数构建出的一个 UObject 实例，这个 UObject 对象有着所有字段的默认值</p><h3 id="upackage"><a class="anchor" href="#upackage">#</a> UPackage</h3><p>UPackage 是 Unreal 对于资源的包装，一个 uasset 文件对应了一个 Package，而把这个 Package 加载到内存后，创建的实例就是 UPackage</p><p>而一个 uasset 可以包含多个类、函数、变量</p><h3 id="uobject-和-uclass-常用字段说明"><a class="anchor" href="#uobject-和-uclass-常用字段说明">#</a> UObject 和 UClass 常用字段说明</h3><p>UObject：</p><ul><li><strong>ClassPrivate</strong>：这个对象对应的 UClass 实例</li><li><strong>NamePrivate</strong>：对象名称，一般是类名</li><li><strong>OuterPrivate</strong>：这个 UObject 是在哪个 UPackage 里</li></ul><p>UClass：</p><ul><li><strong>ClassWithin</strong>：这个类被包含在了其他类的时候，通过该字段指向上一层</li><li><strong>SuperStruct</strong>：描述 UObject 的父类</li><li><strong>Children</strong>：描述 UObject 里面有哪些 Function、Struct</li><li><strong>ChildProperties</strong>：描述 UObject 里面有哪些 Property</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507154703061.png" alt="image-20220507154703061" /></p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>最后做个总结，所有 Unreal 内的对象都派生自 UObject，并且通过对应的<strong>标注</strong> —— <code>UCLASS()、GENERATED_BODY()...</code>  来生成宏定义，用于创建对应的 UClass 对象。</p><p>而 UClass 对象则保存了 UObject 类里的各种定义信息，并存储在全局字典内，通过名字查找的方式实现了<strong>反射</strong>。并且所有 UObject 类的继承关系也一并保存在了 UClass 对象里。</p><p>此外 UClass 还会存储一个 UObject 的 CDO 对象，并且负责 UObject 对象的构造，可谓是责任重大。</p><p>而 UClass 又是通过 UField 定义的 Function、Struct、Enum 以及 FField 定义的 Property 所组成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;ue-基础篇&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ue-基础篇&quot;&gt;#&lt;/a&gt; UE 基础篇&lt;/h1&gt;
&lt;h2 id=&quot;unreal-中常见类说明&quot;&gt;&lt;a class=&quot;anchor&quot; h</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="Uobject" scheme="https://hakuya.me/tags/Uobject/"/>
    
  </entry>
  
  <entry>
    <title>UE 蓝图篇</title>
    <link href="https://hakuya.me/learning/unreal/UE%20%E8%93%9D%E5%9B%BE%E7%AF%87/"/>
    <id>https://hakuya.me/learning/unreal/UE%20%E8%93%9D%E5%9B%BE%E7%AF%87/</id>
    <published>2022-05-07T08:01:00.000Z</published>
    <updated>2022-12-29T01:36:04.581Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"></div><h1 id="ue-蓝图篇"><a class="anchor" href="#ue-蓝图篇">#</a> UE 蓝图篇</h1><p>蓝图作为 Unreal 的大杀器，为 Unreal 提供了可视化编程的能力，把一些代码层面的概念通过可视化形式实现，从而能够让艺术家和策划们实现更为复杂的逻辑。</p><p>一句话讲：让不会写代码的人，可以基于已有的内容，通过排列组合的形式实现复杂业务。</p><h2 id="蓝图类型"><a class="anchor" href="#蓝图类型">#</a> 蓝图类型</h2><p>Unreal 4 的蓝图目前有以下几种：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/** Enumerates types of blueprints. */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">UENUM</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EBlueprintType</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/** Normal blueprint. */</span></pre></td></tr><tr><td data-num="6"></td><td><pre>BPTYPE_Normal<span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Blueprint Class"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/** Blueprint that is const during execution (no state graph and methods cannot modify member variables). */</span></pre></td></tr><tr><td data-num="8"></td><td><pre>BPTYPE_Const<span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Const Blueprint Class"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">/** Blueprint that serves as a container for macros to be used in other blueprints. */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>BPTYPE_MacroLibrary<span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Blueprint Macro Library"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/** Blueprint that serves as an interface to be implemented by other blueprints. */</span></pre></td></tr><tr><td data-num="12"></td><td><pre>BPTYPE_Interface<span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Blueprint Interface"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/** Blueprint that handles level scripting. */</span></pre></td></tr><tr><td data-num="14"></td><td><pre>BPTYPE_LevelScript<span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Level Blueprint"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">/** Blueprint that serves as a container for functions to be used in other blueprints. */</span></pre></td></tr><tr><td data-num="16"></td><td><pre>BPTYPE_FunctionLibrary<span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Blueprint Function Library"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>BPTYPE_MAX<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507162319440.png" alt="image-20220507162319440" /></p><h3 id="blueprint-class"><a class="anchor" href="#blueprint-class">#</a> Blueprint Class</h3><p>蓝图类，可以理解为蓝图系统运行的脚本。通过蓝图编辑器进行创建和修改。</p><h3 id="blueprint-function-libraries"><a class="anchor" href="#blueprint-function-libraries">#</a> Blueprint Function Libraries</h3><p>继承自 UBlueprintFunctionLibrary 类，里面定义了一组<strong>静态函数</strong>，主要用途是提供给其他蓝图或者业务使用。</p><h3 id="blueprint-interface"><a class="anchor" href="#blueprint-interface">#</a> Blueprint Interface</h3><p>蓝图接口，复数个函数的集合，类比 C++ 的 Interface。之所以有 Interface 的概念，还得从 UObject 说起，由于所有对象都是 UObject，因此多继承将变得非常麻烦（菱形继承问题），因此 Unreal 内基本上都是单继承，但是为了实现复用性，通常多继承需求会通过使用 Interface 来代替。</p><h3 id="blueprint-macro-library"><a class="anchor" href="#blueprint-macro-library">#</a> Blueprint Macro Library</h3><p>蓝图宏允许把一组编辑好的节点单独以宏的形式存储，提高复用性，有点<strong>蓝图子图</strong>的意味在里面</p><h3 id="enumeration"><a class="anchor" href="#enumeration">#</a> Enumeration</h3><p>也没啥好说的，定义在全局的枚举类型，不继承 UObject</p><h3 id="structure"><a class="anchor" href="#structure">#</a> Structure</h3><p>用来专门定义对象的数据结构，值得注意的是，Structure 并不继承自 UObject，纯纯的就是个结构体</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Specifier<span class="token punctuation">,</span> Specifier<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">FStructName</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="blueprint-level"><a class="anchor" href="#blueprint-level">#</a> Blueprint Level</h3><p>关卡蓝图，每个关卡都有默认的关卡蓝图，这个蓝图不能单独创建，而是在创建 Level 的时候，会默认生成一个，只能编辑不能增删。</p><p>主要功能就是同步事件，类似关卡范围内的事件播报。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507170036040.png" alt="image-20220507170036040" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507170054076.png" alt="image-20220507170054076" /></p><h2 id="蓝图内各个控件概念及作用"><a class="anchor" href="#蓝图内各个控件概念及作用">#</a> 蓝图内各个控件概念及作用</h2><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507173312064.png" alt="image-20220507173312064" /></p><h3 id="graphs"><a class="anchor" href="#graphs">#</a> Graphs</h3><p>编辑器独有的一个内容，用来展示图表，默认 Blueprint Class 都会有一个 EventGraph</p><h4 id="pin"><a class="anchor" href="#pin">#</a> Pin</h4><p>也被称为引脚，是定义一个节点输入输出的节点，如下是一个节点，包含三个引脚：</p><ul><li>Output：输出引脚</li><li>Exec：执行引脚</li><li>Input：Target 参数引脚</li></ul><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509113336715.png" alt="image-20220509113336715" /></p><h4 id="tunnel"><a class="anchor" href="#tunnel">#</a> Tunnel</h4><p>通道，其实就是引脚和引脚之间的连线，表示一个上下游关系</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509113605161.png" alt="image-20220509113605161" /></p><h3 id="functions"><a class="anchor" href="#functions">#</a> Functions</h3><p>函数，很好理解，就是字面意思。但是 Unreal 里的函数又分为两个大类 ——Pure&amp;&amp;Impure，这里的分类还是更加侧重于<strong>编辑上</strong></p><h4 id="pure-funtion"><a class="anchor" href="#pure-funtion">#</a> Pure Funtion</h4><p>也被叫做<strong>纯函数</strong>，定义上是指不修改状态或类成员的函数，在编辑层面上则是不存在 exec 引脚。</p><p>例如我这里定义了一个 Pure Node，接受两个 int 类型参数，返回一个 int 类型参数，勾选 Pure 选择框的时候，该节点将失去 exec 引脚</p><p>通常情况下 getattr 操作和运算符节点默认都是 Pure 节点。</p><p>失去 exec 引脚意味着该节点的运行不受 runtime 控制，而是在初始化阶段就完成了。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509111221153.png" alt="image-20220509111221153" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509111023571.png" alt="image-20220509111023571" /></p><p>这个是该节点的内部逻辑，外层节点如果勾选了 Pure，那么内部逻辑的节点都会勾上 Pure，但是保留 exec 引脚</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509111353285.png" alt="image-20220509111353285" /></p><h4 id="impure-function"><a class="anchor" href="#impure-function">#</a> Impure Function</h4><p>非纯函数，指代一般的函数，带有 exec 引脚，会在运行过程中，根据 exec 的连线关系来依次执行。</p><h3 id="macros"><a class="anchor" href="#macros">#</a> Macros</h3><p>简单来说就是预制体，别的蓝图可以引用宏，而宏发生变更会影响所有引用的蓝图。</p><p>一般用来把一些重复性的流程简化为宏，可以减少编辑环境下复制粘贴工作量，例如红框里面的内容，其他蓝图也要，不想再复制一份</p><p>例如这里每次 tick 触发的时候计算一下 delta 时间和 30 求和然后输出一下（意义不明的逻辑）</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509112205299.png" alt="image-20220509112205299" /></p><p>为了重用 add 和 print 就可以把它们定义成一个宏节点，这样就可以在别的地方用了，也不需要拷贝大量节点，就能实现尽可能的复用</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509112502841.png" alt="image-20220509112502841" /></p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509112430115.png" alt="image-20220509112430115" /></p><h3 id="variables"><a class="anchor" href="#variables">#</a> Variables</h3><p>变量，标识这个蓝图内定义的变量，可以在蓝图内部使用。蓝图内可以支持设置节点的初始值，并且支持 setattr 和 getattr 操作</p><p>这里定义了一个 getattr 和 setattr，可以看到 getattr 是没有 exec 引脚的，因为它默认是一个 pure 节点。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220509112815719.png" alt="image-20220509112815719" /></p><h3 id="event-dispatchers"><a class="anchor" href="#event-dispatchers">#</a> Event Dispatchers</h3><p>事件转发提供了全套的事件系统，通俗来说就是提供了一套对于 Event 的 bind、unbind、dispatch、listen。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220507173250847.png" alt="image-20220507173250847" /></p><p>可以在任意时间 bind 事件和 unbind 事件，例如这里通过叫 「test」 的 dispatcher 绑定和解绑了 test event 事件</p><p>这时候只要有地方触发了这个事件，就会执行 test event 后面的函数「Do Something」</p><p>触发事件通过 Call 对应的 dispatcher，例如这里我 Call test，就可以触发 test event 后续的操作。</p><h2 id="代码层面的理解"><a class="anchor" href="#代码层面的理解">#</a> 代码层面的理解</h2><p>前面说到，蓝图本质上就是对逻辑的扩展，那么回归到代码层面上再来理解一下蓝图。</p><table><thead><tr><th>蓝图层面的操作</th><th>代码层面的操作</th></tr></thead><tbody><tr><td>创建一个 Blueprint Class 文件，需要选择继承的文件</td><td>新建一个类，定义继承关系</td></tr><tr><td>定义 Variables、Function</td><td>声明函数和变量</td></tr><tr><td>在 Graphs 里面链接起各个节点 Pin，Tunnel</td><td>代码里面编写执行顺序，调用时机</td></tr></tbody></table><p>当然，蓝图的功能还远不止这些，例如重写父类函数，蓝图之间相互调用等等。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>本文主要叙述了蓝图在编辑器层面的一些理解和用法，并引申到代码层面更进一步的理解。现在应该对于蓝图整个的组织形式，各个 UI 控件的定义和功能有了基本的认识。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;/div&gt;
&lt;h1 id=&quot;ue-蓝图篇&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ue-蓝图篇&quot;&gt;#&lt;/a&gt; UE 蓝图篇&lt;/h1&gt;
&lt;p&gt;蓝图作为 Unreal 的大杀器，为 Unreal 提供了可视化编程的能力，把</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="UE" scheme="https://hakuya.me/categories/learning/unreal/"/>
    
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="Blueprint" scheme="https://hakuya.me/tags/Blueprint/"/>
    
  </entry>
  
  <entry>
    <title>cmake</title>
    <link href="https://hakuya.me/learning/compile/cmake/"/>
    <id>https://hakuya.me/learning/compile/cmake/</id>
    <published>2022-04-24T07:02:00.000Z</published>
    <updated>2022-12-29T01:36:04.489Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZSNHkxdTc3aD9zcG1faWRfZnJvbT0zMzMuOTk5LjAuMA==">B 站课程传送门</span></p></div><h1 id="cmake"><a class="anchor" href="#cmake">#</a> CMake</h1><p>CMake 是用来统一编译代码，相当于是执行编译的自动化脚本。定义 CMakeLists.txt 以后，就不需要对项目代码进行逐个的编译。</p><h2 id="编译一个简单代码"><a class="anchor" href="#编译一个简单代码">#</a> 编译一个简单代码</h2><blockquote><p>main.cpp</p></blockquote><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><p>CMakeLists.txt</p></blockquote><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">project</span><span class="token punctuation">(</span>CMakeTest<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>SRC_LIST main.cpp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"This is BINARY dir "</span> <span class="token punctuation">$&#123;</span><span class="token variable">HELLO_BINARY_DIR</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"This is SOURCE dir "</span> <span class="token punctuation">$&#123;</span><span class="token variable">HELLO_SOURCE_DIR</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello <span class="token punctuation">$&#123;</span>SRC_LIST<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>在命令行执行  <code>cmake .</code>  表示运行当前目录下的 CMakeLists.txt</p><blockquote><p>output</p></blockquote><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>-- The C compiler identification is GNU <span class="token number">7.3</span>.1</pre></td></tr><tr><td data-num="2"></td><td><pre>-- The CXX compiler identification is GNU <span class="token number">7.3</span>.1</pre></td></tr><tr><td data-num="3"></td><td><pre>-- Check <span class="token keyword">for</span> working C compiler: /usr/lib64/ccache/cc</pre></td></tr><tr><td data-num="4"></td><td><pre>-- Check <span class="token keyword">for</span> working C compiler: /usr/lib64/ccache/cc - works</pre></td></tr><tr><td data-num="5"></td><td><pre>-- Detecting C compiler ABI info</pre></td></tr><tr><td data-num="6"></td><td><pre>-- Detecting C compiler ABI info - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="7"></td><td><pre>-- Detecting C compile features</pre></td></tr><tr><td data-num="8"></td><td><pre>-- Detecting C compile features - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="9"></td><td><pre>-- Check <span class="token keyword">for</span> working CXX compiler: /usr/lib64/ccache/c++</pre></td></tr><tr><td data-num="10"></td><td><pre>-- Check <span class="token keyword">for</span> working CXX compiler: /usr/lib64/ccache/c++ - works</pre></td></tr><tr><td data-num="11"></td><td><pre>-- Detecting CXX compiler ABI info</pre></td></tr><tr><td data-num="12"></td><td><pre>-- Detecting CXX compiler ABI info - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="13"></td><td><pre>-- Detecting CXX compile features</pre></td></tr><tr><td data-num="14"></td><td><pre>-- Detecting CXX compile features - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="15"></td><td><pre>-- This is BINARY <span class="token function">dir</span> /data/rwbyguo/cmake_test</pre></td></tr><tr><td data-num="16"></td><td><pre>-- This is SOURCE <span class="token function">dir</span> /data/rwbyguo/cmake_test</pre></td></tr><tr><td data-num="17"></td><td><pre>-- Configuring <span class="token keyword">done</span></pre></td></tr><tr><td data-num="18"></td><td><pre>-- Generating <span class="token keyword">done</span></pre></td></tr><tr><td data-num="19"></td><td><pre>-- Build files have been written to: /data/rwbyguo/cmake_test</pre></td></tr></table></figure><p>会发现多出来了几个文件</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="2"></td><td><pre>├── CMakeCache<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="3"></td><td><pre>├── CMakeFiles</pre></td></tr><tr><td data-num="4"></td><td><pre>│   ├── <span class="token number">3.17</span><span class="token punctuation">.</span><span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>│   │   ├── CMakeCCompiler<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="6"></td><td><pre>│   │   ├── CMakeCXXCompiler<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="7"></td><td><pre>│   │   ├── CMakeDetermineCompilerABI_C<span class="token punctuation">.</span>bin</pre></td></tr><tr><td data-num="8"></td><td><pre>│   │   ├── CMakeDetermineCompilerABI_CXX<span class="token punctuation">.</span>bin</pre></td></tr><tr><td data-num="9"></td><td><pre>│   │   ├── CMakeSystem<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="10"></td><td><pre>│   │   ├── CompilerIdC</pre></td></tr><tr><td data-num="11"></td><td><pre>│   │   │   ├── a<span class="token punctuation">.</span>out</pre></td></tr><tr><td data-num="12"></td><td><pre>│   │   │   ├── CMakeCCompilerId<span class="token punctuation">.</span>c</pre></td></tr><tr><td data-num="13"></td><td><pre>│   │   │   └── tmp</pre></td></tr><tr><td data-num="14"></td><td><pre>│   │   └── CompilerIdCXX</pre></td></tr><tr><td data-num="15"></td><td><pre>│   │       ├── a<span class="token punctuation">.</span>out</pre></td></tr><tr><td data-num="16"></td><td><pre>│   │       ├── CMakeCXXCompilerId<span class="token punctuation">.</span>cpp</pre></td></tr><tr><td data-num="17"></td><td><pre>│   │       └── tmp</pre></td></tr><tr><td data-num="18"></td><td><pre>│   ├── cmake<span class="token punctuation">.</span>check_cache</pre></td></tr><tr><td data-num="19"></td><td><pre>│   ├── CMakeDirectoryInformation<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="20"></td><td><pre>│   ├── CMakeOutput<span class="token punctuation">.</span>log</pre></td></tr><tr><td data-num="21"></td><td><pre>│   ├── CMakeTmp</pre></td></tr><tr><td data-num="22"></td><td><pre>│   ├── hello<span class="token punctuation">.</span>dir</pre></td></tr><tr><td data-num="23"></td><td><pre>│   │   ├── build<span class="token punctuation">.</span>make</pre></td></tr><tr><td data-num="24"></td><td><pre>│   │   ├── cmake_clean<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="25"></td><td><pre>│   │   ├── CXX<span class="token punctuation">.</span>includecache</pre></td></tr><tr><td data-num="26"></td><td><pre>│   │   ├── DependInfo<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="27"></td><td><pre>│   │   ├── depend<span class="token punctuation">.</span>internal</pre></td></tr><tr><td data-num="28"></td><td><pre>│   │   ├── depend<span class="token punctuation">.</span>make</pre></td></tr><tr><td data-num="29"></td><td><pre>│   │   ├── flags<span class="token punctuation">.</span>make</pre></td></tr><tr><td data-num="30"></td><td><pre>│   │   ├── link<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="31"></td><td><pre>│   │   ├── main<span class="token punctuation">.</span>cpp<span class="token punctuation">.</span>o</pre></td></tr><tr><td data-num="32"></td><td><pre>│   │   └── progress<span class="token punctuation">.</span>make</pre></td></tr><tr><td data-num="33"></td><td><pre>│   ├── Makefile2</pre></td></tr><tr><td data-num="34"></td><td><pre>│   ├── Makefile<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="35"></td><td><pre>│   ├── progress<span class="token punctuation">.</span>marks</pre></td></tr><tr><td data-num="36"></td><td><pre>│   └── TargetDirectories<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="37"></td><td><pre>├── cmake_install<span class="token punctuation">.</span>cmake</pre></td></tr><tr><td data-num="38"></td><td><pre>├── CMakeLists<span class="token punctuation">.</span>txt <span class="token comment">//</span></pre></td></tr><tr><td data-num="39"></td><td><pre>├── main<span class="token punctuation">.</span>cpp <span class="token comment">//</span></pre></td></tr><tr><td data-num="40"></td><td><pre>└── Makefile</pre></td></tr></table></figure><p>在执行 make 操作，来编译生成的 Makefile</p><blockquote><p>output</p></blockquote><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>rwbyguo@VM-218-157-centos cmake_test<span class="token punctuation">]</span><span class="token variable">$make</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Scanning dependencies of target hello</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span> <span class="token number">50</span>%<span class="token punctuation">]</span> Building CXX object CMakeFiles/hello.dir/main.cpp.o</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Linking CXX executable hello</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target hello</pre></td></tr></table></figure><p>会得到一个编译后的可执行文件 hello</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="3"></td><td><pre>├── hello <span class="token comment">// new</span></pre></td></tr><tr><td data-num="4"></td><td><pre>├── main<span class="token punctuation">.</span>cpp</pre></td></tr><tr><td data-num="5"></td><td><pre>└── Makefile</pre></td></tr><tr><td data-num="6"></td><td><pre>    </pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>rwbyguo@VM<span class="token operator">-</span><span class="token number">218</span><span class="token operator">-</span><span class="token number">157</span><span class="token operator">-</span>centos cmake_test<span class="token punctuation">]</span>$<span class="token punctuation">.</span><span class="token operator">/</span>hello </pre></td></tr><tr><td data-num="8"></td><td><pre>hello world</pre></td></tr></table></figure><h2 id="语法介绍"><a class="anchor" href="#语法介绍">#</a> 语法介绍</h2><h3 id="project-关键字"><a class="anchor" href="#project-关键字">#</a> project  关键字</h3><p>指定工程名和支持语言，默认情况下支持所有语言  <code>project($&#123;project_name&#125; [language])</code></p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">project</span><span class="token punctuation">(</span>CMakeTest<span class="token punctuation">)</span>  <span class="token comment"># 支持所有语言</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">project</span><span class="token punctuation">(</span>CMakeTest CXX<span class="token punctuation">)</span><span class="token comment"># 支持 c++</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">project</span><span class="token punctuation">(</span>CMakeTest C CXX<span class="token punctuation">)</span><span class="token comment"># 支持 c++ 和 c</span></pre></td></tr></table></figure><p>该指令会隐式创建两个变量  <code>$&#123;project_name&#125;_BINARY_DIR</code> 、  <code>$&#123;project_name&#125;_SOURCE_DIR</code></p><p>另外还有两个预定义变量值和它们一致  <code>PROJECT_BINARY_DIR</code> 、  <code>PROJECT_SOURCE_DIR</code></p><h3 id="set-关键字"><a class="anchor" href="#set-关键字">#</a> set 关键字</h3><p>声明变量，并且支持多个</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>SRC_LIST main.cpp m1.cpp m2.cpp<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="message-关键字"><a class="anchor" href="#message-关键字">#</a> message 关键字</h3><p>向终端输出用户自定义的信息，类似 print。包含多种类型的信息，具体说明参考<span class="exturl" data-url="aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC92My4wL2NvbW1hbmQvbWVzc2FnZS5odG1s">官方文档</span>：</p><ul><li>SEND_ERROR：产生错误，会继续运行 CMakeLists.txt 内的指令，但是不会构建</li><li>STATUS：输出前缀带有「— —」的信息</li><li>FAIL_ERROR：终止运行 CMakeLists.txt 内的指令，且停止构建</li><li>WARNING：警告，但是会继续运行和构建</li></ul><h3 id="add_executable-关键字"><a class="anchor" href="#add_executable-关键字">#</a> add_executable 关键字</h3><p>用来生成可执行文件，包含两个参数，一个是可执行文件名，一个是源文件：  <code>add_executable($&#123;executable_name&#125; $&#123;source_list&#125;)</code></p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello main.cpp m1.cpp m2.cpp<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="语法的基本原则"><a class="anchor" href="#语法的基本原则">#</a> 语法的基本原则</h2><ul><li>变量值的获取需要使用  <code>$&#123;&#125;</code> ，如果在 IF 语句内使用变量则可直接用变量名。</li><li>指令内的参数都是用  <code>()</code>  包裹，参数之间可以用  <code>;</code>  或者 空格 分隔。</li><li>关键字不区分大小写，但是参数和变量区分大小写。</li></ul><h3 id="注意事项"><a class="anchor" href="#注意事项">#</a> 注意事项</h3><ul><li>set 指令如果参数里面带有空格的话，需要用双引号括起来  <code>&quot;arg 1&quot;</code></li><li>add_executable 指令内的源文件可以不加  <code>.cpp</code>  后缀，但是建议还是加上</li></ul><h2 id="内部构建和外部构建"><a class="anchor" href="#内部构建和外部构建">#</a> 内部构建和外部构建</h2><ul><li>上面例子就是内部构建，会获得很多临时文件</li><li>外部构建可以指定生成文件都放在单独的目录下，推荐使用外部构建</li></ul><p>外部构建介绍：</p><p>在目录下创建一个单独的目录  <code>debugbuild</code> ，然后在  <code>debugbuild</code>  执行  <code>cmake ..</code>  即可</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>rwbyguo@VM-218-157-centos cmake_test<span class="token punctuation">]</span><span class="token variable">$cd</span> debugbuild/</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>rwbyguo@VM-218-157-centos debugbuild<span class="token punctuation">]</span><span class="token variable">$cmake</span> <span class="token punctuation">..</span></pre></td></tr><tr><td data-num="3"></td><td><pre>-- The C compiler identification is GNU <span class="token number">7.3</span>.1</pre></td></tr><tr><td data-num="4"></td><td><pre>-- The CXX compiler identification is GNU <span class="token number">7.3</span>.1</pre></td></tr><tr><td data-num="5"></td><td><pre>-- Check <span class="token keyword">for</span> working C compiler: /usr/lib64/ccache/cc</pre></td></tr><tr><td data-num="6"></td><td><pre>-- Check <span class="token keyword">for</span> working C compiler: /usr/lib64/ccache/cc - works</pre></td></tr><tr><td data-num="7"></td><td><pre>-- Detecting C compiler ABI info</pre></td></tr><tr><td data-num="8"></td><td><pre>-- Detecting C compiler ABI info - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="9"></td><td><pre>-- Detecting C compile features</pre></td></tr><tr><td data-num="10"></td><td><pre>-- Detecting C compile features - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="11"></td><td><pre>-- Check <span class="token keyword">for</span> working CXX compiler: /usr/lib64/ccache/c++</pre></td></tr><tr><td data-num="12"></td><td><pre>-- Check <span class="token keyword">for</span> working CXX compiler: /usr/lib64/ccache/c++ - works</pre></td></tr><tr><td data-num="13"></td><td><pre>-- Detecting CXX compiler ABI info</pre></td></tr><tr><td data-num="14"></td><td><pre>-- Detecting CXX compiler ABI info - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="15"></td><td><pre>-- Detecting CXX compile features</pre></td></tr><tr><td data-num="16"></td><td><pre>-- Detecting CXX compile features - <span class="token keyword">done</span></pre></td></tr><tr><td data-num="17"></td><td><pre>-- This is BINARY <span class="token function">dir</span> /data/rwbyguo/cmake_test/debugbuild</pre></td></tr><tr><td data-num="18"></td><td><pre>-- This is SOURCE <span class="token function">dir</span> /data/rwbyguo/cmake_test</pre></td></tr><tr><td data-num="19"></td><td><pre>-- Configuring <span class="token keyword">done</span></pre></td></tr><tr><td data-num="20"></td><td><pre>-- Generating <span class="token keyword">done</span></pre></td></tr><tr><td data-num="21"></td><td><pre>-- Build files have been written to: /data/rwbyguo/cmake_test/debugbuild</pre></td></tr></table></figure><p>这时候它的  <code>BINARY</code>  和  <code>SOURCE</code>  路径就不一样了。</p><h2 id="编译一个工程"><a class="anchor" href="#编译一个工程">#</a> 编译一个工程</h2><h3 id="工程目录结构"><a class="anchor" href="#工程目录结构">#</a> 工程目录结构</h3><p>常规的 C++ 工程目录如下，需要编译哪个目录就在哪个目录下面创建一个 CMakeLists.txt：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="2"></td><td><pre>├── CMakeLists<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="3"></td><td><pre>├── debugbuild<span class="token comment">//cmake 生成的文件路径</span></pre></td></tr><tr><td data-num="4"></td><td><pre>├── external<span class="token comment">// 存放项目引用的第三方库</span></pre></td></tr><tr><td data-num="5"></td><td><pre>│   └── CMakeLists<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="6"></td><td><pre>├── resource<span class="token comment">// 存放项目资源文件</span></pre></td></tr><tr><td data-num="7"></td><td><pre>├── run</pre></td></tr><tr><td data-num="8"></td><td><pre>│   └── bin<span class="token comment">// 存放项目可执行的 bin 文件</span></pre></td></tr><tr><td data-num="9"></td><td><pre>└── src<span class="token comment">// 存放项目代码</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    ├── CMakeLists<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="11"></td><td><pre>    └── main<span class="token punctuation">.</span>cpp</pre></td></tr></table></figure><h2 id="进阶语法"><a class="anchor" href="#进阶语法">#</a> 进阶语法</h2><h3 id="file-关键字"><a class="anchor" href="#file-关键字">#</a> file 关键字</h3><p>文件操作命令，用法：</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>WRITE filename <span class="token string">"message to write"</span>... <span class="token punctuation">)</span> <span class="token comment"># 将消息写入 filename</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>APPEND filename <span class="token string">"message to write"</span>... <span class="token punctuation">)</span> <span class="token comment"># 将消息追加写入 filename</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>READ filename variable [LIMIT numBytes] [OFFSET offset] [HEX]<span class="token punctuation">)</span> <span class="token comment"># 从 filename 读取消息到 variable</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>&lt;MD5|SHA1|SHA224|SHA256|SHA384|SHA512<span class="token punctuation">></span> filename variable<span class="token punctuation">)</span> <span class="token comment"># 计算 filename 的加密哈希到 variable</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span><span class="token property">STRINGS</span> filename variable [LIMIT_COUNT num] <span class="token comment"># 将解析 filename 中的 ASCII 字符串列表并将其存储在 variable 中。二进制数据 和 回车会被忽略</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     [LIMIT_INPUT numBytes] [LIMIT_OUTPUT numBytes]</pre></td></tr><tr><td data-num="7"></td><td><pre>     [LENGTH_MINIMUM numBytes] [LENGTH_MAXIMUM numBytes]</pre></td></tr><tr><td data-num="8"></td><td><pre>     [NEWLINE_CONSUME] [REGEX regex]</pre></td></tr><tr><td data-num="9"></td><td><pre>     [NO_HEX_CONVERSION]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>GLOB variable [RELATIVE path] [globbing expressions]...<span class="token punctuation">)</span> <span class="token comment"># 生成 variable 用来存储 RELATIVE path 下所有满足 globbing expressions 的文件</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE variable [RELATIVE path] <span class="token comment"># 和 GLOB 类似，但不仅仅匹配文件，还匹配目录</span></pre></td></tr><tr><td data-num="12"></td><td><pre>     [FOLLOW_SYMLINKS] [globbing expressions]...<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>RENAME &lt;oldname<span class="token punctuation">></span> &lt;newname<span class="token punctuation">></span><span class="token punctuation">)</span> <span class="token comment"># 移动文件或目录，操作是原子性的</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>REMOVE [file1 ...]<span class="token punctuation">)</span> <span class="token comment"># 删除文件，包括子目录</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>REMOVE_RECURSE [file1 ...]<span class="token punctuation">)</span> <span class="token comment"># 删除目录或文件，包括子目录</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>MAKE_DIRECTORY [directory1 directory2 ...]<span class="token punctuation">)</span> <span class="token comment"># 创建目录，支持不存在父目录的创建</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>RELATIVE_PATH variable directory file<span class="token punctuation">)</span> <span class="token comment"># 获取 directory 和 file 的相对路径关系并保存在 variable。</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>TO_CMAKE_PATH path result<span class="token punctuation">)</span> <span class="token comment"># 将路径转为 unix 的 cmake 样式</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>TO_NATIVE_PATH path result<span class="token punctuation">)</span> <span class="token comment"># 将路径转为 windows 的 cmake 样式</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>DOWNLOAD url file [INACTIVITY_TIMEOUT timeout] <span class="token comment"># 将 url 内容下载到 file</span></pre></td></tr><tr><td data-num="21"></td><td><pre>     [<span class="token property">TIMEOUT</span> timeout] [STATUS status] [LOG log] [SHOW_PROGRESS]</pre></td></tr><tr><td data-num="22"></td><td><pre>     [EXPECTED_HASH ALGO=value] [EXPECTED_MD5 sum]</pre></td></tr><tr><td data-num="23"></td><td><pre>     [TLS_VERIFY on|off] [TLS_CAINFO file]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>UPLOAD filename url [INACTIVITY_TIMEOUT timeout] <span class="token comment"># 将 filename 内容上传到 url</span></pre></td></tr><tr><td data-num="25"></td><td><pre>     [<span class="token property">TIMEOUT</span> timeout] [STATUS status] [LOG log] [SHOW_PROGRESS]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>TIMESTAMP filename variable [&lt;format string<span class="token punctuation">></span>] [UTC]<span class="token punctuation">)</span> <span class="token comment"># 获取 filename 修改的时间字符串到 variable</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>GENERATE OUTPUT output_file <span class="token comment"># 将 input_file | input_content 内容写入 output_file</span></pre></td></tr><tr><td data-num="28"></td><td><pre>     &lt;INPUT input_file|CONTENT input_content<span class="token punctuation">></span></pre></td></tr><tr><td data-num="29"></td><td><pre>     [CONDITION expression]<span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="常见用法"><a class="anchor" href="#常见用法">#</a> 常见用法：</h4><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE my_src *.cpp *.h<span class="token punctuation">)</span> <span class="token comment"># 获取当前路径下的所有 .cpp 和 .h</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>my_executable <span class="token punctuation">$&#123;</span>my_src<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 编译出可执行文件</span></pre></td></tr></table></figure><h3 id="macroendmacro-关键字"><a class="anchor" href="#macroendmacro-关键字">#</a> macro/endmacro 关键字</h3><p>定义宏，用来给其他 CMakeLists.txt 使用。</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">macro</span><span class="token punctuation">(</span>&lt;name<span class="token punctuation">></span> [arg1 [arg2 [arg3 ...]]]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># dosomthing ...</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">endmacro</span><span class="token punctuation">(</span>&lt;name<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="include-关键字"><a class="anchor" href="#include-关键字">#</a> include 关键字</h3><p>引用 .cmake 文件，使用其中定义的变量或者其他函数</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">include</span><span class="token punctuation">(</span>&lt;file|module<span class="token punctuation">></span> [OPTIONAL] [RESULT_VARIABLE &lt;VAR<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="2"></td><td><pre>                      [NO_POLICY_SCOPE]<span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="配合-macro-使用"><a class="anchor" href="#配合-macro-使用">#</a> 配合 macro 使用：</h4><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># xxx.cmake</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">macro</span><span class="token punctuation">(</span>myfunc msg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token punctuation">$&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">endmacro</span><span class="token punctuation">(</span>myfunc msg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># CMakeLists.txt</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">include</span><span class="token punctuation">(</span>xxx.cmake<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">myfunc</span><span class="token punctuation">(</span><span class="token string">"this is msg"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="ifendif-关键字"><a class="anchor" href="#ifendif-关键字">#</a> if/endif 关键字</h3><p>条件语句：</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># dosomthing ...</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">elseif</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># dosomthing ...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="foreachendforeach-关键字"><a class="anchor" href="#foreachendforeach-关键字">#</a> foreach/endforeach 关键字</h3><p>循环语句，语法和 python 比较类似：</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">foreach</span><span class="token punctuation">(</span>loop_var arg1 arg2 ...<span class="token punctuation">)</span> <span class="token comment"># foreach(var IN list_xxx) | foreach(var RANGE start stop [step])</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># dosomthing ...</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">endforeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="configure_file-关键字"><a class="anchor" href="#configure_file-关键字">#</a> configure_file 关键字</h3><p>将一个文件复制到另一个位置，并对文件内容进行修改</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">configure_file</span><span class="token punctuation">(</span>&lt;input<span class="token punctuation">></span> &lt;output<span class="token punctuation">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>               [COPYONLY] [ESCAPE_QUOTES] [@ONLY]</pre></td></tr><tr><td data-num="3"></td><td><pre>               [NEWLINE_STYLE [<span class="token variable">UNIX</span>|DOS|<span class="token variable">WIN32</span>|LF|CRLF] ]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>               </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">configure_file</span><span class="token punctuation">(</span>file1 /src/file1<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="math-关键字"><a class="anchor" href="#math-关键字">#</a> math 关键字</h3><p>进行数学运算的函数</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">math</span><span class="token punctuation">(</span>EXPR &lt;output variable<span class="token punctuation">></span> &lt;math expression<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">math</span><span class="token punctuation">(</span>EXPR var <span class="token string">"8 * 8"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="string-关键字"><a class="anchor" href="#string-关键字">#</a> string 关键字</h3><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>REGEX MATCH &lt;regular_expression<span class="token punctuation">></span><span class="token comment"># 正则匹配字符串，返回首个匹配项</span></pre></td></tr><tr><td data-num="2"></td><td><pre>       &lt;output variable<span class="token punctuation">></span> &lt;input<span class="token punctuation">></span> [&lt;input<span class="token punctuation">></span>...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>REGEX MATCHALL &lt;regular_expression<span class="token punctuation">></span><span class="token comment"># 正则匹配字符串，尽可能多的匹配</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       &lt;output variable<span class="token punctuation">></span> &lt;input<span class="token punctuation">></span> [&lt;input<span class="token punctuation">></span>...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>REGEX REPLACE &lt;regular_expression<span class="token punctuation">></span><span class="token comment"># 正则匹配字符串，尽可能多的匹配，匹配成功后进行替换</span></pre></td></tr><tr><td data-num="6"></td><td><pre>       &lt;replace_expression<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>       &lt;input<span class="token punctuation">></span> [&lt;input<span class="token punctuation">></span>...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>REPLACE &lt;match_string<span class="token punctuation">></span>  <span class="token comment"># 非正则模式下尽可能多的字符串匹配和替换</span></pre></td></tr><tr><td data-num="9"></td><td><pre>       &lt;replace_string<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span></pre></td></tr><tr><td data-num="10"></td><td><pre>       &lt;input<span class="token punctuation">></span> [&lt;input<span class="token punctuation">></span>...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>CONCAT &lt;output variable<span class="token punctuation">></span> [&lt;input<span class="token punctuation">></span>...]<span class="token punctuation">)</span> <span class="token comment"># 字符串拼接类似 "".join</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>&lt;MD5|SHA1|SHA224|SHA256|SHA384|SHA512<span class="token punctuation">></span> <span class="token comment"># 计算字符串的加密哈希</span></pre></td></tr><tr><td data-num="13"></td><td><pre>       &lt;output variable<span class="token punctuation">></span> &lt;input<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment"># 字符串比较</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>COMPARE <span class="token operator">EQUAL</span> &lt;string1<span class="token punctuation">></span> &lt;string2<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>COMPARE NOTEQUAL &lt;string1<span class="token punctuation">></span> &lt;string2<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>COMPARE <span class="token operator">LESS</span> &lt;string1<span class="token punctuation">></span> &lt;string2<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>COMPARE <span class="token operator">GREATER</span> &lt;string1<span class="token punctuation">></span> &lt;string2<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>ASCII &lt;number<span class="token punctuation">></span> [&lt;number<span class="token punctuation">></span> ...] &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span> <span class="token comment"># 将字符串中的数字转为 ASCII 编码</span></pre></td></tr><tr><td data-num="21"></td><td><pre> <span class="token comment"># 字符串转换</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>CONFIGURE &lt;string1<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span></pre></td></tr><tr><td data-num="23"></td><td><pre>       [@ONLY] [ESCAPE_QUOTES]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>TOUPPER &lt;string1<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>TOLOWER &lt;string1<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>LENGTH &lt;string<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span> <span class="token comment"># 获取长度</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>SUBSTRING &lt;string<span class="token punctuation">></span> &lt;begin<span class="token punctuation">></span> &lt;length<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span> <span class="token comment"># 字符串切片</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>STRIP &lt;string<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span> <span class="token comment"># 字符去空格和 tab</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>RANDOM [LENGTH &lt;length<span class="token punctuation">></span>] [ALPHABET &lt;alphabet<span class="token punctuation">></span>] <span class="token comment"># 生成固定长度随机字符串</span></pre></td></tr><tr><td data-num="31"></td><td><pre>       [RANDOM_SEED &lt;seed<span class="token punctuation">></span>] &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>FIND &lt;string<span class="token punctuation">></span> &lt;substring<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span> [REVERSE]<span class="token punctuation">)</span> <span class="token comment"># 查找给定字串的下标</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>TIMESTAMP &lt;output variable<span class="token punctuation">></span> [&lt;format string<span class="token punctuation">></span>] [UTC]<span class="token punctuation">)</span> <span class="token comment"># 输出当前时间字符串</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">string</span><span class="token punctuation">(</span>MAKE_C_IDENTIFIER &lt;input string<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span> <span class="token comment"># will write a string which can be used as an identifier in C.</span></pre></td></tr></table></figure><h3 id="option-关键字"><a class="anchor" href="#option-关键字">#</a> option 关键字</h3><p>相当于创建一个 bool 类型的变量</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">option</span><span class="token punctuation">(</span>&lt;option_variable<span class="token punctuation">></span> <span class="token string">"help string describing option"</span></pre></td></tr><tr><td data-num="2"></td><td><pre>       [initial value]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>       </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">option</span><span class="token punctuation">(</span>NEED_CHECK_CONFIG <span class="token string">"是否需要检查配置"</span> <span class="token boolean">ON</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>NEED_CHECK_CONFIG<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># dosomething ...</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="add_definitions-关键字"><a class="anchor" href="#add_definitions-关键字">#</a> add_definitions 关键字</h3><p>搭配 option 使用，可以指定某个 option 不生效</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">add_definitions</span><span class="token punctuation">(</span>-DFOO -DBAR ...<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">add_definitions</span><span class="token punctuation">(</span><span class="token string">"-DNEED_CHECK_CONFIG"</span><span class="token punctuation">)</span> <span class="token comment"># NEED_CHECK_CONFIG  on -> off</span></pre></td></tr></table></figure><h3 id="list-关键字"><a class="anchor" href="#list-关键字">#</a> list 关键字</h3><p>比较简单，就是 list 容器和各项操作</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>LENGTH &lt;list<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>GET &lt;list<span class="token punctuation">></span> &lt;element index<span class="token punctuation">></span> [&lt;element index<span class="token punctuation">></span> ...]</pre></td></tr><tr><td data-num="3"></td><td><pre>     &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>APPEND &lt;list<span class="token punctuation">></span> [&lt;element<span class="token punctuation">></span> ...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>FIND &lt;list<span class="token punctuation">></span> &lt;value<span class="token punctuation">></span> &lt;output variable<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>INSERT &lt;list<span class="token punctuation">></span> &lt;element_index<span class="token punctuation">></span> &lt;element<span class="token punctuation">></span> [&lt;element<span class="token punctuation">></span> ...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>REMOVE_ITEM &lt;list<span class="token punctuation">></span> &lt;value<span class="token punctuation">></span> [&lt;value<span class="token punctuation">></span> ...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>REMOVE_AT &lt;list<span class="token punctuation">></span> &lt;index<span class="token punctuation">></span> [&lt;index<span class="token punctuation">></span> ...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>REMOVE_DUPLICATES &lt;list<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>REVERSE &lt;list<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">list</span><span class="token punctuation">(</span>SORT &lt;list<span class="token punctuation">></span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="install-关键字"><a class="anchor" href="#install-关键字">#</a> install 关键字</h3><p>指定执行  <code>cmake install</code>  时运行的安装规则。<span class="exturl" data-url="aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC9sYXRlc3QvY29tbWFuZC9pbnN0YWxsLmh0bWw=">官方文档</span></p><p>其中，一个内置变量经常被使用： <code>CMAKE_INSTALL_PREFIX=/usr/local</code></p><h4 id="常见安装模板"><a class="anchor" href="#常见安装模板">#</a> 常见安装模板</h4><p>安装非目标程序（shell 脚本）</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">install</span><span class="token punctuation">(</span>&lt;FILES|PROGRAMS<span class="token punctuation">></span> files... DESTINATION &lt;dir<span class="token punctuation">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>        [PERMISSIONS permissions...]</pre></td></tr><tr><td data-num="3"></td><td><pre>        [CONFIGURATIONS [Debug|Release|...]]</pre></td></tr><tr><td data-num="4"></td><td><pre>        [COMPONENT &lt;component<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="5"></td><td><pre>        [RENAME &lt;name<span class="token punctuation">></span>] [OPTIONAL]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># example FILES</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 把 README COPYRIGHT 两个文件安装到 $&#123;CMAKE_INSTALL_PREFIX&#125;/doc 下</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">install</span><span class="token punctuation">(</span>FILES README COPYRIGHT DESTINATION /doc<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># example PROGRAMS</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># 把 build.sh 安装到 $&#123;CMAKE_INSTALL_PREFIX&#125;/shell 下</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">install</span><span class="token punctuation">(</span>PROGRAMS build.sh DESTINATION /shell<span class="token punctuation">)</span></pre></td></tr></table></figure><p>安装一个或多个目录内容：</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">install</span><span class="token punctuation">(</span>DIRECTORY dirs... DESTINATION &lt;dir<span class="token punctuation">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>        [FILE_PERMISSIONS permissions...]</pre></td></tr><tr><td data-num="3"></td><td><pre>        [DIRECTORY_PERMISSIONS permissions...]</pre></td></tr><tr><td data-num="4"></td><td><pre>        [USE_SOURCE_PERMISSIONS] [OPTIONAL]</pre></td></tr><tr><td data-num="5"></td><td><pre>        [CONFIGURATIONS [Debug|Release|...]]</pre></td></tr><tr><td data-num="6"></td><td><pre>        [COMPONENT &lt;component<span class="token punctuation">></span>] [FILES_MATCHING]</pre></td></tr><tr><td data-num="7"></td><td><pre>        [[PATTERN &lt;pattern<span class="token punctuation">></span> | REGEX &lt;regex<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="8"></td><td><pre>         [EXCLUDE] [PERMISSIONS permissions...]] [...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># example DIRECTORY</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># 把 doc 目录下的内容安装到 $&#123;CMAKE_INSTALL_PREFIX&#125;/doc 下</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">install</span><span class="token punctuation">(</span>DIRECTORY doc/ DESTINATION /doc<span class="token punctuation">)</span></pre></td></tr></table></figure><p>安装常用的可选项：</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS targets... [EXPORT &lt;export-name<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="2"></td><td><pre>        [RUNTIME_DEPENDENCIES args...|RUNTIME_DEPENDENCY_SET &lt;set-name<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="3"></td><td><pre>        [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|<span class="token property">FRAMEWORK</span>|<span class="token property">BUNDLE</span>|</pre></td></tr><tr><td data-num="4"></td><td><pre>          <span class="token property">PRIVATE_HEADER</span>|<span class="token property">PUBLIC_HEADER</span>|<span class="token property">RESOURCE</span>|FILE_SET &lt;set-name<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="5"></td><td><pre>         [DESTINATION &lt;dir<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="6"></td><td><pre>         [PERMISSIONS permissions...]</pre></td></tr><tr><td data-num="7"></td><td><pre>         [CONFIGURATIONS [Debug|Release|...]]</pre></td></tr><tr><td data-num="8"></td><td><pre>         [COMPONENT &lt;component<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="9"></td><td><pre>         [NAMELINK_COMPONENT &lt;component<span class="token punctuation">></span>]</pre></td></tr><tr><td data-num="10"></td><td><pre>         [OPTIONAL] [<span class="token property">EXCLUDE_FROM_ALL</span>]</pre></td></tr><tr><td data-num="11"></td><td><pre>         [NAMELINK_ONLY|NAMELINK_SKIP]</pre></td></tr><tr><td data-num="12"></td><td><pre>        ] [...]</pre></td></tr><tr><td data-num="13"></td><td><pre>        [INCLUDES DESTINATION [&lt;dir<span class="token punctuation">></span> ...]]</pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># example TARGETS</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment"># 把 arenasvr 按照 RUNTIME 模式安装到 $&#123;CMAKE_INSTALL_PREFIX&#125;/as/bin 下</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS arenasvr RUNTIME DESTINATION <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_INSTALL_PREFIX</span><span class="token punctuation">&#125;</span>/as/bin<span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="targets"><a class="anchor" href="#targets">#</a> TARGETS</h4><p>${targets} 用来指定需要安装的源文件</p><h4 id="export"><a class="anchor" href="#export">#</a> EXPORT</h4><p targets="">指定安装后的文件名，默认为 $</p><h4 id="target-type"><a class="anchor" href="#target-type">#</a> Target Type</h4><p>指定 targets 的类型，如果 DESTINATION 没有设置情况下，不同类型的默认安装路径由 GNUInstallDirs Variable 决定</p><table><thead><tr><th style="text-align:left">Target Type</th><th>类型说明</th><th style="text-align:left">GNUInstallDirs Variable</th><th style="text-align:left">Built-In Default</th></tr></thead><tbody><tr><td style="text-align:left"><code>RUNTIME</code></td><td>可执行文件 | DLLs</td><td style="text-align:left"><code>$&#123;CMAKE_INSTALL_BINDIR&#125;</code></td><td style="text-align:left"><code>bin</code></td></tr><tr><td style="text-align:left"><code>LIBRARY</code></td><td>共享库</td><td style="text-align:left"><code>$&#123;CMAKE_INSTALL_LIBDIR&#125;</code></td><td style="text-align:left"><code>lib</code></td></tr><tr><td style="text-align:left"><code>ARCHIVE</code></td><td>静态库 | .lib | .dll</td><td style="text-align:left"><code>$&#123;CMAKE_INSTALL_LIBDIR&#125;</code></td><td style="text-align:left"><code>lib</code></td></tr><tr><td style="text-align:left"><code>FILE_SET</code>  (type  <code>HEADERS</code> )</td><td>文件集，会保留目录结构进行安装</td><td style="text-align:left"><code>$&#123;CMAKE_INSTALL_INCLUDEDIR&#125;</code></td><td style="text-align:left"><code>include</code></td></tr></tbody></table><h4 id="destination"><a class="anchor" href="#destination">#</a> DESTINATION</h4><p>指定安装目录，相对路径默认以 CMAKE_INSTALL_PREFIX 为根目录</p><h4 id="permissions"><a class="anchor" href="#permissions">#</a> PERMISSIONS</h4><p>指定安装文件的权限</p><h4 id="configurations"><a class="anchor" href="#configurations">#</a> CONFIGURATIONS</h4><p>指定安装构建的规则：Debug | Release</p><h2 id="静态库和动态库的构建"><a class="anchor" href="#静态库和动态库的构建">#</a> 静态库和动态库的构建</h2><h3 id="两者区别"><a class="anchor" href="#两者区别">#</a> 两者区别</h3><ul><li>静态库的扩展名一般为 .a 或 .lib；动态库的扩展名一般为 .so 或 .dll</li><li>静态库在编译是会直接整合到目标程序中，目标程序在编译完成后可独立运行</li><li>动态链接库在编译时不会放到连接的目标程序中，目标程序在运行过程中动态加载，因此目标程序不可独立运行</li></ul><h3 id="add_library-关键字"><a class="anchor" href="#add_library-关键字">#</a> add_library 关键字</h3><p>添加共享库构建项</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">add_library</span><span class="token punctuation">(</span>&lt;name<span class="token punctuation">></span> [<span class="token namespace">STATIC</span> | <span class="token namespace">SHARED</span> | MODULE]</pre></td></tr><tr><td data-num="2"></td><td><pre>            [<span class="token property">EXCLUDE_FROM_ALL</span>]</pre></td></tr><tr><td data-num="3"></td><td><pre>            source1 [source2 ...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">add_library</span><span class="token punctuation">(</span>lib_func <span class="token namespace">STATIC</span> lib_func.cpp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 构建时会得到 lib$&#123;name&#125;.xx 的库文件，例如这里对 lib_func 的构建结果为 liblib_func.a</span></pre></td></tr></table></figure><table><thead><tr><th>关键字</th><th>作用</th></tr></thead><tbody><tr><td>STATIC</td><td>生成静态库， .a 或 .lib</td></tr><tr><td>SHARED</td><td>生成动态库， .so 或 .dll</td></tr><tr><td>MODULE</td><td>生成动态库，可以在运行过程中通过 dlopen 动态加载， .so 或 .dll</td></tr></tbody></table><p>在根目录下新建一个 lib 文件，并且写个简单的函数：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="2"></td><td><pre>├── CMakeLists<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="3"></td><td><pre>├── lib</pre></td></tr><tr><td data-num="4"></td><td><pre>│   ├── CMakeLists<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="5"></td><td><pre>│   ├── lib<span class="token punctuation">.</span>cpp</pre></td></tr><tr><td data-num="6"></td><td><pre>│   └── lib<span class="token punctuation">.</span>h</pre></td></tr><tr><td data-num="7"></td><td><pre>└── src</pre></td></tr><tr><td data-num="8"></td><td><pre>    ├── CMakeLists<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="9"></td><td><pre>    └── main<span class="token punctuation">.</span>cpp</pre></td></tr></table></figure><blockquote><p>lib/CMakeLists.txt</p></blockquote><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">add_library</span><span class="token punctuation">(</span>lib_func <span class="token namespace">STATIC</span> lib.cpp<span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote><p>src/CMakeLists.txt</p></blockquote><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote><p>CMakeLists.txt</p></blockquote><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">project</span><span class="token punctuation">(</span>ROOT<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>lib bin/lib<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>src bin/src<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="add_subdirectory-关键字"><a class="anchor" href="#add_subdirectory-关键字">#</a> add_subdirectory 关键字</h3><p>添加需要编译的子目录，可以指定编译文件的路径</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>source_dir [binary_dir]</pre></td></tr><tr><td data-num="2"></td><td><pre>                 [<span class="token property">EXCLUDE_FROM_ALL</span>]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                 </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># example 编译 src 下面的 CMakeLists.txt 并把结果输出到 $&#123;PROJECT_SOURCE_DIR&#125;/bin/src 下</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>src bin/src<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="include_directories-关键字"><a class="anchor" href="#include_directories-关键字">#</a> include_directories  关键字</h3><p>添加外部库，可以避免在引用外部库头文件的时候，提示找不到头文件</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>/data/rwbyguo/cmake_test/src/main.cpp:2:10: 致命错误：lib.h：没有那个文件或目录</pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token comment">#include "lib.h"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>          ^~~~~~~</pre></td></tr><tr><td data-num="4"></td><td><pre>编译中断。</pre></td></tr></table></figure><p>用法：</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">include_directories</span><span class="token punctuation">(</span>[AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="target_link_libraries-关键字"><a class="anchor" href="#target_link_libraries-关键字">#</a> target_link_libraries 关键字</h3><p>为可执行程序添加链接库，可以避免在使用动态库中函数的时候找不到对应的实现</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>CMakeFiles/hello.dir/main.o：在函数‘main’中：</pre></td></tr><tr><td data-num="2"></td><td><pre>main.cpp:<span class="token punctuation">(</span>.text+0x5<span class="token punctuation">)</span>：对‘lib_func<span class="token punctuation">(</span><span class="token punctuation">)</span>’未定义的引用</pre></td></tr><tr><td data-num="3"></td><td><pre>collect2: 错误：ld 返回 <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>bin/src/hello<span class="token punctuation">]</span> 错误 <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>bin/src/CMakeFiles/hello.dir/all<span class="token punctuation">]</span> 错误 <span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>make: *** <span class="token punctuation">[</span>all<span class="token punctuation">]</span> 错误 <span class="token number">2</span></pre></td></tr></table></figure><p>添加需要连接的共享库：</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>&lt;target<span class="token punctuation">></span> [item1 [item2 [...]]]</pre></td></tr><tr><td data-num="2"></td><td><pre>                      [[debug|optimized|general] &lt;item<span class="token punctuation">></span>] ...<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># example 记得 target_link_libraries 需要放在 add_executable 后面</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>LIB_FUNC_PATH <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/debugbuild/bin/lib<span class="token punctuation">)</span> <span class="token comment">#/data/rwbyguo/cmake_test/debugbuild/bin/lib</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>hello <span class="token punctuation">$&#123;</span>LIB_FUNC_PATH<span class="token punctuation">&#125;</span>/liblib_func.a<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="link_directories-关键字"><a class="anchor" href="#link_directories-关键字">#</a> link_directories 关键字</h3><p>添加非标准的共享库搜索路径，可以简化链接库时的路径设置，搭配  <code>target_link_libraries</code>  使用</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">link_directories</span><span class="token punctuation">(</span>directory1 directory2 ...<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>LIB_FUNC_PATH <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/debugbuild/bin/lib<span class="token punctuation">)</span> <span class="token comment">#/data/rwbyguo/cmake_test/debugbuild/bin/lib</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>LIB_FUNC_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>hello liblib_func.a<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="link_libraries-关键字"><a class="anchor" href="#link_libraries-关键字">#</a> link_libraries 关键字</h3><p>连接库，可以不需要指定 target，相等于 target_link_libraries 提前版本。</p><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">link_libraries</span><span class="token punctuation">(</span>library1 &lt;debug | optimized<span class="token punctuation">></span> library2 ...<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># example</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>LIB_FUNC_PATH <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/debugbuild/bin/lib<span class="token punctuation">)</span> <span class="token comment">#/data/rwbyguo/cmake_test/debugbuild/bin/lib</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>LIB_FUNC_PATH<span class="token punctuation">&#125;</span>/liblib_func.a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="find_package-关键字"><a class="anchor" href="#find_package-关键字">#</a> find_package 关键字</h3><p>查找并加载外部包，支持两种搜索方式：</p><ul><li><strong>Module mode</strong>：CMake 先从  <code>CMAKE_MODULE_PATH</code>  搜索一个名为 的文件  <code>Find&lt;PackageName&gt;.cmake</code> 。</li><li><strong>Config mode</strong>：CMake 会搜索一个名为  <code>&lt;lowercasePackageName&gt;-config.cmake</code>  |  <code>&lt;PackageName&gt;Config.cmake</code>  的文件。查找流程较为复杂，见<span class="exturl" data-url="aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC9sYXRlc3QvY29tbWFuZC9maW5kX3BhY2thZ2UuaHRtbCNzZWFyY2gtcHJvY2VkdXJl">官方文档</span></li></ul><figure class="highlight cmake"><figcaption data-lang="CMake"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">find_package</span><span class="token punctuation">(</span>&lt;package<span class="token punctuation">></span> [version] [EXACT] [QUIET]</pre></td></tr><tr><td data-num="2"></td><td><pre>             [REQUIRED] [[COMPONENTS] [components...]]</pre></td></tr><tr><td data-num="3"></td><td><pre>             [CONFIG|NO_MODULE]</pre></td></tr><tr><td data-num="4"></td><td><pre>             [NO_POLICY_SCOPE]</pre></td></tr><tr><td data-num="5"></td><td><pre>             [NAMES name1 [name2 ...]]</pre></td></tr><tr><td data-num="6"></td><td><pre>             [CONFIGS config1 [config2 ...]]</pre></td></tr><tr><td data-num="7"></td><td><pre>             [HINTS path1 [path2 ... ]]</pre></td></tr><tr><td data-num="8"></td><td><pre>             [PATHS path1 [path2 ... ]]</pre></td></tr><tr><td data-num="9"></td><td><pre>             [PATH_SUFFIXES suffix1 [suffix2 ...]]</pre></td></tr><tr><td data-num="10"></td><td><pre>             [NO_DEFAULT_PATH]</pre></td></tr><tr><td data-num="11"></td><td><pre>             [NO_CMAKE_ENVIRONMENT_PATH]</pre></td></tr><tr><td data-num="12"></td><td><pre>             [NO_CMAKE_PATH]</pre></td></tr><tr><td data-num="13"></td><td><pre>             [NO_SYSTEM_ENVIRONMENT_PATH]</pre></td></tr><tr><td data-num="14"></td><td><pre>             [NO_CMAKE_PACKAGE_REGISTRY]</pre></td></tr><tr><td data-num="15"></td><td><pre>             [NO_CMAKE_BUILDS_PATH]</pre></td></tr><tr><td data-num="16"></td><td><pre>             [NO_CMAKE_SYSTEM_PATH]</pre></td></tr><tr><td data-num="17"></td><td><pre>             [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]</pre></td></tr><tr><td data-num="18"></td><td><pre>             [<span class="token variable">CMAKE_FIND_ROOT_PATH_BOTH</span> |</pre></td></tr><tr><td data-num="19"></td><td><pre>              ONLY_CMAKE_FIND_ROOT_PATH |</pre></td></tr><tr><td data-num="20"></td><td><pre>              NO_CMAKE_FIND_ROOT_PATH]<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>              </pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment"># example 官方提供了 protobuf 的配置 https://cmake.org/cmake/help/latest/module/FindProtobuf.html</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">#protobuf</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_DIR <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/external/protobuf<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_INCLUDE_DIR <span class="token punctuation">$&#123;</span>PROTOBUF_DIR<span class="token punctuation">&#125;</span>/include<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_LIBRARY_DIR <span class="token punctuation">$&#123;</span>PROTOBUF_DIR<span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_PROTOC_EXECUTABLE <span class="token punctuation">$&#123;</span>PROTOBUF_DIR<span class="token punctuation">&#125;</span>/bin/protoc<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">MSVC</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_PROTOC_EXECUTABLE <span class="token punctuation">$&#123;</span>PROTOBUF_DIR<span class="token punctuation">&#125;</span>/bin/protoc.exe<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token variable">MSVC</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_LIBRARY <span class="token punctuation">$&#123;</span>PROTOBUF_LIBRARY_DIR<span class="token punctuation">&#125;</span>/libprotobuf.a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_LIBRARY_DEBUG <span class="token punctuation">$&#123;</span>PROTOBUF_LIBRARY_DIR<span class="token punctuation">&#125;</span>/libprotobuf.a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">set</span><span class="token punctuation">(</span>PROTOBUF_IMPORT_DIRS<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">find_package</span><span class="token punctuation">(</span>Protobuf REQUIRED<span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="exact"><a class="anchor" href="#exact">#</a> EXACT</h4><p>要求 version 版本匹配</p><h4 id="quirt"><a class="anchor" href="#quirt">#</a> QUIRT</h4><p>如果引入外部包失败，不提示消息</p><h4 id="required"><a class="anchor" href="#required">#</a> REQUIRED</h4><p>如果引入外部包失败，停止编译流程，并提示错误消息</p><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC92My4wL21hbnVhbC9jbWFrZS1jb21tYW5kcy43Lmh0bWw=">cmake 官方文档</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZSNHkxdTc3aD9zcG1faWRfZn</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="编译相关" scheme="https://hakuya.me/categories/learning/compile/"/>
    
    
    <category term="cmake" scheme="https://hakuya.me/tags/cmake/"/>
    
    <category term="编译" scheme="https://hakuya.me/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>PhysX——Memory Management篇</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Memory%20Management%E7%AF%87/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E2%80%94%E2%80%94Memory%20Management%E7%AF%87/</id>
    <published>2022-04-15T03:47:00.000Z</published>
    <updated>2022-12-29T01:36:04.546Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physxmemory-management篇未完待续"><a class="anchor" href="#physxmemory-management篇未完待续">#</a> PhysX——Memory Management 篇 (未完待续)</h1><p>PhysX 所有对象的分配都是基于 <strong>Foundation</strong> 内的 <strong>PxAllocatorCallback</strong> 完成，这里以 <strong>PsPool</strong> 作为按理简单介绍一下</p><p>先来看看 <strong>Pool</strong> 的构造函数，这里稍微有些绕：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 通过泛型模板定义好该类型的分配器 Alloc</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">AllocatorTraits</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span>Type<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">class</span> <span class="token class-name">PoolBase</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UserAllocated</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Alloc</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">PX_NOCOPY</span><span class="token punctuation">(</span>PoolBase<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">protected</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">PoolBase</span><span class="token punctuation">(</span><span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> elementsPerSlab<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> slabSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token operator">:</span> <span class="token function">Alloc</span><span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mSlabs</span><span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mElementsPerSlab</span><span class="token punctuation">(</span>elementsPerSlab<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mUsed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mSlabSize</span><span class="token punctuation">(</span>slabSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mFreeElement</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token function">PX_COMPILE_TIME_ASSERT</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里接收一个 <strong>T</strong> 类型的模板类，并根据模板类声明对应的模板类内存分配器 <strong>Alloc</strong>。  <code>AllocatorTraits&lt;T&gt;::Type</code>  分为两类，这个后面再详细介绍：</p><ul><li>基于名字查找的分配 ——<strong>NamedAllocator</strong></li><li>不基于名字查找的分配 ——<strong>ReflectionAllocator</strong>。</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">AllocatorTraits</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PX_USE_NAMED_ALLOCATOR</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> NamedAllocator Type<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">typedef</span> ReflectionAllocator<span class="token operator">&lt;</span>T<span class="token operator">></span> Type<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>不论哪一个，其提供的 <strong>allocate</strong> 函数都会最终指向 <strong>Foundation</strong> 的 <strong>allocate</strong> 函数：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// NamedAllocator</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">NamedAllocator</span><span class="token operator">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Foundation<span class="token operator">::</span>Mutex<span class="token operator">::</span>ScopedLock <span class="token function">lock</span><span class="token punctuation">(</span><span class="token function">getMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> AllocNameMap<span class="token operator">::</span>Entry<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">PX_ASSERT</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">return</span> <span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> e<span class="token operator">-></span>second<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// ReflectionAllocator&lt;T></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> size <span class="token operator">?</span> <span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//getAllocator 实际上是从全局单例 Foundation 获取分配器对象</span></pre></td></tr><tr><td data-num="19"></td><td><pre>PxAllocatorCallback<span class="token operator">&amp;</span> <span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">return</span> <span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>细心的小伙伴应该发现了两者的细微差别：<strong>NamedAllocator</strong> 里使用了名字字典并且为了保证线程安全还加了锁，这个我们后面再讲。</p><p>下面先来看看 <strong>Foundation</strong> 的 <strong>getAllocator</strong> 里面获取到的到底是什么：🤔</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Foundation 的分配器获取实现如下:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>PxAllocatorCallback<span class="token operator">&amp;</span> <span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> mBroadcastingAllocator<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 分配器的注册可以由开发者指定，一般情况下都是使用默认分配器 PxDefaultAllocator</span></pre></td></tr><tr><td data-num="8"></td><td><pre>physx<span class="token operator">::</span>PxFoundation<span class="token operator">*</span> <span class="token function">PxCreateFoundation</span><span class="token punctuation">(</span>physx<span class="token operator">::</span>PxU32 version<span class="token punctuation">,</span> physx<span class="token operator">::</span>PxAllocatorCallback<span class="token operator">&amp;</span> allocator<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                                        physx<span class="token operator">::</span>PxErrorCallback<span class="token operator">&amp;</span> errorCallback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>       <span class="token keyword">return</span> physx<span class="token operator">::</span>shdfnd<span class="token operator">::</span><span class="token class-name">Foundation</span><span class="token operator">::</span><span class="token function">createInstance</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> errorCallback<span class="token punctuation">,</span> allocator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Foundation 自身是个单例</span></pre></td></tr><tr><td data-num="15"></td><td><pre>Foundation<span class="token operator">*</span> <span class="token class-name">Foundation</span><span class="token operator">::</span><span class="token function">createInstance</span><span class="token punctuation">(</span>PxU32 version<span class="token punctuation">,</span> PxErrorCallback<span class="token operator">&amp;</span> errc<span class="token punctuation">,</span> PxAllocatorCallback<span class="token operator">&amp;</span> alloc<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mInstance<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>mInstance <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>Foundation<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foundation<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Foundation"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// ...</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">PX_PLACEMENT_NEW</span><span class="token punctuation">(</span>mInstance<span class="token punctuation">,</span> Foundation<span class="token punctuation">)</span><span class="token punctuation">(</span>errc<span class="token punctuation">,</span> alloc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    </pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">//Foundation 的构造函数，其中 mAllocatorCallback 和 mBroadcastingAllocator 都是通过 alloc 对象进行内存分配</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token class-name">Foundation</span><span class="token operator">::</span><span class="token function">Foundation</span><span class="token punctuation">(</span>PxErrorCallback<span class="token operator">&amp;</span> errc<span class="token punctuation">,</span> PxAllocatorCallback<span class="token operator">&amp;</span> alloc<span class="token punctuation">)</span> <span class="token operator">:</span> </pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">mAllocatorCallback</span><span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 在这里被初始化</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">mBroadcastingAllocator</span><span class="token punctuation">(</span>alloc<span class="token punctuation">,</span> errc<span class="token punctuation">)</span> <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>getAllocator</strong> 返回的是一个 <strong>PxAllocatorCallback</strong> 的对象，在初始化 <strong>Foundation</strong> 的时候被设置。</p><p>一般情况下会使用默认的分配器进行初始化，当然也可以开发者指定：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">PxDefaultAllocator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">PxAllocatorCallback</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">//linux 用 malloc, window 用 _aligned_malloc, 保证 16 字节对齐</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">platformAlignedAlloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">PX_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>size_t<span class="token operator">></span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">return</span> ptr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">platformAlignedFree</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="内存分配器"><a class="anchor" href="#内存分配器">#</a> 内存分配器</h2><p>前面简单介绍了 Physx 的两种内存分配器，这里在做一个小小的展开🪂</p><h3 id="namedallocator"><a class="anchor" href="#namedallocator">#</a> NamedAllocator</h3><p>名字查找的分配器会在 CHECK 或者 DEBUG 模式下开启：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PX_DEBUG <span class="token operator">||</span> PX_CHECKED</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">PX_USE_NAMED_ALLOCATOR <span class="token number">1</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">PX_USE_NAMED_ALLOCATOR <span class="token number">0</span></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr></table></figure><p>由于名字查找的分配模式需要操作 <strong>Foundation</strong> 内部的一个名字字典，每次查改都需要加锁，所以效率会慢一些：</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>PX_INLINE AllocNameMap<span class="token operator">&amp;</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">return</span> <span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamedAllocMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 初始化的时候新增（加锁）</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">NamedAllocator</span><span class="token operator">::</span><span class="token function">NamedAllocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Foundation<span class="token operator">::</span>Mutex<span class="token operator">::</span>ScopedLock <span class="token function">lock</span><span class="token punctuation">(</span><span class="token function">getMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 内存分配的时候查找（加锁）</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">NamedAllocator</span><span class="token operator">::</span><span class="token function">allocate</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>Foundation<span class="token operator">::</span>Mutex<span class="token operator">::</span>ScopedLock <span class="token function">lock</span><span class="token punctuation">(</span><span class="token function">getMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> AllocNameMap<span class="token operator">::</span>Entry<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">PX_ASSERT</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">return</span> <span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> e<span class="token operator">-></span>second<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="reflectionallocator"><a class="anchor" href="#reflectionallocator">#</a> ReflectionAllocator</h3><p>初见 <strong>Reflection</strong> 还以为通过反射机制来实现内存分配，想着蛮吊的。</p><p>细看之下越发的疑惑，压根没有任何反射逻辑，单纯是不使用名字查找，且名字通过 C++ 内置的  <code>typeid(T).name()</code>  自动生成。🤕</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ReflectionAllocator</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">ReflectionAllocator</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">allocate</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">return</span> size <span class="token operator">?</span> <span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">getAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>效率上面比 <strong>NamedAllocator</strong> 高的原因大概是省略了名字字典的操作，避免额外的加锁。</p><p>另外感叹一下这个类做成模板类看起来仅仅只为了获取  <code>typeid(T)</code> ，属实有些大材小用。</p><p>todo...</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="Memory Management" scheme="https://hakuya.me/tags/Memory-Management/"/>
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>PhysX内置容器介绍</title>
    <link href="https://hakuya.me/learning/physx/PhysX%E5%86%85%E7%BD%AE%E5%AE%B9%E5%99%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://hakuya.me/learning/physx/PhysX%E5%86%85%E7%BD%AE%E5%AE%B9%E5%99%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-04-15T03:47:00.000Z</published>
    <updated>2022-12-29T01:36:04.547Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>以下为个人学习笔记整理。参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtzbGlicmFyeS9waHlzeC9ndWlkZS9NYW51YWwvR2VvbWV0cnlRdWVyaWVzLmh0bWwjZ2VvbWV0cnlxdWVyaWVz"> PhysX SDK 3.4.0 文档</span>，部分代码可能来源于更高版本。</p></div><h1 id="physx内置容器介绍未完待续"><a class="anchor" href="#physx内置容器介绍未完待续">#</a> PhysX 内置容器介绍（未完待续）</h1><p>本文主要归纳了 PhysX 里看到的一些内置容器，因为用的时候每次都要确认一下，干脆做个系统记录。</p><h2 id="基础容器"><a class="anchor" href="#基础容器">#</a> 基础容器</h2><h3 id="array"><a class="anchor" href="#array">#</a> Array</h3><p>常规数组，支持扩容。插入时如果容量不够了触发扩容，每次扩容容量翻倍。</p><h3 id="inlinearray"><a class="anchor" href="#inlinearray">#</a> InlineArray</h3><p>支持提前分配好 N 个元素的 Array。</p><h3 id="pool"><a class="anchor" href="#pool">#</a> Pool</h3><p><strong>Pool</strong> 其实是一个维护多个指针的数组，其继承自 <strong>PoolBase</strong>：</p><ul><li>mSlabs：<strong>InlineArray</strong> 的数组指针，初始时大小为 64。</li><li>mElementsPerSlab：代表每次分配新数组时的数组元素个数。</li><li>mSlabSize：代表每次新分配数组时的数组大小。</li><li>mUsed：记录整个 <strong>Pool</strong> 中所有被使用的元素个数。</li><li>mFreeElement：记录了所有空闲节点的单链表。</li></ul><p>这里有一点比较有意思，构建空链表的时候用了 <strong>reinterpret_cast</strong>，会把当前节点原本的类型视为 <strong>FreeList</strong> 来使用，因此数组中每个元素至少都得有一个指针大小，否则就会有问题。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220823163318660.png" alt="image-20220823163318660" /></p><h3 id="hashmap"><a class="anchor" href="#hashmap">#</a> HashMap</h3><p>PhysX 内置的 <strong>HashMap</strong>，用的是类似 hash 桶的实现。</p><ul><li>mFreeList：指向空闲链头</li><li>mHash：hash 桶，存放第一个节点的下标</li><li>mEntries：对象数组，存放所有对象数据</li><li>mEntriesNext：存放对应下标的 mEntries 节点的下一个节点下标</li></ul><p>默认 Hash 桶数量为 64，装载因子 0.75。超过后触发扩容机制，2 倍扩容。</p><p>例如下图：4，16，8 都在第一个 hash 桶里，通过 mEntriesNext 把他们给串起来，同理 mFreeList 也通过 mEntriesNext  把空闲节点串起来。</p><p><img data-src="https://blog-1255596461.cos.ap-guangzhou.myqcloud.com/blog_pic/image-20220720204742985.png" alt="image-20220720204742985" /></p><h2 id="特殊容器"><a class="anchor" href="#特殊容器">#</a> 特殊容器</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
&lt;p&gt;以下为个人学习笔记整理。参考&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZ2FtZXdvcmtzL2NvbnRlbnQvZ2FtZXdvcmtz</summary>
      
    
    
    
    <category term="学习" scheme="https://hakuya.me/categories/learning/"/>
    
    <category term="物理引擎" scheme="https://hakuya.me/categories/learning/physx/"/>
    
    
    <category term="PhysX" scheme="https://hakuya.me/tags/PhysX/"/>
    
    <category term="UE" scheme="https://hakuya.me/tags/UE/"/>
    
    <category term="Container" scheme="https://hakuya.me/tags/Container/"/>
    
  </entry>
  
</feed>
